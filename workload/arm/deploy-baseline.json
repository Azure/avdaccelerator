{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "14754462865472050536"
    },
    "name": "W365 Accelerator - Baseline Deployment",
    "description": "W365 Accelerator - Deployment Baseline",
    "owner": "Azure/w365lza"
  },
  "parameters": {
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "W001",
      "minLength": 2,
      "maxLength": 4,
      "metadata": {
        "description": "The name of the resource group to deploy. (Default: W001)"
      }
    },
    "deploymentEnvironment": {
      "type": "string",
      "defaultValue": "Dev",
      "allowedValues": [
        "Dev",
        "Test",
        "Prod"
      ],
      "metadata": {
        "description": "Optional. The name of the resource group to deploy. (Default: Dev)"
      }
    },
    "w365Location": {
      "type": "string",
      "metadata": {
        "description": "Required. Location where to deploy W365 landing zone services."
      }
    },
    "w365SubId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. W365 workload subscription ID"
      }
    },
    "existingHubVnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Existing hub virtual network for peering. (Default: \"\")"
      }
    },
    "w365VnetworkAddressPrefixes": {
      "type": "string",
      "defaultValue": "10.10.0.0/23",
      "metadata": {
        "description": "w365 virtual network address prefixes. (Default: 10.10.0.0/23)"
      }
    },
    "w365vNetworkSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/24",
      "metadata": {
        "description": "w365 virtual network subnet address prefix. (Default: 10.10.0.0/23)"
      }
    },
    "customDnsIps": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. custom DNS servers IPs. (Default: \"\")"
      }
    },
    "deployDDoSNetworkProtection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy DDoS Network Protection for virtual network. (Default: true)"
      }
    },
    "vNetworkGatewayOnHub": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Does the hub contains a virtual network gateway. (Default: false)"
      }
    },
    "w365UseCustomNaming": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "W365 resources custom naming. (Default: false)"
      }
    },
    "w365ServiceObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-w365-app1-dev-use2-service-objects",
      "maxLength": 90,
      "metadata": {
        "description": "W365 service resources resource group custom name. (Default: rg-w365-app1-dev-use2-service-objects)"
      }
    },
    "w365NetworkObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-w365-app1-dev-use2-network",
      "maxLength": 90,
      "metadata": {
        "description": "W365 network resources resource group custom name. (Default: rg-w365-app1-dev-use2-network)"
      }
    },
    "w365ComputeObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-w365-app1-dev-use2-pool-compute",
      "maxLength": 90,
      "metadata": {
        "description": "W365 network resources resource group custom name. (Default: rg-w365-app1-dev-use2-pool-compute)"
      }
    },
    "w365VnetworkCustomName": {
      "type": "string",
      "defaultValue": "vnet-app1-dev-use2-001",
      "maxLength": 64,
      "metadata": {
        "description": "W365 virtual network custom name. (Default: vnet-app1-dev-use2-001)"
      }
    },
    "w365VnetworkSubnetCustomName": {
      "type": "string",
      "defaultValue": "snet-w365-app1-dev-use2-001",
      "maxLength": 80,
      "metadata": {
        "description": "W365 virtual network subnet custom name. (Default: snet-w365-app1-dev-use2-001)"
      }
    },
    "w365NetworksecurityGroupCustomName": {
      "type": "string",
      "defaultValue": "nsg-w365-app1-dev-use2-001",
      "maxLength": 80,
      "metadata": {
        "description": "W365 network security group custom name. (Default: nsg-w365-app1-dev-use2-001)"
      }
    },
    "w365RouteTableCustomName": {
      "type": "string",
      "defaultValue": "route-w365-app1-dev-use2-001",
      "maxLength": 80,
      "metadata": {
        "description": "W365 route table custom name. (Default: route-w365-app1-dev-use2-001)"
      }
    },
    "w365ApplicationSecurityGroupCustomName": {
      "type": "string",
      "defaultValue": "asg-app1-dev-use2-001",
      "maxLength": 80,
      "metadata": {
        "description": "W365 application security custom name. (Default: asg-app1-dev-use2-001)"
      }
    },
    "createResourceTags": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Apply tags on resources and resource groups. (Default: false)"
      }
    },
    "workloadNameTag": {
      "type": "string",
      "defaultValue": "Contoso-Workload",
      "metadata": {
        "description": "The name of workload for tagging purposes. (Default: Contoso-Workload)"
      }
    },
    "workloadTypeTag": {
      "type": "string",
      "defaultValue": "Light",
      "allowedValues": [
        "Light",
        "Medium",
        "High",
        "Power"
      ],
      "metadata": {
        "description": "Reference to the size of the VM for your workloads (Default: Light)"
      }
    },
    "dataClassificationTag": {
      "type": "string",
      "defaultValue": "Non-business",
      "allowedValues": [
        "Non-business",
        "Public",
        "General",
        "Confidential",
        "Highly-confidential"
      ],
      "metadata": {
        "description": "Sensitivity of data hosted (Default: Non-business)"
      }
    },
    "departmentTag": {
      "type": "string",
      "defaultValue": "Contoso-W365",
      "metadata": {
        "description": "Department that owns the deployment, (Dafult: Contoso-W365)"
      }
    },
    "workloadCriticalityTag": {
      "type": "string",
      "defaultValue": "Low",
      "allowedValues": [
        "Low",
        "Medium",
        "High",
        "Mission-critical",
        "Custom"
      ],
      "metadata": {
        "description": "Criticality of the workload. (Default: Low)"
      }
    },
    "workloadCriticalityCustomValueTag": {
      "type": "string",
      "defaultValue": "Contoso-Critical",
      "metadata": {
        "description": "Tag value for custom criticality value. (Default: Contoso-Critical)"
      }
    },
    "applicationNameTag": {
      "type": "string",
      "defaultValue": "Contoso-App",
      "metadata": {
        "description": "Details about the application."
      }
    },
    "workloadSlaTag": {
      "type": "string",
      "defaultValue": "Contoso-SLA",
      "metadata": {
        "description": "Service level agreement level of the worload. (Contoso-SLA)"
      }
    },
    "opsTeamTag": {
      "type": "string",
      "defaultValue": "workload-admins@Contoso.com",
      "metadata": {
        "description": "Team accountable for day-to-day operations. (workload-admins@Contoso.com)"
      }
    },
    "ownerTag": {
      "type": "string",
      "defaultValue": "workload-owner@Contoso.com",
      "metadata": {
        "description": "Organizational owner of the W365 deployment. (Default: workload-owner@Contoso.com)"
      }
    },
    "costCenterTag": {
      "type": "string",
      "defaultValue": "Contoso-CC",
      "metadata": {
        "description": "Cost center of owner team. (Default: Contoso-CC)"
      }
    },
    "time": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Do not modify, used to set unique value for resource deployment."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable usage and telemetry feedback to Microsoft."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "australiacentral": {
        "acronym": "auc",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiacentral2": {
        "acronym": "auc2",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiaeast": {
        "acronym": "aue",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiasoutheast": {
        "acronym": "ause",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "brazilsouth": {
        "acronym": "brs",
        "timeDifference": "-3:00",
        "timeZone": "E. South America Standard Time"
      },
      "brazilsoutheast": {
        "acronym": "brse",
        "timeDifference": "-3:00",
        "timeZone": "E. South America Standard Time"
      },
      "canadacentral": {
        "acronym": "cac",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "canadaeast": {
        "acronym": "cae",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "centralindia": {
        "acronym": "inc",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "centralus": {
        "acronym": "usc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "chinaeast": {
        "acronym": "cne",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinaeast2": {
        "acronym": "cne2",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth": {
        "acronym": "cnn",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth2": {
        "acronym": "cnn2",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth3": {
        "acronym": "cnn3",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "eastasia": {
        "acronym": "ase",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "eastus": {
        "acronym": "use",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "eastus2": {
        "acronym": "use2",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "francecentral": {
        "acronym": "frc",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "francesouth": {
        "acronym": "frs",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "germanynorth": {
        "acronym": "den",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "germanywestcentral": {
        "acronym": "dewc",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "japaneast": {
        "acronym": "jpe",
        "timeDifference": "+9:00",
        "timeZone": "Tokyo Standard Time"
      },
      "japanwest": {
        "acronym": "jpw",
        "timeDifference": "+9:00",
        "timeZone": "Tokyo Standard Time"
      },
      "jioindiacentral": {
        "acronym": "injc",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "jioindiawest": {
        "acronym": "injw",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "koreacentral": {
        "acronym": "krc",
        "timeDifference": "+9:00",
        "timeZone": "Korea Standard Time"
      },
      "koreasouth": {
        "acronym": "krs",
        "timeDifference": "+9:00",
        "timeZone": "Korea Standard Time"
      },
      "northcentralus": {
        "acronym": "usnc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "northeurope": {
        "acronym": "eun",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "norwayeast": {
        "acronym": "noe",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "norwaywest": {
        "acronym": "now",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "italynorth": {
        "acronym": "itn",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "southafricanorth": {
        "acronym": "zan",
        "timeDifference": "+2:00",
        "timeZone": "South Africa Standard Time"
      },
      "southafricawest": {
        "acronym": "zaw",
        "timeDifference": "+2:00",
        "timeZone": "South Africa Standard Time"
      },
      "southcentralus": {
        "acronym": "ussc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "southeastasia": {
        "acronym": "asse",
        "timeDifference": "+8:00",
        "timeZone": "Singapore Standard Time"
      },
      "southindia": {
        "acronym": "ins",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "swedencentral": {
        "acronym": "sec",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "switzerlandnorth": {
        "acronym": "chn",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "switzerlandwest": {
        "acronym": "chw",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "uaecentral": {
        "acronym": "aec",
        "timeDifference": "+3:00",
        "timeZone": "Arabian Standard Time"
      },
      "uaenorth": {
        "acronym": "aen",
        "timeDifference": "+3:00",
        "timeZone": "Arabian Standard Time"
      },
      "uksouth": {
        "acronym": "uks",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "ukwest": {
        "acronym": "ukw",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "usdodcentral": {
        "acronym": "dodc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "usdodeast": {
        "acronym": "dode",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "usgovarizona": {
        "acronym": "az",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      },
      "usgovtexas": {
        "acronym": "tx",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "usgovvirginia": {
        "acronym": "va",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "westcentralus": {
        "acronym": "uswc",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      },
      "westeurope": {
        "acronym": "euw",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "westindia": {
        "acronym": "inw",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "westus": {
        "acronym": "usw",
        "timeDifference": "-8:00",
        "timeZone": "Pacific Standard Time"
      },
      "westus2": {
        "acronym": "usw2",
        "timeDifference": "-8:00",
        "timeZone": "Pacific Standard Time"
      },
      "westus3": {
        "acronym": "usw3",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      }
    },
    "varDeploymentPrefixLowercase": "[toLower(parameters('deploymentPrefix'))]",
    "varDeploymentEnvironmentLowercase": "[toLower(parameters('deploymentEnvironment'))]",
    "varW365LocationAcronym": "[variables('varLocations')[variables('varSessionHostLocationLowercase')].acronym]",
    "varLocations": "[variables('$fxv#0')]",
    "varResourcesNamingStandard": "[format('{0}-{1}-{2}', variables('varDeploymentPrefixLowercase'), variables('varDeploymentEnvironmentLowercase'), variables('varW365LocationAcronym'))]",
    "varSessionHostLocationLowercase": "[toLower(replace(parameters('w365Location'), ' ', ''))]",
    "varNetworkObjectsRgName": "[if(parameters('w365UseCustomNaming'), parameters('w365NetworkObjectsRgCustomName'), format('rg-w365-{0}-network', variables('varResourcesNamingStandard')))]",
    "varServiceObjectsRgName": "[if(parameters('w365UseCustomNaming'), parameters('w365ServiceObjectsRgCustomName'), format('rg-w365-{0}-service-objects', variables('varResourcesNamingStandard')))]",
    "varComputeObjectsRgName": "[if(parameters('w365UseCustomNaming'), parameters('w365ComputeObjectsRgCustomName'), format('rg-w365-{0}-pool-compute', variables('varResourcesNamingStandard')))]",
    "varVnetName": "[if(parameters('w365UseCustomNaming'), parameters('w365VnetworkCustomName'), format('vnet-{0}-001', variables('varResourcesNamingStandard')))]",
    "varHubVnetName": "[if(not(empty(parameters('existingHubVnetResourceId'))), split(parameters('existingHubVnetResourceId'), '/')[8], '')]",
    "varVnetPeeringName": "[format('peer-{0}', variables('varHubVnetName'))]",
    "varRemoteVnetPeeringName": "[format('peer-{0}', variables('varVnetName'))]",
    "varVnetW365SubnetName": "[if(parameters('w365UseCustomNaming'), parameters('w365VnetworkSubnetCustomName'), format('snet-w365-{0}-001', variables('varResourcesNamingStandard')))]",
    "varApplicationSecurityGroupName": "[if(parameters('w365UseCustomNaming'), parameters('w365ApplicationSecurityGroupCustomName'), format('asg-{0}-001', variables('varResourcesNamingStandard')))]",
    "varW365NetworksecurityGroupName": "[if(parameters('w365UseCustomNaming'), parameters('w365NetworksecurityGroupCustomName'), format('nsg-w365-{0}-001', variables('varResourcesNamingStandard')))]",
    "varW365RouteTableName": "[if(parameters('w365UseCustomNaming'), parameters('w365RouteTableCustomName'), format('route-w365-{0}-001', variables('varResourcesNamingStandard')))]",
    "varDDosProtectionPlanName": "[format('ddos-{0}', variables('varVnetName'))]",
    "varAllDnsServers": "[format('{0},168.63.129.16', parameters('customDnsIps'))]",
    "varDnsServers": "[if(empty(parameters('customDnsIps')), createArray(), split(variables('varAllDnsServers'), ','))]",
    "varCreateVnetPeering": "[if(not(empty(parameters('existingHubVnetResourceId'))), true(), false())]",
    "varCustomResourceTags": "[if(parameters('createResourceTags'), createObject('WorkloadName', parameters('workloadNameTag'), 'WorkloadType', parameters('workloadTypeTag'), 'DataClassification', parameters('dataClassificationTag'), 'Department', parameters('departmentTag'), 'Criticality', if(equals(parameters('workloadCriticalityTag'), 'Custom'), parameters('workloadCriticalityCustomValueTag'), parameters('workloadCriticalityTag')), 'ApplicationName', parameters('applicationNameTag'), 'ServiceClass', parameters('workloadSlaTag'), 'OpsTeam', parameters('opsTeamTag'), 'Owner', parameters('ownerTag'), 'CostCenter', parameters('costCenterTag')), createObject())]",
    "varW365DefaultTags": {
      "Environment": "[parameters('deploymentEnvironment')]",
      "ServiceWorkload": "W365",
      "CreationTimeUTC": "[parameters('time')]"
    },
    "varTelemetryId": "[format('pid-2ce4228c-d72c-43fb-bb5b-cd8f3ba2138e-{0}', parameters('w365Location'))]",
    "verResourceGroups": [
      {
        "purpose": "Pool-Compute",
        "name": "[variables('varComputeObjectsRgName')]",
        "location": "[parameters('w365Location')]",
        "enableDefaultTelemetry": false,
        "tags": "[variables('varW365DefaultTags')]"
      },
      {
        "purpose": "Network-Objects",
        "name": "[variables('varNetworkObjectsRgName')]",
        "location": "[parameters('w365Location')]",
        "enableDefaultTelemetry": false,
        "tags": "[variables('varW365DefaultTags')]"
      },
      {
        "purpose": "Service-Objects",
        "name": "[variables('varServiceObjectsRgName')]",
        "location": "[parameters('w365Location')]",
        "enableDefaultTelemetry": false,
        "tags": "[variables('varW365DefaultTags')]"
      }
    ]
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[variables('varTelemetryId')]",
      "location": "[parameters('w365Location')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "baselineResourceGroups",
        "count": "[length(variables('verResourceGroups'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('verResourceGroups')[copyIndex()].purpose, parameters('time'))]",
      "subscriptionId": "[parameters('w365SubId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('verResourceGroups')[copyIndex()].name]"
          },
          "location": {
            "value": "[variables('verResourceGroups')[copyIndex()].location]"
          },
          "enableTelemetry": {
            "value": "[variables('verResourceGroups')[copyIndex()].enableDefaultTelemetry]"
          },
          "tags": {
            "value": "[variables('verResourceGroups')[copyIndex()].tags]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "8672838757620509839"
            },
            "name": "Resource Groups",
            "description": "This module deploys a Resource Group.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "resourceGroup": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the resource group."
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Networking-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deployAsg": {
            "value": true
          },
          "w365SubId": {
            "value": "[parameters('w365SubId')]"
          },
          "applicationSecurityGroupName": {
            "value": "[variables('varApplicationSecurityGroupName')]"
          },
          "computeObjectsRgName": {
            "value": "[variables('varComputeObjectsRgName')]"
          },
          "networkObjectsRgName": {
            "value": "[variables('varNetworkObjectsRgName')]"
          },
          "w365NetworksecurityGroupName": {
            "value": "[variables('varW365NetworksecurityGroupName')]"
          },
          "w365RouteTableName": {
            "value": "[variables('varW365RouteTableName')]"
          },
          "vnetAddressPrefixes": {
            "value": "[parameters('w365VnetworkAddressPrefixes')]"
          },
          "vnetName": {
            "value": "[variables('varVnetName')]"
          },
          "vnetPeeringName": {
            "value": "[variables('varVnetPeeringName')]"
          },
          "remoteVnetPeeringName": {
            "value": "[variables('varRemoteVnetPeeringName')]"
          },
          "vnetW365SubnetName": {
            "value": "[variables('varVnetW365SubnetName')]"
          },
          "createVnetPeering": {
            "value": "[variables('varCreateVnetPeering')]"
          },
          "deployDDoSNetworkProtection": {
            "value": "[parameters('deployDDoSNetworkProtection')]"
          },
          "ddosProtectionPlanName": {
            "value": "[variables('varDDosProtectionPlanName')]"
          },
          "vNetworkGatewayOnHub": {
            "value": "[parameters('vNetworkGatewayOnHub')]"
          },
          "existingHubVnetResourceId": {
            "value": "[parameters('existingHubVnetResourceId')]"
          },
          "location": {
            "value": "[parameters('w365Location')]"
          },
          "vnetW365SubnetAddressPrefix": {
            "value": "[parameters('w365vNetworkSubnetAddressPrefix')]"
          },
          "dnsServers": {
            "value": "[variables('varDnsServers')]"
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varCustomResourceTags'), variables('varW365DefaultTags'))), createObject('value', variables('varW365DefaultTags')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "17139902777281901109"
            },
            "name": "W365 Accelerator - Networking",
            "description": "W365 Accelerator - Network deployment",
            "owner": "Azure/w365lza"
          },
          "parameters": {
            "w365SubId": {
              "type": "string",
              "metadata": {
                "description": "w365 workload subscription ID, multiple subscriptions scenario"
              }
            },
            "deployAsg": {
              "type": "bool",
              "metadata": {
                "description": "Deploy application security group."
              }
            },
            "computeObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for the w365 session hosts"
              }
            },
            "networkObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "If new virtual network required for the w365 machines. Resource Group name for the virtual network."
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of the virtual network if required to be created."
              }
            },
            "w365NetworksecurityGroupName": {
              "type": "string",
              "metadata": {
                "description": "w365 Network Security Group Name"
              }
            },
            "applicationSecurityGroupName": {
              "type": "string",
              "metadata": {
                "description": "Created if a new VNet for w365 is created. Application Security Group (ASG) for the session hosts."
              }
            },
            "w365RouteTableName": {
              "type": "string",
              "metadata": {
                "description": "Created if the new VNet for w365 is created. Route Table name for w365."
              }
            },
            "vNetworkGatewayOnHub": {
              "type": "bool",
              "metadata": {
                "description": "Does the hub contain a virtual network gateway."
              }
            },
            "existingHubVnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Existing hub virtual network for peering."
              }
            },
            "vnetPeeringName": {
              "type": "string",
              "metadata": {
                "description": "VNet peering name for w365 VNet to vHub."
              }
            },
            "remoteVnetPeeringName": {
              "type": "string",
              "metadata": {
                "description": "Remote VNet peering name for w365 VNet to vHub."
              }
            },
            "createVnetPeering": {
              "type": "bool",
              "metadata": {
                "description": "Create virtual network peering to hub."
              }
            },
            "ddosProtectionPlanName": {
              "type": "string",
              "metadata": {
                "description": "DDoS Protection Plan name."
              }
            },
            "deployDDoSNetworkProtection": {
              "type": "bool",
              "metadata": {
                "description": "Deploy DDoS Network Protection for virtual network."
              }
            },
            "vnetAddressPrefixes": {
              "type": "string",
              "metadata": {
                "description": "w365 VNet address prefixes."
              }
            },
            "vnetW365SubnetName": {
              "type": "string",
              "metadata": {
                "description": "w365 subnet Name."
              }
            },
            "vnetW365SubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "w365 VNet subnet address prefix."
              }
            },
            "dnsServers": {
              "type": "array",
              "metadata": {
                "description": "custom DNS servers IPs"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Location where to deploy resources."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Tags to be applied to resources"
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment"
              }
            }
          },
          "variables": {
            "varAzureCloudName": "[environment().name]",
            "varCreateW365StaticRoute": true,
            "varWindowsActivationKMSPrefixesNsg": "[if(equals(variables('varAzureCloudName'), 'AzureCloud'), createArray('20.118.99.224', '40.83.235.53', '23.102.135.246'), if(equals(variables('varAzureCloudName'), 'AzureUSGovernment'), createArray('23.97.0.13', '52.126.105.2'), if(equals(variables('varAzureCloudName'), 'AzureChinaCloud'), createArray('159.27.28.100', '163.228.64.161', '42.159.7.249'), createArray())))]",
            "varStaticRoutes": "[if(equals(variables('varAzureCloudName'), 'AzureCloud'), createArray(createObject('name', 'W365ServiceTraffic', 'properties', createObject('addressPrefix', 'WindowsVirtualDesktop', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'W365StunInfraTurnRelayTraffic', 'properties', createObject('addressPrefix', '20.202.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'W365TurnRelayTraffic', 'properties', createObject('addressPrefix', '51.5.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS', 'properties', createObject('addressPrefix', '20.118.99.224/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS01', 'properties', createObject('addressPrefix', '40.83.235.53/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS02', 'properties', createObject('addressPrefix', '23.102.135.246/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet'))), if(equals(variables('varAzureCloudName'), 'AzureUSGovernment'), createArray(createObject('name', 'W365ServiceTraffic', 'properties', createObject('addressPrefix', 'WindowsVirtualDesktop', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'W365StunTurnTraffic', 'properties', createObject('addressPrefix', '20.202.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS', 'properties', createObject('addressPrefix', '23.97.0.13/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS01', 'properties', createObject('addressPrefix', '52.126.105.2/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet'))), if(equals(variables('varAzureCloudName'), 'AzureChinaCloud'), createArray(createObject('name', 'W365ServiceTraffic', 'properties', createObject('addressPrefix', 'WindowsVirtualDesktop', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'W365StunTurnTraffic', 'properties', createObject('addressPrefix', '20.202.0.0/16', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS', 'properties', createObject('addressPrefix', '159.27.28.100/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS01', 'properties', createObject('addressPrefix', '163.228.64.161/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet')), createObject('name', 'DirectRouteToKMS02', 'properties', createObject('addressPrefix', '42.159.7.249/32', 'hasBgpOverride', true(), 'nextHopType', 'Internet'))), createArray())))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('NSG-w365-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('w365SubId'))]",
              "resourceGroup": "[format('{0}', parameters('networkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('w365NetworksecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "securityRules": {
                    "value": [
                      {
                        "name": "W365ServiceTraffic",
                        "properties": {
                          "priority": 100,
                          "access": "Allow",
                          "description": "Session host traffic to W365 control plane",
                          "destinationAddressPrefix": "WindowsVirtualDesktop",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureCloud",
                        "properties": {
                          "priority": 110,
                          "access": "Allow",
                          "description": "Session host traffic to Azure cloud services",
                          "destinationAddressPrefix": "AzureCloud",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "8443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureMonitor",
                        "properties": {
                          "priority": 120,
                          "access": "Allow",
                          "description": "Session host traffic to Azure Monitor",
                          "destinationAddressPrefix": "AzureMonitor",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureMarketPlace",
                        "properties": {
                          "priority": 130,
                          "access": "Allow",
                          "description": "Session host traffic to Azure Monitor",
                          "destinationAddressPrefix": "AzureFrontDoor.Frontend",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "WindowsActivationKMS",
                        "properties": {
                          "priority": 140,
                          "access": "Allow",
                          "description": "Session host traffic to Windows license activation services",
                          "destinationAddressPrefixes": "[variables('varWindowsActivationKMSPrefixesNsg')]",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "1688",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureInstanceMetadata",
                        "properties": {
                          "priority": 150,
                          "access": "Allow",
                          "description": "Session host traffic to Azure instance metadata",
                          "destinationAddressPrefix": "169.254.169.254",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "80",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "RDPShortpath",
                        "properties": {
                          "priority": 150,
                          "access": "Allow",
                          "description": "Session host traffic to Azure instance metadata",
                          "destinationAddressPrefix": "VirtualNetwork",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "3390",
                          "protocol": "Udp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "RDPShortpathTurnStun",
                        "properties": {
                          "priority": 160,
                          "access": "Allow",
                          "description": "Session host traffic to RDP shortpath STUN/TURN",
                          "destinationAddressPrefix": "20.202.0.0/16",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "3478",
                          "protocol": "Udp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "RDPShortpathTurnRelay",
                        "properties": {
                          "priority": 170,
                          "access": "Allow",
                          "description": "Session host traffic to RDP shortpath STUN/TURN",
                          "destinationAddressPrefix": "51.5.0.0/16",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "3478",
                          "protocol": "Udp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "9920407814382381860"
                    },
                    "name": "Network Security Groups",
                    "description": "This module deploys a Network security Group (NSG).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "networkSecurityGroup": {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ],
                        "flushConnection": "[parameters('flushConnection')]"
                      }
                    },
                    "networkSecurityGroup_diagnosticSettings": {
                      "copy": {
                        "name": "networkSecurityGroup_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_securityRules": {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "16552673174935421633"
                            },
                            "name": "Network Security Group (NSG) Security Rules",
                            "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the security rule."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deployAsg')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ASG-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('w365SubId'))]",
              "resourceGroup": "[format('{0}', parameters('computeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('applicationSecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "10050047613520543656"
                    },
                    "name": "Application Security Groups (ASG)",
                    "description": "This module deploys an Application Security Group (ASG).",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-applicationsecuritygroup.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "applicationSecurityGroup": {
                      "type": "Microsoft.Network/applicationSecurityGroups",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the application security group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application security group."
                      },
                      "value": "[resourceId('Microsoft.Network/applicationSecurityGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application security group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('applicationSecurityGroup', '2023-04-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Route-Table-W365-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('w365SubId'))]",
              "resourceGroup": "[format('{0}', parameters('networkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('w365RouteTableName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "routes": "[if(variables('varCreateW365StaticRoute'), createObject('value', variables('varStaticRoutes')), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "1228848793868473285"
                    },
                    "name": "Route Tables",
                    "description": "This module deploys a User Defined Route Table (UDR).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "routeType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Name of the route."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "nextHopType": {
                                "type": "string",
                                "allowedValues": [
                                  "Internet",
                                  "None",
                                  "VirtualAppliance",
                                  "VirtualNetworkGateway",
                                  "VnetLocal"
                                ],
                                "metadata": {
                                  "description": "Required. The type of Azure hop the packet should be sent to."
                                }
                              },
                              "addressPrefix": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The destination CIDR to which the route applies."
                                }
                              },
                              "hasBgpOverride": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A value indicating whether this route overrides overlapping BGP routes regardless of LPM."
                                }
                              },
                              "nextHopIpAddress": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of the route."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "$ref": "#/definitions/routeType",
                      "metadata": {
                        "description": "Optional. An array of routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[take(format('46d3xbcp.res.network-routetable.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "routeTable": {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the route table was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the route table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the route table."
                      },
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('routeTable', '2023-04-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deployDDoSNetworkProtection')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('DDoS-Protection-Plan-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('w365SubId'))]",
              "resourceGroup": "[format('{0}', parameters('networkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('ddosProtectionPlanName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "510602938216253127"
                    },
                    "name": "DDoS Protection Plans",
                    "description": "This module deploys a DDoS Protection Plan.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the DDoS protection plan to assign the VNET to."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-ddosprotectionplan.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "ddosProtectionPlan": {
                      "type": "Microsoft.Network/ddosProtectionPlans",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the DDOS protection plan was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the DDOS protection plan."
                      },
                      "value": "[resourceId('Microsoft.Network/ddosProtectionPlans', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the DDOS protection plan."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('ddosProtectionPlan', '2023-11-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('vNet-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('w365SubId'))]",
              "resourceGroup": "[format('{0}', parameters('networkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('vnetName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "addressPrefixes": {
                    "value": "[array(parameters('vnetAddressPrefixes'))]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "peerings": "[if(parameters('createVnetPeering'), createObject('value', createArray(createObject('remoteVirtualNetworkId', parameters('existingHubVnetResourceId'), 'name', parameters('vnetPeeringName'), 'allowForwardedTraffic', true(), 'allowGatewayTransit', false(), 'allowVirtualNetworkAccess', true(), 'doNotVerifyRemoteGateways', true(), 'useRemoteGateways', if(parameters('vNetworkGatewayOnHub'), true(), false()), 'remotePeeringEnabled', true(), 'remotePeeringName', parameters('remoteVnetPeeringName'), 'remotePeeringAllowForwardedTraffic', true(), 'remotePeeringAllowGatewayTransit', if(parameters('vNetworkGatewayOnHub'), true(), false()), 'remotePeeringAllowVirtualNetworkAccess', true(), 'remotePeeringDoNotVerifyRemoteGateways', true(), 'remotePeeringUseRemoteGateways', false()))), createObject('value', createArray()))]",
                  "subnets": {
                    "value": [
                      {
                        "name": "[parameters('vnetW365SubnetName')]",
                        "addressPrefix": "[parameters('vnetW365SubnetAddressPrefix')]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled",
                        "networkSecurityGroupId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('w365SubId')), format('{0}', parameters('networkObjectsRgName'))), 'Microsoft.Resources/deployments', format('NSG-w365-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value]",
                        "routeTableId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('w365SubId')), format('{0}', parameters('networkObjectsRgName'))), 'Microsoft.Resources/deployments', format('Route-Table-W365-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value]"
                      }
                    ]
                  },
                  "ddosProtectionPlanResourceId": "[if(parameters('deployDDoSNetworkProtection'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('w365SubId')), format('{0}', parameters('networkObjectsRgName'))), 'Microsoft.Resources/deployments', format('DDoS-Protection-Plan-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value), createObject('value', ''))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "8852938365790433451"
                    },
                    "name": "Virtual Networks",
                    "description": "This module deploys a Virtual Network (vNet).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Virtual Network (vNet)."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "peerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Virtual Network Peerings configurations."
                      }
                    },
                    "vnetEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
                      }
                    },
                    "vnetEncryptionEnforcement": {
                      "type": "string",
                      "defaultValue": "AllowUnencrypted",
                      "allowedValues": [
                        "AllowUnencrypted",
                        "DropUnencrypted"
                      ],
                      "metadata": {
                        "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
                      }
                    },
                    "flowTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 0,
                      "maxValue": 30,
                      "metadata": {
                        "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                                "applicationGatewayIPConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIPConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIPConfigurations, createArray())]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                                "natGateway": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayResourceId'), not(empty(parameters('subnets')[copyIndex('subnets')].natGatewayResourceId))), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayResourceId), null())]",
                                "networkSecurityGroup": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupResourceId'), not(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupResourceId))), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupResourceId), null())]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                                "routeTable": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableResourceId'), not(empty(parameters('subnets')[copyIndex('subnets')].routeTableResourceId))), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableResourceId), null())]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                        "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                        "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]"
                      }
                    },
                    "virtualNetwork_diagnosticSettings": {
                      "copy": {
                        "name": "virtualNetwork_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_subnets": {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(parameters('subnets'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('subnets')[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[parameters('subnets')[copyIndex()].addressPrefix]"
                          },
                          "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex()], 'addressPrefixes'), createObject('value', parameters('subnets')[copyIndex()].addressPrefixes), createObject('value', createArray()))]",
                          "applicationGatewayIPConfigurations": "[if(contains(parameters('subnets')[copyIndex()], 'applicationGatewayIPConfigurations'), createObject('value', parameters('subnets')[copyIndex()].applicationGatewayIPConfigurations), createObject('value', createArray()))]",
                          "delegations": "[if(contains(parameters('subnets')[copyIndex()], 'delegations'), createObject('value', parameters('subnets')[copyIndex()].delegations), createObject('value', createArray()))]",
                          "ipAllocations": "[if(contains(parameters('subnets')[copyIndex()], 'ipAllocations'), createObject('value', parameters('subnets')[copyIndex()].ipAllocations), createObject('value', createArray()))]",
                          "natGatewayResourceId": "[if(contains(parameters('subnets')[copyIndex()], 'natGatewayResourceId'), createObject('value', parameters('subnets')[copyIndex()].natGatewayResourceId), createObject('value', ''))]",
                          "networkSecurityGroupResourceId": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('subnets')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                          "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateEndpointNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateEndpointNetworkPolicies), createObject('value', ''))]",
                          "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateLinkServiceNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateLinkServiceNetworkPolicies), createObject('value', ''))]",
                          "roleAssignments": "[if(contains(parameters('subnets')[copyIndex()], 'roleAssignments'), createObject('value', parameters('subnets')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "routeTableResourceId": "[if(contains(parameters('subnets')[copyIndex()], 'routeTableResourceId'), createObject('value', parameters('subnets')[copyIndex()].routeTableResourceId), createObject('value', ''))]",
                          "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpointPolicies'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpointPolicies), createObject('value', createArray()))]",
                          "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpoints'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpoints), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "17552535066446097605"
                            },
                            "name": "Virtual Network Subnets",
                            "description": "This module deploys a Virtual Network Subnet.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The address prefix for the subnet."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                              }
                            },
                            "routeTableResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet."
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The delegations to enable on the subnet."
                              }
                            },
                            "natGatewayResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of address prefixes for the subnet."
                              }
                            },
                            "applicationGatewayIPConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "ipAllocations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of IpAllocation which reference this subnet."
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "virtualNetwork": {
                              "existing": true,
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('virtualNetworkName')]"
                            },
                            "subnet": {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "delegations": "[parameters('delegations')]",
                                "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                                "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                "ipAllocations": "[parameters('ipAllocations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "subnet_roleAssignments": {
                              "copy": {
                                "name": "subnet_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "subnet"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "The address prefix for the subnet."
                              },
                              "value": "[reference('subnet').addressPrefix]"
                            },
                            "subnetAddressPrefixes": {
                              "type": "array",
                              "metadata": {
                                "description": "List of address prefixes for the subnet."
                              },
                              "value": "[if(not(empty(parameters('addressPrefixes'))), reference('subnet').addressPrefixes, createArray())]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_peering_local": {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(parameters('peerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[parameters('peerings')[copyIndex()].remoteVirtualNetworkId]"
                          },
                          "name": "[if(contains(parameters('peerings')[copyIndex()], 'name'), createObject('value', parameters('peerings')[copyIndex()].name), createObject('value', format('{0}-{1}', parameters('name'), last(split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('peerings')[copyIndex()], 'allowForwardedTraffic'), createObject('value', parameters('peerings')[copyIndex()].allowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('peerings')[copyIndex()], 'allowGatewayTransit'), createObject('value', parameters('peerings')[copyIndex()].allowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('peerings')[copyIndex()], 'allowVirtualNetworkAccess'), createObject('value', parameters('peerings')[copyIndex()].allowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'doNotVerifyRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].doNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'useRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].useRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "18422443457381833495"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_peering_remote": {
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(parameters('peerings'))]"
                      },
                      "condition": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringEnabled'), equals(parameters('peerings')[copyIndex()].remotePeeringEnabled, true()), false())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')[2]]",
                      "resourceGroup": "[split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/'))]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringName'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringName), createObject('value', format('{0}-{1}', last(split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')), parameters('name'))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringAllowForwardedTraffic'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringAllowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringAllowGatewayTransit'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringAllowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringAllowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringDoNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringUseRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringUseRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "18422443457381833495"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network."
                      },
                      "value": "[parameters('name')]"
                    },
                    "subnetNames": {
                      "type": "array",
                      "metadata": {
                        "description": "The names of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[parameters('subnets')[copyIndex()].name]"
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetwork', '2023-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('w365SubId')), format('{0}', parameters('networkObjectsRgName'))), 'Microsoft.Resources/deployments', format('DDoS-Protection-Plan-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('w365SubId')), format('{0}', parameters('networkObjectsRgName'))), 'Microsoft.Resources/deployments', format('NSG-w365-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('w365SubId')), format('{0}', parameters('networkObjectsRgName'))), 'Microsoft.Resources/deployments', format('Route-Table-W365-{0}', parameters('time')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "baselineResourceGroups"
      ]
    }
  ]
}