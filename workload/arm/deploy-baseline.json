{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "874166329703659252"
    }
  },
  "parameters": {
    "deploymentPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. The name of the resource group to deploy."
      },
      "maxLength": 4,
      "minLength": 2
    },
    "avdSessionHostLocation": {
      "type": "string",
      "defaultValue": "eastus2",
      "metadata": {
        "description": "Optional. Location where to deploy compute services. (Default: eastus2)"
      }
    },
    "avdManagementPlaneLocation": {
      "type": "string",
      "defaultValue": "eastus2",
      "metadata": {
        "description": "Optional. Location where to deploy AVD management plane. (Default: eastus2)"
      }
    },
    "avdWorkloadSubsId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. AVD workload subscription ID, multiple subscriptions scenario. (Default: )"
      }
    },
    "avdEnterpriseAppObjectId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. Azure Virtual Desktop Enterprise Application object ID. "
      }
    },
    "avdVmLocalUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. AVD session host local username."
      }
    },
    "avdVmLocalUserPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Required. AVD session host local password."
      }
    },
    "avdIdentityServiceProvider": {
      "type": "string",
      "defaultValue": "ADDS",
      "metadata": {
        "description": "Required, The service providing domain services for Azure Virtual Desktop. (Defualt: ADDS)"
      },
      "allowedValues": [
        "ADDS",
        "AADDS",
        "AAD"
      ]
    },
    "createIntuneEnrollment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Required, Eronll session hosts on Intune. (Defualt: false)"
      }
    },
    "avdApplicationGroupIdentitiesIds": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional, Identity ID to grant RBAC role to access AVD application group. (Defualt: \"\")"
      }
    },
    "avdApplicationGroupIdentityType": {
      "type": "string",
      "defaultValue": "Group",
      "metadata": {
        "description": "Optional, Identity type to grant RBAC role to access AVD application group. (Defualt: \"\")"
      },
      "allowedValues": [
        "Group",
        "ServicePrincipal",
        "User"
      ]
    },
    "avdIdentityDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. AD domain name."
      }
    },
    "avdDomainJoinUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. AVD session host domain join username."
      }
    },
    "avdDomainJoinUserPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Required. AVD session host domain join password."
      }
    },
    "avdOuPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. OU path to join AVd VMs. (Default: \"\")"
      }
    },
    "avdHostPoolType": {
      "type": "string",
      "defaultValue": "Pooled",
      "metadata": {
        "description": "Optional. AVD host pool type. (Default: Pooled)"
      },
      "allowedValues": [
        "Personal",
        "Pooled"
      ]
    },
    "avdPersonalAssignType": {
      "type": "string",
      "defaultValue": "Automatic",
      "metadata": {
        "description": "Optional. AVD host pool type. (Default: Automatic)"
      },
      "allowedValues": [
        "Automatic",
        "Direct"
      ]
    },
    "avdHostPoolLoadBalancerType": {
      "type": "string",
      "defaultValue": "BreadthFirst",
      "metadata": {
        "description": "Optional. AVD host pool load balacing type. (Default: BreadthFirst)"
      },
      "allowedValues": [
        "BreadthFirst",
        "DepthFirst"
      ]
    },
    "avhHostPoolMaxSessions": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. AVD host pool maximum number of user sessions per session host. (Default: 5)"
      }
    },
    "avdStartVmOnConnect": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. AVD host pool start VM on Connect. (Default: true)"
      }
    },
    "avdDeployRappGroup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. AVD deploy remote app application group. (Default: false)"
      }
    },
    "avdHostPoolRdpProperties": {
      "type": "string",
      "defaultValue": "audiocapturemode:i:1;audiomode:i:0;drivestoredirect:s:;redirectclipboard:i:1;redirectcomports:i:1;redirectprinters:i:1;redirectsmartcards:i:1;screen mode id:i:2",
      "metadata": {
        "description": "Optional. AVD host pool Custom RDP properties. (Default: audiocapturemode:i:1;audiomode:i:0;drivestoredirect:s:;redirectclipboard:i:1;redirectcomports:i:1;redirectprinters:i:1;redirectsmartcards:i:1;screen mode id:i:2)"
      }
    },
    "avdDeployScalingPlan": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. AVD deploy scaling plan. (Default: true)"
      }
    },
    "createAvdVnet": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Create new virtual network. (Default: true)"
      }
    },
    "existingVnetSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Existing virtual network subnet. (Default: \"\")"
      }
    },
    "existingHubVnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required. Existing hub virtual network for perring."
      }
    },
    "avdVnetworkAddressPrefixes": {
      "type": "string",
      "defaultValue": "10.10.0.0/23",
      "metadata": {
        "description": "Optional. AVD virtual network address prefixes. (Default: 10.10.0.0/23)"
      }
    },
    "avdVnetworkSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.10.0.0/24",
      "metadata": {
        "description": "Optional. AVD virtual network subnet address prefix. (Default: 10.10.0.0/23)"
      }
    },
    "customDnsIps": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. custom DNS servers IPs."
      }
    },
    "avdVnetPrivateDnsZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Use Azure private DNS zones for private endpoints. (Default: false)"
      }
    },
    "avdVnetPrivateDnsZoneFilesId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Use Azure private DNS zones for private endpoints. (Default: false)"
      }
    },
    "avdVnetPrivateDnsZoneKeyvaultId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Use Azure private DNS zones for private endpoints. (Default: false)"
      }
    },
    "vNetworkGatewayOnHub": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Does the hub contains a virtual network gateway. (Default: false)"
      }
    },
    "createAvdFslogixDeployment": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Deploy Fslogix setup. (Default: true)"
      }
    },
    "createMsixDeployment": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Deploy MSIX App Attach setup. (Default: false)"
      }
    },
    "fslogixFileShareQuotaSize": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Optional. Fslogix file share size. (Default: ~1TB)"
      }
    },
    "msixFileShareQuotaSize": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Optional. MSIX file share size. (Default: ~1TB)"
      }
    },
    "avdDeploySessionHosts": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Deploy new session hosts. (Default: true)"
      }
    },
    "avdDeployMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Deploy AVD monitoring resources and setings. (Default: false)"
      }
    },
    "deployAlaWorkspace": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Deploy AVD Azure log analytics workspace. (Default: true)"
      }
    },
    "deployCustomPolicyMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Required. Create and assign custom Azure Policy for diagnostic settings for the AVD Log Analytics workspace."
      }
    },
    "avdAlaWorkspaceDataRetention": {
      "type": "int",
      "defaultValue": 90,
      "metadata": {
        "description": "Optional. AVD Azure log analytics workspace data retention. (Default: 90)"
      }
    },
    "alaExistingWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Existing Azure log analytics workspace resource ID to connect to. (Default: )"
      }
    },
    "deployCustomPolicyNetworking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Required. Create and assign custom Azure Policy for NSG flow logs and network security"
      }
    },
    "deployStgAccountForFlowLogs": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Deploy Azure storage account for flow logs. (Default: false)"
      }
    },
    "stgAccountForFlowLogsId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Existing Azure Storage account Resourece ID for NSG flow logs. (Default: )"
      }
    },
    "avdDeploySessionHostsCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Optional. Quantity of session hosts to deploy. (Default: 1)"
      },
      "maxValue": 999,
      "minValue": 1
    },
    "avdSessionHostCountIndex": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. The session host number to begin with for the deployment. This is important when adding virtual machines to ensure the names do not conflict. (Default: 0)"
      }
    },
    "avdUseAvailabilityZones": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set. (Defualt: true)"
      }
    },
    "avdAsFaultDomainCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Optional. Sets the number of fault domains for the availability set. (Defualt: 3)"
      }
    },
    "avdAsUpdateDomainCount": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. Sets the number of update domains for the availability set. (Defualt: 5)"
      }
    },
    "fslogixStoragePerformance": {
      "type": "string",
      "defaultValue": "Premium",
      "metadata": {
        "description": "Optional. Storage account SKU for FSLogix storage. Recommended tier is Premium (Defualt: Premium)"
      },
      "allowedValues": [
        "Standard",
        "Premium"
      ]
    },
    "msixStoragePerformance": {
      "type": "string",
      "defaultValue": "Premium",
      "metadata": {
        "description": "Optional. Storage account SKU for MSIX storage. Recommended tier is Premium. (Defualt: Premium)"
      },
      "allowedValues": [
        "Standard",
        "Premium"
      ]
    },
    "encryptionAtHost": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
      }
    },
    "avdSessionHostsSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Optional. Session host VM size. (Defualt: Standard_D2s_v3)"
      }
    },
    "avdSessionHostDiskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Optional. OS disk type for session host. (Defualt: Standard_LRS)"
      }
    },
    "enableAcceleratedNetworking": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables accelerated Networking on the session hosts.\nIf using a Azure Compute Gallery Image, the Image Definition must have been configured with\nthe \\'isAcceleratedNetworkSupported\\' property set to \\'true\\'.\n"
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "Optional. Specifies the securityType of the virtual machine. \"ConfidentialVM\" and \"TrustedLaunch\" require a Gen2 Image. (Default: Standard)"
      },
      "allowedValues": [
        "Standard",
        "TrustedLaunch",
        "ConfidentialVM"
      ]
    },
    "secureBootEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. securityType should be set to TrustedLaunch or ConfidentialVM to enable UefiSettings. (Default: false)"
      }
    },
    "vTpmEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings. securityType should be set to TrustedLaunch or ConfidentialVM to enable UefiSettings. (Default: false)"
      }
    },
    "avdOsImage": {
      "type": "string",
      "defaultValue": "win11_22h2",
      "metadata": {
        "description": "Optional. AVD OS image source. (Default: win11-21h2)"
      },
      "allowedValues": [
        "win10_21h2",
        "win10_21h2_office",
        "win10_22h2_g2",
        "win10_22h2_office_g2",
        "win11_21h2",
        "win11_21h2_office",
        "win11_22h2",
        "win11_22h2_office"
      ]
    },
    "useSharedImage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Set to deploy image from Azure Compute Gallery. (Default: false)"
      }
    },
    "avdImageTemplateDefinitionId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Source custom image ID. (Default: \"\")"
      }
    },
    "storageOuPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. OU name for Azure Storage Account. It is recommended to create a new AD Organizational Unit (OU) in AD and disable password expiration policy on computer accounts or service logon accounts accordingly.  (Default: \"\")"
      }
    },
    "createOuForStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If OU for Azure Storage needs to be created - set to true and ensure the domain join credentials have priviledge to create OU and create computer objects or join to domain. (Default: \"\")"
      }
    },
    "avdUseCustomNaming": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Required. AVD resources custom naming. (Default: false)"
      }
    },
    "avdServiceObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-avd-use2-app1-service-objects",
      "metadata": {
        "description": "Optional. AVD service resources resource group custom name. (Default: rg-avd-use2-app1-service-objects)"
      },
      "maxLength": 90
    },
    "avdNetworkObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-avd-use2-app1-network",
      "metadata": {
        "description": "Optional. AVD network resources resource group custom name. (Default: rg-avd-use2-app1-network)"
      },
      "maxLength": 90
    },
    "avdComputeObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-avd-use2-app1-pool-compute",
      "metadata": {
        "description": "Optional. AVD network resources resource group custom name. (Default: rg-avd-use2-app1-pool-compute)"
      },
      "maxLength": 90
    },
    "avdStorageObjectsRgCustomName": {
      "type": "string",
      "defaultValue": "rg-avd-use2-app1-storage",
      "metadata": {
        "description": "Optional. AVD network resources resource group custom name. (Default: rg-avd-use2-app1-storage)"
      },
      "maxLength": 90
    },
    "avdMonitoringRgCustomName": {
      "type": "string",
      "defaultValue": "rg-avd-use2-app1-monitoring",
      "metadata": {
        "description": "Optional. AVD monitoring resource group custom name. (Default: rg-avd-use2-app1-monitoring)"
      },
      "maxLength": 90
    },
    "avdVnetworkCustomName": {
      "type": "string",
      "defaultValue": "vnet-avd-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD virtual network custom name. (Default: vnet-avd-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdAlaWorkspaceCustomName": {
      "type": "string",
      "defaultValue": "log-avd-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD Azure log analytics workspace custom name. (Default: log-avd-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdVnetworkSubnetCustomName": {
      "type": "string",
      "defaultValue": "snet-avd-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD virtual network subnet custom name. (Default: snet-avd-use2-app1-001)"
      },
      "maxLength": 80
    },
    "avdNetworksecurityGroupCustomName": {
      "type": "string",
      "defaultValue": "nsg-avd-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD network security group custom name. (Default: nsg-avd-use2-app1-001)"
      },
      "maxLength": 80
    },
    "avdRouteTableCustomName": {
      "type": "string",
      "defaultValue": "route-avd-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD route table custom name. (Default: route-avd-use2-app1-001)"
      },
      "maxLength": 80
    },
    "avdApplicationSecurityGroupCustomName": {
      "type": "string",
      "defaultValue": "asg-avd-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD application security custom name. (Default: asg-avd-use2-app1-001)"
      },
      "maxLength": 80
    },
    "avdWorkSpaceCustomName": {
      "type": "string",
      "defaultValue": "vdws-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD workspace custom name. (Default: vdws-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdWorkSpaceCustomFriendlyName": {
      "type": "string",
      "defaultValue": "East US - 001",
      "metadata": {
        "description": "Optional. AVD workspace custom friendly (Display) name. (Default: App1 - East US - 001)"
      },
      "maxLength": 64
    },
    "avdHostPoolCustomName": {
      "type": "string",
      "defaultValue": "vdpool-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD host pool custom name. (Default: vdpool-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdHostPoolCustomFriendlyName": {
      "type": "string",
      "defaultValue": "App1 - East US - 001",
      "metadata": {
        "description": "Optional. AVD host pool custom friendly (Display) name. (Default: App1 - East US - 001)"
      },
      "maxLength": 64
    },
    "avdScalingPlanCustomName": {
      "type": "string",
      "defaultValue": "vdscaling-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD scaling plan custom name. (Default: vdscaling-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdApplicationGroupCustomNameDesktop": {
      "type": "string",
      "defaultValue": "vdag-desktop-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD desktop application group custom name. (Default: vdag-desktop-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdApplicationGroupCustomFriendlyName": {
      "type": "string",
      "defaultValue": "Desktops - App1 - East US - 001",
      "metadata": {
        "description": "Optional. AVD desktop application group custom friendly (Display) name. (Default: Desktops - App1 - East US - 001)"
      },
      "maxLength": 64
    },
    "avdApplicationGroupCustomNameRapp": {
      "type": "string",
      "defaultValue": "vdag-rapp-use2-app1-001",
      "metadata": {
        "description": "Optional. AVD remote application group custom name. (Default: vdag-rapp-use2-app1-001)"
      },
      "maxLength": 64
    },
    "avdApplicationGroupCustomFriendlyNameRapp": {
      "type": "string",
      "defaultValue": "Remote apps - App1 - East US - 001",
      "metadata": {
        "description": "Optional. AVD remote application group custom name. (Default: Remote apps - App1 - East US - 001)"
      },
      "maxLength": 64
    },
    "avdSessionHostCustomNamePrefix": {
      "type": "string",
      "defaultValue": "vm-avd-app1",
      "metadata": {
        "description": "Optional. AVD session host prefix custom name. (Default: vm-avd-app1)"
      },
      "maxLength": 11
    },
    "avdAvailabilitySetCustomNamePrefix": {
      "type": "string",
      "defaultValue": "avail-avd",
      "metadata": {
        "description": "Optional. AVD availability set custom name. (Default: avail-avd)"
      },
      "maxLength": 9
    },
    "storageAccountPrefixCustomName": {
      "type": "string",
      "defaultValue": "stavd",
      "metadata": {
        "description": "Optional. AVD FSLogix and MSIX app attach storage account prefix custom name. (Default: stavd)"
      },
      "maxLength": 5
    },
    "fslogixFileShareCustomName": {
      "type": "string",
      "defaultValue": "fslogix-pc-app1-001",
      "metadata": {
        "description": "Optional. FSLogix file share name. (Default: fslogix-pc-app1-001)"
      }
    },
    "msixFileShareCustomName": {
      "type": "string",
      "defaultValue": "msix-pc-app1-001",
      "metadata": {
        "description": "Optional. MSIX file share name. (Default: fslogix-pc-app1-001)"
      }
    },
    "avdWrklKvPrefixCustomName": {
      "type": "string",
      "defaultValue": "kv-avd",
      "metadata": {
        "description": "Optional. AVD keyvault prefix custom name. (Default: kv-avd)"
      },
      "maxLength": 6
    },
    "createResourceTags": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Apply tags on resources and resource groups. (Default: false)"
      }
    },
    "workloadNameTag": {
      "type": "string",
      "defaultValue": "Contoso-Workload",
      "metadata": {
        "description": "Optional. The name of workload for tagging purposes. (Default: Contoso-Workload)"
      }
    },
    "workloadTypeTag": {
      "type": "string",
      "defaultValue": "Light",
      "metadata": {
        "description": "Optional. Reference to the size of the VM for your workloads (Default: Light)"
      },
      "allowedValues": [
        "Light",
        "Medium",
        "High",
        "Power"
      ]
    },
    "dataClassificationTag": {
      "type": "string",
      "defaultValue": "Non-business",
      "metadata": {
        "description": "Optional. Sensitivity of data hosted (Default: Non-business)"
      },
      "allowedValues": [
        "Non-business",
        "Public",
        "General",
        "Confidential",
        "Highly-confidential"
      ]
    },
    "departmentTag": {
      "type": "string",
      "defaultValue": "Contoso-AVD",
      "metadata": {
        "description": "Optional. Department that owns the deployment, (Dafult: Contoso-AVD)"
      }
    },
    "workloadCriticalityTag": {
      "type": "string",
      "defaultValue": "Low",
      "metadata": {
        "description": "Optional. Criticality of the workload. (Default: Low)"
      },
      "allowedValues": [
        "Low",
        "Medium",
        "High",
        "Mission-critical",
        "Custom"
      ]
    },
    "workloadCriticalityCustomValueTag": {
      "type": "string",
      "defaultValue": "Contoso-Critical",
      "metadata": {
        "description": "Optional. Tag value for custom criticality value. (Default: Contoso-Critical)"
      }
    },
    "applicationNameTag": {
      "type": "string",
      "defaultValue": "Contoso-App",
      "metadata": {
        "description": "Optional. Details about the application."
      }
    },
    "workloadSlaTag": {
      "type": "string",
      "defaultValue": "Contoso-SLA",
      "metadata": {
        "description": "Required. Service level agreement level of the worload. (Contoso-SLA)"
      }
    },
    "opsTeamTag": {
      "type": "string",
      "defaultValue": "workload-admins@Contoso.com",
      "metadata": {
        "description": "Optional. Team accountable for day-to-day operations. (workload-admins@Contoso.com)"
      }
    },
    "ownerTag": {
      "type": "string",
      "defaultValue": "workload-owner@Contoso.com",
      "metadata": {
        "description": "Optional. Organizational owner of the AVD deployment. (Default: workload-owner@Contoso.com)"
      }
    },
    "costCenterTag": {
      "type": "string",
      "defaultValue": "Contoso-CC",
      "metadata": {
        "description": "Optional. Cost center of owner team. (Defualt: Contoso-CC)"
      }
    },
    "environmentTypeTag": {
      "type": "string",
      "defaultValue": "Dev",
      "metadata": {
        "description": "Optional. Deployment environment of the application, workload. (Default: Dev)"
      },
      "allowedValues": [
        "Prod",
        "Dev",
        "Staging "
      ]
    },
    "time": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Do not modify, used to set unique value for resource deployment."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable usage and telemetry feedback to Microsoft."
      }
    }
  },
  "variables": {
    "varAzureCloudName": "[environment().name]",
    "varDeploymentPrefixLowercase": "[toLower(parameters('deploymentPrefix'))]",
    "varAvdSessionHostLocationLowercase": "[toLower(parameters('avdSessionHostLocation'))]",
    "varAvdManagementPlaneLocationLowercase": "[toLower(parameters('avdManagementPlaneLocation'))]",
    "varAvdSessionHostLocationAcronym": "[variables('varLocationAcronyms')[variables('varAvdSessionHostLocationLowercase')]]",
    "varAvdManagementPlaneLocationAcronym": "[variables('varLocationAcronyms')[variables('varAvdManagementPlaneLocationLowercase')]]",
    "varLocationAcronyms": {
      "eastasia": "eas",
      "southeastasia": "seas",
      "centralus": "cus",
      "eastus": "eus",
      "eastus2": "eus2",
      "westus": "wus",
      "northcentralus": "ncus",
      "southcentralus": "scus",
      "northeurope": "neu",
      "westeurope": "weu",
      "japanwest": "jpw",
      "japaneast": "jpe",
      "brazilsouth": "brs",
      "australiaeast": "aue",
      "australiasoutheast": "ause",
      "southindia": "sin",
      "centralindia": "cin",
      "westindia": "win",
      "canadacentral": "cac",
      "canadaeast": "cae",
      "uksouth": "uks",
      "ukwest": "ukw",
      "usgovarizona": "az",
      "usgoviowa": "ia",
      "usgovtexas": "tx",
      "usgovvirginia": "va",
      "westcentralus": "wcus",
      "westus2": "wus2",
      "koreacentral": "krc",
      "koreasouth": "krs",
      "francecentral": "frc",
      "francesouth": "frs",
      "australiacentral": "auc",
      "australiacentral2": "auc2",
      "uaecentral": "aec",
      "uaenorth": "aen",
      "southafricanorth": "zan",
      "southafricawest": "zaw",
      "switzerlandnorth": "chn",
      "switzerlandwest": "chw",
      "germanynorth": "den",
      "germanywestcentral": "dewc",
      "norwaywest": "now",
      "norwayeast": "noe",
      "brazilsoutheast": "brse",
      "westus3": "wus3",
      "swedencentral": "sec"
    },
    "varTimeZones": {
      "australiacentral": "AUS Eastern Standard Time",
      "australiacentral2": "AUS Eastern Standard Time",
      "australiaeast": "AUS Eastern Standard Time",
      "australiasoutheast": "AUS Eastern Standard Time",
      "brazilsouth": "E. South America Standard Time",
      "brazilsoutheast": "E. South America Standard Time",
      "canadacentral": "Eastern Standard Time",
      "canadaeast": "Eastern Standard Time",
      "centralindia": "India Standard Time",
      "centralus": "Central Standard Time",
      "chinaeast": "China Standard Time",
      "chinaeast2": "China Standard Time",
      "chinanorth": "China Standard Time",
      "chinanorth2": "China Standard Time",
      "eastasia": "China Standard Time",
      "eastus": "Eastern Standard Time",
      "eastus2": "Eastern Standard Time",
      "francecentral": "Central Europe Standard Time",
      "francesouth": "Central Europe Standard Time",
      "germanynorth": "Central Europe Standard Time",
      "germanywestcentral": "Central Europe Standard Time",
      "japaneast": "Tokyo Standard Time",
      "japanwest": "Tokyo Standard Time",
      "jioindiacentral": "India Standard Time",
      "jioindiawest": "India Standard Time",
      "koreacentral": "Korea Standard Time",
      "koreasouth": "Korea Standard Time",
      "northcentralus": "Central Standard Time",
      "northeurope": "GMT Standard Time",
      "norwayeast": "Central Europe Standard Time",
      "norwaywest": "Central Europe Standard Time",
      "southafricanorth": "South Africa Standard Time",
      "southafricawest": "South Africa Standard Time",
      "southcentralus": "Central Standard Time",
      "southindia": "India Standard Time",
      "southeastasia": "Singapore Standard Time",
      "swedencentral": "Central Europe Standard Time",
      "switzerlandnorth": "Central Europe Standard Time",
      "switzerlandwest": "Central Europe Standard Time",
      "uaecentral": "Arabian Standard Time",
      "uaenorth": "Arabian Standard Time",
      "uksouth": "GMT Standard Time",
      "ukwest": "GMT Standard Time",
      "usdodcentral": "Central Standard Time",
      "usdodeast": "Eastern Standard Time",
      "usgovarizona": "Mountain Standard Time",
      "usgoviowa": "Central Standard Time",
      "usgovtexas": "Central Standard Time",
      "usgovvirginia": "Eastern Standard Time",
      "westcentralus": "Mountain Standard Time",
      "westeurope": "Central Europe Standard Time",
      "westindia": "India Standard Time",
      "westus": "Pacific Standard Time",
      "westus2": "Pacific Standard Time",
      "westus3": "Mountain Standard Time"
    },
    "varAvdNamingUniqueStringSixChar": "[take(format('{0}', uniqueString(parameters('avdWorkloadSubsId'), variables('varDeploymentPrefixLowercase'), parameters('time'))), 6)]",
    "varAvdManagementPlaneNamingStandard": "[format('{0}-{1}', variables('varAvdManagementPlaneLocationAcronym'), variables('varDeploymentPrefixLowercase'))]",
    "varAvdComputeStorageResourcesNamingStandard": "[format('{0}-{1}', variables('varAvdSessionHostLocationAcronym'), variables('varDeploymentPrefixLowercase'))]",
    "varAvdServiceObjectsRgName": "[if(parameters('avdUseCustomNaming'), parameters('avdServiceObjectsRgCustomName'), format('rg-avd-{0}-service-objects', variables('varAvdManagementPlaneNamingStandard')))]",
    "varAvdNetworkObjectsRgName": "[if(parameters('avdUseCustomNaming'), parameters('avdNetworkObjectsRgCustomName'), format('rg-avd-{0}-network', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdComputeObjectsRgName": "[if(parameters('avdUseCustomNaming'), parameters('avdComputeObjectsRgCustomName'), format('rg-avd-{0}-pool-compute', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdStorageObjectsRgName": "[if(parameters('avdUseCustomNaming'), parameters('avdStorageObjectsRgCustomName'), format('rg-avd-{0}-storage', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdMonitoringRgName": "[if(parameters('avdUseCustomNaming'), parameters('avdMonitoringRgCustomName'), format('rg-avd-{0}-monitoring', variables('varAvdManagementPlaneLocationAcronym')))]",
    "varAvdVnetworkName": "[if(parameters('avdUseCustomNaming'), parameters('avdVnetworkCustomName'), format('vnet-avd-{0}-001', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdVnetworkSubnetName": "[if(parameters('avdUseCustomNaming'), parameters('avdVnetworkSubnetCustomName'), format('snet-avd-{0}-001', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdNetworksecurityGroupName": "[if(parameters('avdUseCustomNaming'), parameters('avdNetworksecurityGroupCustomName'), format('nsg-avd-{0}-001', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdRouteTableName": "[if(parameters('avdUseCustomNaming'), parameters('avdRouteTableCustomName'), format('route-avd-{0}-001', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdApplicationSecurityGroupName": "[if(parameters('avdUseCustomNaming'), parameters('avdApplicationSecurityGroupCustomName'), format('asg-avd-{0}-001', variables('varAvdComputeStorageResourcesNamingStandard')))]",
    "varAvdVnetworkPeeringName": "[format('peer-avd-{0}-{1}', variables('varAvdComputeStorageResourcesNamingStandard'), variables('varAvdNamingUniqueStringSixChar'))]",
    "varAvdWorkSpaceName": "[if(parameters('avdUseCustomNaming'), parameters('avdWorkSpaceCustomName'), format('vdws-{0}-001', variables('varAvdManagementPlaneNamingStandard')))]",
    "varAvdWorkSpaceFriendlyName": "[if(parameters('avdUseCustomNaming'), parameters('avdWorkSpaceCustomFriendlyName'), format('{0}-{1}-001', parameters('deploymentPrefix'), parameters('avdManagementPlaneLocation')))]",
    "varAvdHostPoolName": "[if(parameters('avdUseCustomNaming'), parameters('avdHostPoolCustomName'), format('vdpool-{0}-001', variables('varAvdManagementPlaneNamingStandard')))]",
    "varAvdHostFriendlyName": "[if(parameters('avdUseCustomNaming'), parameters('avdHostPoolCustomFriendlyName'), format('{0}-{1}-001', parameters('deploymentPrefix'), parameters('avdManagementPlaneLocation')))]",
    "varAvdApplicationGroupNameDesktop": "[if(parameters('avdUseCustomNaming'), parameters('avdApplicationGroupCustomNameDesktop'), format('vdag-desktop-{0}-001', variables('varAvdManagementPlaneNamingStandard')))]",
    "varAvdApplicationGroupFriendlyName": "[if(parameters('avdUseCustomNaming'), parameters('avdApplicationGroupCustomFriendlyName'), format('Desktops-{0}-{1}-001', parameters('deploymentPrefix'), parameters('avdManagementPlaneLocation')))]",
    "varAvdApplicationGroupAppFriendlyName": "[format('Desktops-{0}', parameters('deploymentPrefix'))]",
    "varAvdApplicationGroupNameRapp": "[if(parameters('avdUseCustomNaming'), parameters('avdApplicationGroupCustomNameRapp'), format('vdag-rapp-{0}-001', variables('varAvdManagementPlaneNamingStandard')))]",
    "varAvdApplicationGroupFriendlyNameRapp": "[if(parameters('avdUseCustomNaming'), parameters('avdApplicationGroupCustomFriendlyNameRapp'), format('Apps-{0}-{1}-001', parameters('deploymentPrefix'), parameters('avdManagementPlaneLocation')))]",
    "varAvdScalingPlanName": "[if(parameters('avdUseCustomNaming'), parameters('avdScalingPlanCustomName'), format('vdscaling-{0}-001', variables('varAvdManagementPlaneNamingStandard')))]",
    "varAvdScalingPlanExclusionTag": "[format('Exclude-{0}', variables('varAvdScalingPlanName'))]",
    "varAvdScalingPlanWeekdaysScheduleName": "[format('weekdays-{0}', variables('varAvdManagementPlaneNamingStandard'))]",
    "varAvdScalingPlanWeekendScheduleName": "[format('weekend-{0}', variables('varAvdManagementPlaneNamingStandard'))]",
    "varAvdWrklKvName": "[if(parameters('avdUseCustomNaming'), format('{0}-{1}-{2}', parameters('avdWrklKvPrefixCustomName'), variables('varAvdComputeStorageResourcesNamingStandard'), variables('varAvdNamingUniqueStringSixChar')), format('kv-avd-{0}-{1}', variables('varAvdComputeStorageResourcesNamingStandard'), variables('varAvdNamingUniqueStringSixChar')))]",
    "varAvdWrklKvPrivateEndpointName": "[format('pe-kv-avd-{0}-{1}-vault', variables('varDeploymentPrefixLowercase'), variables('varAvdNamingUniqueStringSixChar'))]",
    "varAvdSessionHostNamePrefix": "[if(parameters('avdUseCustomNaming'), parameters('avdSessionHostCustomNamePrefix'), format('vm-avd-{0}', variables('varDeploymentPrefixLowercase')))]",
    "varAvdAvailabilitySetNamePrefix": "[if(parameters('avdUseCustomNaming'), format('{0}-{1}-{2}', parameters('avdAvailabilitySetCustomNamePrefix'), variables('varAvdSessionHostLocationAcronym'), variables('varDeploymentPrefixLowercase')), format('avail-avd-{0}-{1}', variables('varAvdSessionHostLocationAcronym'), variables('varDeploymentPrefixLowercase')))]",
    "varStorageManagedIdentityName": "[format('id-avd-storage-{0}-{1}', variables('varAvdSessionHostLocationAcronym'), variables('varDeploymentPrefixLowercase'))]",
    "varFslogixStorageSku": "[if(parameters('avdUseAvailabilityZones'), format('{0}_ZRS', parameters('fslogixStoragePerformance')), format('{0}_LRS', parameters('fslogixStoragePerformance')))]",
    "varMsixStorageSku": "[if(parameters('avdUseAvailabilityZones'), format('{0}_ZRS', parameters('msixStoragePerformance')), format('{0}_LRS', parameters('msixStoragePerformance')))]",
    "varManagementVmName": "[format('vm-mgmt-{0}', variables('varDeploymentPrefixLowercase'))]",
    "varAvdAlaWorkspaceName": "[if(parameters('avdUseCustomNaming'), parameters('avdAlaWorkspaceCustomName'), format('log-avd-{0}', variables('varAvdManagementPlaneLocationAcronym')))]",
    "varStgAccountForFlowLogsName": "[if(parameters('avdUseCustomNaming'), format('{0}{1}flowlogs{2}', parameters('storageAccountPrefixCustomName'), variables('varDeploymentPrefixLowercase'), variables('varAvdNamingUniqueStringSixChar')), format('stavd{0}flowlogs{1}', variables('varDeploymentPrefixLowercase'), variables('varAvdNamingUniqueStringSixChar')))]",
    "varAvdScalingPlanSchedules": [
      {
        "daysOfWeek": [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday"
        ],
        "name": "[variables('varAvdScalingPlanWeekdaysScheduleName')]",
        "offPeakLoadBalancingAlgorithm": "DepthFirst",
        "offPeakStartTime": {
          "hour": 20,
          "minute": 0
        },
        "peakLoadBalancingAlgorithm": "DepthFirst",
        "peakStartTime": {
          "hour": 9,
          "minute": 0
        },
        "rampDownCapacityThresholdPct": 90,
        "rampDownForceLogoffUsers": true,
        "rampDownLoadBalancingAlgorithm": "DepthFirst",
        "rampDownMinimumHostsPct": 0,
        "rampDownNotificationMessage": "You will be logged off in 30 min. Make sure to save your work.",
        "rampDownStartTime": {
          "hour": 18,
          "minute": 0
        },
        "rampDownStopHostsWhen": "ZeroActiveSessions",
        "rampDownWaitTimeMinutes": 30,
        "rampUpCapacityThresholdPct": 80,
        "rampUpLoadBalancingAlgorithm": "BreadthFirst",
        "rampUpMinimumHostsPct": 20,
        "rampUpStartTime": {
          "hour": 7,
          "minute": 0
        }
      },
      {
        "daysOfWeek": [
          "Saturday",
          "Sunday"
        ],
        "name": "[variables('varAvdScalingPlanWeekendScheduleName')]",
        "offPeakLoadBalancingAlgorithm": "DepthFirst",
        "offPeakStartTime": {
          "hour": 18,
          "minute": 0
        },
        "peakLoadBalancingAlgorithm": "DepthFirst",
        "peakStartTime": {
          "hour": 10,
          "minute": 0
        },
        "rampDownCapacityThresholdPct": 90,
        "rampDownForceLogoffUsers": true,
        "rampDownLoadBalancingAlgorithm": "DepthFirst",
        "rampDownMinimumHostsPct": 0,
        "rampDownNotificationMessage": "You will be logged off in 30 min. Make sure to save your work.",
        "rampDownStartTime": {
          "hour": 16,
          "minute": 0
        },
        "rampDownStopHostsWhen": "ZeroActiveSessions",
        "rampDownWaitTimeMinutes": 30,
        "rampUpCapacityThresholdPct": 90,
        "rampUpLoadBalancingAlgorithm": "DepthFirst",
        "rampUpMinimumHostsPct": 0,
        "rampUpStartTime": {
          "hour": 9,
          "minute": 0
        }
      }
    ],
    "varMarketPlaceGalleryWindows": {
      "win10_21h2": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "windows-10",
        "sku": "win10-21h2-avd",
        "version": "latest"
      },
      "win10_21h2_office": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "office-365",
        "sku": "win10-21h2-avd-m365",
        "version": "latest"
      },
      "win10_22h2_g2": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "windows-10",
        "sku": "win10-22h2-avd-g2",
        "version": "latest"
      },
      "win10_22h2_office_g2": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "office-365",
        "sku": "win10-21h2-avd-m365-g2",
        "version": "latest"
      },
      "win11_21h2": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "Windows-11",
        "sku": "win11-21h2-avd",
        "version": "latest"
      },
      "win11_21h2_office": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "office-365",
        "sku": "win11-21h2-avd-m365",
        "version": "latest"
      },
      "win11_22h2": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "Windows-11",
        "sku": "win11-22h2-avd",
        "version": "latest"
      },
      "win11_22h2_office": {
        "publisher": "MicrosoftWindowsDesktop",
        "offer": "office-365",
        "sku": "win11-22h2-avd-m365",
        "version": "latest"
      },
      "winServer_2022_Datacenter": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2022-datacenter",
        "version": "latest"
      },
      "winServer_2019_Datacenter": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-datacenter",
        "version": "latest"
      }
    },
    "varBaseScriptUri": "https://raw.githubusercontent.com/Azure/avdaccelerator/msix/workload/",
    "varFslogixScriptUri": "[format('{0}scripts/Set-FSLogixRegKeys.ps1', variables('varBaseScriptUri'))]",
    "varFsLogixScript": "./Set-FSLogixRegKeys.ps1",
    "varAvdAgentPackageLocation": "[format('https://wvdportalstorageblob.blob.{0}/galleryartifacts/Configuration_09-08-2022.zip', environment().suffixes.storage)]",
    "varStorageAccountContributorRoleId": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
    "varReaderRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
    "varDesktopVirtualizationPowerOnContributorRoleId": "489581de-a3bd-480d-9518-53dea7416b33",
    "varDesktopVirtualizationPowerOnOffContributorRoleId": "40c5ff49-9181-41f8-ae61-143b0e78555e",
    "varDscAgentPackageLocation": "https://github.com/Azure/avdaccelerator/raw/msix/workload/scripts/DSCStorageScripts.zip",
    "varStorageToDomainScriptUri": "[format('{0}scripts/Manual-DSC-Storage-Scripts.ps1', variables('varBaseScriptUri'))]",
    "varStorageToDomainScript": "./Manual-DSC-Storage-Scripts.ps1",
    "varOuStgPath": "[if(not(empty(parameters('storageOuPath'))), format('\"{0}\"', parameters('storageOuPath')), format('\"{0}\"', variables('varDefaultStorageOuPath')))]",
    "varDefaultStorageOuPath": "[if(equals(parameters('avdIdentityServiceProvider'), 'AADDS'), 'AADDC Computers', 'Computers')]",
    "varStorageCustomOuPath": "[if(not(empty(parameters('storageOuPath'))), 'true', 'false')]",
    "varCreateOuForStorageString": "[string(parameters('createOuForStorage'))]",
    "varAllDnsServers": "[format('{0},168.63.129.16', parameters('customDnsIps'))]",
    "varDnsServers": "[if(empty(parameters('customDnsIps')), createArray(), split(variables('varAllDnsServers'), ','))]",
    "varCreateAvdFslogixDeployment": "[if(equals(parameters('avdIdentityServiceProvider'), 'AAD'), false(), parameters('createAvdFslogixDeployment'))]",
    "varCreateMsixDeployment": "[if(equals(parameters('avdIdentityServiceProvider'), 'AAD'), false(), parameters('createMsixDeployment'))]",
    "varCreateStorageDeployment": "[if(or(variables('varCreateAvdFslogixDeployment'), equals(variables('varCreateMsixDeployment'), true())), true(), false())]",
    "varAvdApplicationGroupIdentitiesIds": "[if(not(empty(parameters('avdApplicationGroupIdentitiesIds'))), split(parameters('avdApplicationGroupIdentitiesIds'), ','), createArray())]",
    "varCreateAvdVnetPeering": "[if(not(empty(parameters('existingHubVnetResourceId'))), true(), false())]",
    "varCommonResourceTags": "[if(parameters('createResourceTags'), createObject('WorkloadName', parameters('workloadNameTag'), 'WorkloadType', parameters('workloadTypeTag'), 'DataClassification', parameters('dataClassificationTag'), 'Department', parameters('departmentTag'), 'Criticality', if(equals(parameters('workloadCriticalityTag'), 'Custom'), parameters('workloadCriticalityCustomValueTag'), parameters('workloadCriticalityTag')), 'ApplicationName', parameters('applicationNameTag'), 'ServiceClass', parameters('workloadSlaTag'), 'OpsTeam', parameters('opsTeamTag'), 'Owner', parameters('ownerTag'), 'CostCenter', parameters('costCenterTag'), 'Environment', parameters('environmentTypeTag')), createObject())]",
    "varAllComputeStorageTags": {
      "DomainName": "[parameters('avdIdentityDomainName')]",
      "JoinType": "[parameters('avdIdentityServiceProvider')]"
    },
    "varAvdCostManagementParentResourceTag": {
      "cm-resource-parent": "[format('/subscriptions/{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', parameters('avdWorkloadSubsId'), variables('varAvdServiceObjectsRgName'), variables('varAvdHostPoolName'))]"
    },
    "varAllResourceTags": "[union(variables('varCommonResourceTags'), variables('varAllComputeStorageTags'))]",
    "varTelemetryId": "[format('pid-2ce4228c-d72c-43fb-bb5b-cd8f3ba2138e-{0}', parameters('avdManagementPlaneLocation'))]",
    "resourceGroups": [
      {
        "purpose": "Service-Objects",
        "name": "[variables('varAvdServiceObjectsRgName')]",
        "location": "[parameters('avdManagementPlaneLocation')]",
        "enableDefaultTelemetry": false,
        "tags": "[if(parameters('createResourceTags'), union(variables('varCommonResourceTags'), variables('varAvdCostManagementParentResourceTag')), variables('varAvdCostManagementParentResourceTag'))]"
      },
      {
        "purpose": "Pool-Compute",
        "name": "[variables('varAvdComputeObjectsRgName')]",
        "location": "[parameters('avdSessionHostLocation')]",
        "enableDefaultTelemetry": false,
        "tags": "[if(parameters('createResourceTags'), union(variables('varAllComputeStorageTags'), variables('varAvdCostManagementParentResourceTag')), variables('varAvdCostManagementParentResourceTag'))]"
      }
    ]
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[variables('varTelemetryId')]",
      "location": "[parameters('avdManagementPlaneLocation')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[parameters('createAvdVnet')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Deploy-{0}-{1}', variables('varAvdNetworkObjectsRgName'), parameters('time'))]",
      "subscriptionId": "[parameters('avdWorkloadSubsId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varAvdNetworkObjectsRgName')]"
          },
          "location": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "enableDefaultTelemetry": {
            "value": false
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varCommonResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "17022411650293639983"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-RG-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                  },
                  "level": {
                    "value": "[parameters('lock')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "13711960058853982192"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the Lock"
                      }
                    },
                    "level": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Set lock level."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    }
                  },
                  "variables": {
                    "lockNotes": {
                      "CanNotDelete": "Cannot delete resource or child resources.",
                      "ReadOnly": "Cannot modify the resource or child resources."
                    },
                    "lockName": "[if(empty(parameters('name')), format('{0}-lock', parameters('level')), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('level'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "name": "[variables('lockName')]",
                      "properties": {
                        "level": "[parameters('level')]",
                        "notes": "[variables('lockNotes')[parameters('level')]]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Authorization/locks', variables('lockName'))]",
                      "metadata": {
                        "description": "The resource ID of the lock"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[variables('lockName')]",
                      "metadata": {
                        "description": "The name of the lock"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "resourceGroup_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "14872887716180150882"
                    }
                  },
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the prinicpals to assign to role to"
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                      "API Management Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '312a565d-c81f-4fd8-895a-4e21e48d571c')]",
                      "API Management Service Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e022efe7-f5ba-4159-bbe4-b44f577e9b61')]",
                      "API Management Service Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '71522526-b88f-4d52-b57f-d31fc3546d0d')]",
                      "App Configuration Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]",
                      "App Configuration Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                      "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                      "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                      "Attestation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bbf86eb8-f7b4-4cce-96e4-18cddf81d86e')]",
                      "Attestation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bd22b-8476-40bc-a0bc-69b95687b9f3')]",
                      "Automation Job Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]",
                      "Automation Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd3881f73-407a-4167-8283-e981cbba0404')]",
                      "Automation Runbook Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]",
                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                      "Azure Connected Machine Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b64e21ea-ac4e-4cdf-9dc9-5b892992bee7')]",
                      "Azure Connected Machine Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cd570a14-e51a-42ad-bac8-bafd67325302')]",
                      "Azure Digital Twins Owner (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]",
                      "Azure Digital Twins Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd57506d4-4c8d-48b1-8587-93c323f6a5a3')]",
                      "Azure Event Hubs Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
                      "Azure Event Hubs Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
                      "Azure Event Hubs Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
                      "Azure Kubernetes Service Cluster Admin Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]",
                      "Azure Kubernetes Service Cluster User Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4abbcc35-e782-43d8-92c5-2d3f1bd2253f')]",
                      "Azure Kubernetes Service Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]",
                      "Azure Maps Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204')]",
                      "Azure Maps Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '423170ca-a8f6-4b0f-8487-9e4eb8f49bfa')]",
                      "Azure Sentinel Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
                      "Azure Sentinel Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]",
                      "Azure Sentinel Responder": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]",
                      "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                      "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                      "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                      "Azure Stack Registration Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6f12a6df-dd06-4f3e-bcb1-ce8be600526a')]",
                      "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                      "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                      "Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a795c7a0-d4a2-40c1-ae25-d81f01202912')]",
                      "Billing Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
                      "BizTalk Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e3c6656-6cfa-4708-81fe-0de47ac73342')]",
                      "Blockchain Member Node Access (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '31a002a1-acaf-453e-8a5b-297c9ca1ea24')]",
                      "Blueprint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '41077137-e803-4205-871c-5a86e6a753b4')]",
                      "Blueprint Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '437d2ced-4a38-4302-8479-ed2bcb43d090')]",
                      "CDN Endpoint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]",
                      "CDN Endpoint Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]",
                      "CDN Profile Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]",
                      "CDN Profile Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f96442b-4075-438f-813d-ad51ab4019af')]",
                      "Classic Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b34d265f-36f7-4a0d-a4d4-e158ca92e90f')]",
                      "Classic Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86e8f5dc-a6e9-4c67-9d15-de283e8eac25')]",
                      "Classic Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '985d6b00-f706-48f5-a6fe-d0ca12fb668d')]",
                      "Classic Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd73bb868-a0df-4d4d-bd69-98a00b01fccb')]",
                      "ClearDB MySQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9106cda0-8a86-4e81-b686-29a22c54effe')]",
                      "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                      "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                      "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                      "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                      "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                      "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                      "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                      "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                      "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                      "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
                      "Cost Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '434105ed-43f6-45c7-a02f-909b2ba83430')]",
                      "Cost Management Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '72fafb9e-0641-4937-9268-a91bfd8191a3')]",
                      "Data Box Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'add466c9-e687-43fc-8d98-dfcf8d720be5')]",
                      "Data Box Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027')]",
                      "Data Factory Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '673868aa-7521-48a0-acc6-0f60742d39f5')]",
                      "Data Lake Analytics Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '47b7735b-770e-4598-a7da-8b91488b4c88')]",
                      "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
                      "Desktop Virtualization User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]",
                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                      "EventGrid EventSubscription Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '428e0ff0-5e57-4d9c-a221-2c70d0e0a443')]",
                      "EventGrid EventSubscription Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2414bbcf-6497-4faf-8c65-045460748405')]",
                      "Experimentation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a33b-edd6ce5c915c')]",
                      "Experimentation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a22b-edd6ce5c915c')]",
                      "Experimentation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49632ef5-d9ac-41f4-b8e7-bbe587fa74a1')]",
                      "FHIR Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
                      "FHIR Data Exporter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3db33094-8700-4567-8da5-1501d4e7e843')]",
                      "FHIR Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]",
                      "FHIR Data Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3f88fce4-5892-4214-ae73-ba5294559913')]",
                      "Graph Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b60367af-1334-4454-b71e-769d9a4f83d9')]",
                      "HDInsight Cluster Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '61ed4efc-fab3-44fd-b111-e24485cc132a')]",
                      "HDInsight Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d8d5a11-05d3-4bda-a417-a08778121c7c')]",
                      "Hierarchy Settings Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '350f8d15-c687-4448-8ae1-157740a3936d')]",
                      "Hybrid Server Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb')]",
                      "Hybrid Server Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '48b40c6e-82e0-4eb3-90d5-19e40f49b624')]",
                      "Integration Service Environment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a41e2c5b-bd99-4a07-88f4-9bf657a760b8')]",
                      "Integration Service Environment Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7aa55d3-1abb-444a-a5ca-5e51e485d6ec')]",
                      "Intelligent Systems Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '03a6d094-3444-4b3d-88af-7477090a9e5e')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Knowledge Consumer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ee361c5d-f7b5-4119-b4b6-892157c8f64c')]",
                      "Kubernetes Cluster - Azure Arc Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '34e09817-6cbe-4d01-b1a2-e0eac5743d41')]",
                      "Lab Creator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b97fb8bc-a8b2-4522-a38b-dd33c7e65ead')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                      "Logic App Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '515c2055-d9d4-4321-b1b9-bd0c9a0f79fe')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Managed Services Registration assignment Delete ": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '91c1777a-f3dc-4fae-b103-61d183457e46')]",
                      "Management Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c')]",
                      "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]",
                      "Marketplace Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dd920d6d-f481-47f1-b461-f338c46b2d9f')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "New Relic APM Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d28c62d-5b37-4476-8438-e587778df237')]",
                      "Object Understanding Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4dd61c23-6743-42fe-a388-d8bdd41cb745')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Policy Insights Data Writer (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '66bb4e9e-b016-4a94-8249-4c0511c2be84')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Redis Cache Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e0f68234-74aa-48ed-b826-c38b57376e17')]",
                      "Remote Rendering Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3df8b902-2a6f-47c7-8cc5-360e9b272a7e')]",
                      "Remote Rendering Client": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd39065c4-c120-43c9-ab0a-63eed9795f0a')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Scheduler Job Collections Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '188a0f2f-5c9e-469b-ae67-2aa5ce574b94')]",
                      "Search Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                      "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                      "Security Assessment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '612c2aa1-cb24-443b-ac28-3ab7272de6f5')]",
                      "Security Manager (Legacy)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e3d13bf0-dd5a-482e-ba6b-9b8433878d10')]",
                      "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                      "SignalR AccessKey Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '04165923-9d83-45d5-8227-78b77b0a687e')]",
                      "SignalR Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761')]",
                      "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                      "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                      "Site Recovery Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dbaa88c4-0c30-4179-9fb3-46319faa6149')]",
                      "Spatial Anchors Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827')]",
                      "Spatial Anchors Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '70bbe301-9835-447d-afdd-19eb3167307c')]",
                      "Spatial Anchors Account Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d51204f-eb77-4b1c-b86a-2ec626c49413')]",
                      "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                      "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "Support Request Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e')]",
                      "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                      "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]",
                      "Workbook Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e8ddcd69-c73f-4f9f-9844-4100522f16ad')]",
                      "Workbook Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b279062a-9be3-42a0-92ae-8b3cf002ec4d')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the resource group"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the resource group"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "copy": {
        "name": "avdBaselineResourceGroups",
        "count": "[length(variables('resourceGroups'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Deploy-AVD-{0}-{1}', variables('resourceGroups')[copyIndex()].purpose, parameters('time'))]",
      "subscriptionId": "[parameters('avdWorkloadSubsId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('resourceGroups')[copyIndex()].name]"
          },
          "location": {
            "value": "[variables('resourceGroups')[copyIndex()].location]"
          },
          "enableDefaultTelemetry": {
            "value": "[variables('resourceGroups')[copyIndex()].enableDefaultTelemetry]"
          },
          "tags": {
            "value": "[variables('resourceGroups')[copyIndex()].tags]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "17022411650293639983"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-RG-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                  },
                  "level": {
                    "value": "[parameters('lock')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "13711960058853982192"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the Lock"
                      }
                    },
                    "level": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Set lock level."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    }
                  },
                  "variables": {
                    "lockNotes": {
                      "CanNotDelete": "Cannot delete resource or child resources.",
                      "ReadOnly": "Cannot modify the resource or child resources."
                    },
                    "lockName": "[if(empty(parameters('name')), format('{0}-lock', parameters('level')), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('level'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "name": "[variables('lockName')]",
                      "properties": {
                        "level": "[parameters('level')]",
                        "notes": "[variables('lockNotes')[parameters('level')]]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Authorization/locks', variables('lockName'))]",
                      "metadata": {
                        "description": "The resource ID of the lock"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[variables('lockName')]",
                      "metadata": {
                        "description": "The name of the lock"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "resourceGroup_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "14872887716180150882"
                    }
                  },
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the prinicpals to assign to role to"
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                      "API Management Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '312a565d-c81f-4fd8-895a-4e21e48d571c')]",
                      "API Management Service Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e022efe7-f5ba-4159-bbe4-b44f577e9b61')]",
                      "API Management Service Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '71522526-b88f-4d52-b57f-d31fc3546d0d')]",
                      "App Configuration Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]",
                      "App Configuration Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                      "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                      "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                      "Attestation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bbf86eb8-f7b4-4cce-96e4-18cddf81d86e')]",
                      "Attestation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bd22b-8476-40bc-a0bc-69b95687b9f3')]",
                      "Automation Job Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]",
                      "Automation Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd3881f73-407a-4167-8283-e981cbba0404')]",
                      "Automation Runbook Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]",
                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                      "Azure Connected Machine Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b64e21ea-ac4e-4cdf-9dc9-5b892992bee7')]",
                      "Azure Connected Machine Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cd570a14-e51a-42ad-bac8-bafd67325302')]",
                      "Azure Digital Twins Owner (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]",
                      "Azure Digital Twins Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd57506d4-4c8d-48b1-8587-93c323f6a5a3')]",
                      "Azure Event Hubs Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
                      "Azure Event Hubs Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
                      "Azure Event Hubs Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
                      "Azure Kubernetes Service Cluster Admin Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]",
                      "Azure Kubernetes Service Cluster User Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4abbcc35-e782-43d8-92c5-2d3f1bd2253f')]",
                      "Azure Kubernetes Service Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]",
                      "Azure Maps Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204')]",
                      "Azure Maps Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '423170ca-a8f6-4b0f-8487-9e4eb8f49bfa')]",
                      "Azure Sentinel Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
                      "Azure Sentinel Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]",
                      "Azure Sentinel Responder": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]",
                      "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                      "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                      "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                      "Azure Stack Registration Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6f12a6df-dd06-4f3e-bcb1-ce8be600526a')]",
                      "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                      "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                      "Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a795c7a0-d4a2-40c1-ae25-d81f01202912')]",
                      "Billing Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
                      "BizTalk Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e3c6656-6cfa-4708-81fe-0de47ac73342')]",
                      "Blockchain Member Node Access (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '31a002a1-acaf-453e-8a5b-297c9ca1ea24')]",
                      "Blueprint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '41077137-e803-4205-871c-5a86e6a753b4')]",
                      "Blueprint Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '437d2ced-4a38-4302-8479-ed2bcb43d090')]",
                      "CDN Endpoint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]",
                      "CDN Endpoint Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]",
                      "CDN Profile Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]",
                      "CDN Profile Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f96442b-4075-438f-813d-ad51ab4019af')]",
                      "Classic Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b34d265f-36f7-4a0d-a4d4-e158ca92e90f')]",
                      "Classic Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86e8f5dc-a6e9-4c67-9d15-de283e8eac25')]",
                      "Classic Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '985d6b00-f706-48f5-a6fe-d0ca12fb668d')]",
                      "Classic Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd73bb868-a0df-4d4d-bd69-98a00b01fccb')]",
                      "ClearDB MySQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9106cda0-8a86-4e81-b686-29a22c54effe')]",
                      "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                      "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                      "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                      "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                      "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                      "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                      "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                      "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                      "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                      "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
                      "Cost Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '434105ed-43f6-45c7-a02f-909b2ba83430')]",
                      "Cost Management Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '72fafb9e-0641-4937-9268-a91bfd8191a3')]",
                      "Data Box Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'add466c9-e687-43fc-8d98-dfcf8d720be5')]",
                      "Data Box Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027')]",
                      "Data Factory Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '673868aa-7521-48a0-acc6-0f60742d39f5')]",
                      "Data Lake Analytics Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '47b7735b-770e-4598-a7da-8b91488b4c88')]",
                      "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
                      "Desktop Virtualization User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]",
                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                      "EventGrid EventSubscription Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '428e0ff0-5e57-4d9c-a221-2c70d0e0a443')]",
                      "EventGrid EventSubscription Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2414bbcf-6497-4faf-8c65-045460748405')]",
                      "Experimentation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a33b-edd6ce5c915c')]",
                      "Experimentation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a22b-edd6ce5c915c')]",
                      "Experimentation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49632ef5-d9ac-41f4-b8e7-bbe587fa74a1')]",
                      "FHIR Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
                      "FHIR Data Exporter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3db33094-8700-4567-8da5-1501d4e7e843')]",
                      "FHIR Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]",
                      "FHIR Data Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3f88fce4-5892-4214-ae73-ba5294559913')]",
                      "Graph Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b60367af-1334-4454-b71e-769d9a4f83d9')]",
                      "HDInsight Cluster Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '61ed4efc-fab3-44fd-b111-e24485cc132a')]",
                      "HDInsight Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d8d5a11-05d3-4bda-a417-a08778121c7c')]",
                      "Hierarchy Settings Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '350f8d15-c687-4448-8ae1-157740a3936d')]",
                      "Hybrid Server Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb')]",
                      "Hybrid Server Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '48b40c6e-82e0-4eb3-90d5-19e40f49b624')]",
                      "Integration Service Environment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a41e2c5b-bd99-4a07-88f4-9bf657a760b8')]",
                      "Integration Service Environment Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7aa55d3-1abb-444a-a5ca-5e51e485d6ec')]",
                      "Intelligent Systems Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '03a6d094-3444-4b3d-88af-7477090a9e5e')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Knowledge Consumer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ee361c5d-f7b5-4119-b4b6-892157c8f64c')]",
                      "Kubernetes Cluster - Azure Arc Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '34e09817-6cbe-4d01-b1a2-e0eac5743d41')]",
                      "Lab Creator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b97fb8bc-a8b2-4522-a38b-dd33c7e65ead')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                      "Logic App Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '515c2055-d9d4-4321-b1b9-bd0c9a0f79fe')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Managed Services Registration assignment Delete ": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '91c1777a-f3dc-4fae-b103-61d183457e46')]",
                      "Management Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c')]",
                      "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]",
                      "Marketplace Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dd920d6d-f481-47f1-b461-f338c46b2d9f')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "New Relic APM Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d28c62d-5b37-4476-8438-e587778df237')]",
                      "Object Understanding Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4dd61c23-6743-42fe-a388-d8bdd41cb745')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Policy Insights Data Writer (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '66bb4e9e-b016-4a94-8249-4c0511c2be84')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Redis Cache Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e0f68234-74aa-48ed-b826-c38b57376e17')]",
                      "Remote Rendering Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3df8b902-2a6f-47c7-8cc5-360e9b272a7e')]",
                      "Remote Rendering Client": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd39065c4-c120-43c9-ab0a-63eed9795f0a')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Scheduler Job Collections Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '188a0f2f-5c9e-469b-ae67-2aa5ce574b94')]",
                      "Search Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                      "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                      "Security Assessment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '612c2aa1-cb24-443b-ac28-3ab7272de6f5')]",
                      "Security Manager (Legacy)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e3d13bf0-dd5a-482e-ba6b-9b8433878d10')]",
                      "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                      "SignalR AccessKey Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '04165923-9d83-45d5-8227-78b77b0a687e')]",
                      "SignalR Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761')]",
                      "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                      "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                      "Site Recovery Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dbaa88c4-0c30-4179-9fb3-46319faa6149')]",
                      "Spatial Anchors Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827')]",
                      "Spatial Anchors Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '70bbe301-9835-447d-afdd-19eb3167307c')]",
                      "Spatial Anchors Account Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d51204f-eb77-4b1c-b86a-2ec626c49413')]",
                      "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                      "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "Support Request Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e')]",
                      "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                      "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]",
                      "Workbook Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e8ddcd69-c73f-4f9f-9844-4100522f16ad')]",
                      "Workbook Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b279062a-9be3-42a0-92ae-8b3cf002ec4d')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the resource group"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the resource group"
              }
            }
          }
        }
      }
    },
    {
      "condition": "[and(variables('varCreateStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Deploy-{0}-{1}', variables('varAvdStorageObjectsRgName'), parameters('time'))]",
      "subscriptionId": "[parameters('avdWorkloadSubsId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varAvdStorageObjectsRgName')]"
          },
          "location": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "enableDefaultTelemetry": {
            "value": false
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varAllComputeStorageTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "17022411650293639983"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-RG-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                  },
                  "level": {
                    "value": "[parameters('lock')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "13711960058853982192"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the Lock"
                      }
                    },
                    "level": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Set lock level."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    }
                  },
                  "variables": {
                    "lockNotes": {
                      "CanNotDelete": "Cannot delete resource or child resources.",
                      "ReadOnly": "Cannot modify the resource or child resources."
                    },
                    "lockName": "[if(empty(parameters('name')), format('{0}-lock', parameters('level')), parameters('name'))]"
                  },
                  "resources": [
                    {
                      "condition": "[not(equals(parameters('level'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "name": "[variables('lockName')]",
                      "properties": {
                        "level": "[parameters('level')]",
                        "notes": "[variables('lockNotes')[parameters('level')]]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Authorization/locks', variables('lockName'))]",
                      "metadata": {
                        "description": "The resource ID of the lock"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[variables('lockName')]",
                      "metadata": {
                        "description": "The name of the lock"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "resourceGroup_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "14872887716180150882"
                    }
                  },
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the prinicpals to assign to role to"
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                      "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                      "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                      "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                      "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                      "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                      "API Management Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '312a565d-c81f-4fd8-895a-4e21e48d571c')]",
                      "API Management Service Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e022efe7-f5ba-4159-bbe4-b44f577e9b61')]",
                      "API Management Service Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '71522526-b88f-4d52-b57f-d31fc3546d0d')]",
                      "App Configuration Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]",
                      "App Configuration Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                      "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                      "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                      "Attestation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bbf86eb8-f7b4-4cce-96e4-18cddf81d86e')]",
                      "Attestation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bd22b-8476-40bc-a0bc-69b95687b9f3')]",
                      "Automation Job Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]",
                      "Automation Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd3881f73-407a-4167-8283-e981cbba0404')]",
                      "Automation Runbook Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]",
                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                      "Azure Connected Machine Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b64e21ea-ac4e-4cdf-9dc9-5b892992bee7')]",
                      "Azure Connected Machine Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cd570a14-e51a-42ad-bac8-bafd67325302')]",
                      "Azure Digital Twins Owner (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]",
                      "Azure Digital Twins Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd57506d4-4c8d-48b1-8587-93c323f6a5a3')]",
                      "Azure Event Hubs Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
                      "Azure Event Hubs Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
                      "Azure Event Hubs Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
                      "Azure Kubernetes Service Cluster Admin Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]",
                      "Azure Kubernetes Service Cluster User Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4abbcc35-e782-43d8-92c5-2d3f1bd2253f')]",
                      "Azure Kubernetes Service Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]",
                      "Azure Maps Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204')]",
                      "Azure Maps Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '423170ca-a8f6-4b0f-8487-9e4eb8f49bfa')]",
                      "Azure Sentinel Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
                      "Azure Sentinel Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]",
                      "Azure Sentinel Responder": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]",
                      "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                      "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                      "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                      "Azure Stack Registration Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6f12a6df-dd06-4f3e-bcb1-ce8be600526a')]",
                      "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                      "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                      "Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a795c7a0-d4a2-40c1-ae25-d81f01202912')]",
                      "Billing Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
                      "BizTalk Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e3c6656-6cfa-4708-81fe-0de47ac73342')]",
                      "Blockchain Member Node Access (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '31a002a1-acaf-453e-8a5b-297c9ca1ea24')]",
                      "Blueprint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '41077137-e803-4205-871c-5a86e6a753b4')]",
                      "Blueprint Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '437d2ced-4a38-4302-8479-ed2bcb43d090')]",
                      "CDN Endpoint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]",
                      "CDN Endpoint Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]",
                      "CDN Profile Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]",
                      "CDN Profile Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f96442b-4075-438f-813d-ad51ab4019af')]",
                      "Classic Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b34d265f-36f7-4a0d-a4d4-e158ca92e90f')]",
                      "Classic Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86e8f5dc-a6e9-4c67-9d15-de283e8eac25')]",
                      "Classic Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '985d6b00-f706-48f5-a6fe-d0ca12fb668d')]",
                      "Classic Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd73bb868-a0df-4d4d-bd69-98a00b01fccb')]",
                      "ClearDB MySQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9106cda0-8a86-4e81-b686-29a22c54effe')]",
                      "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                      "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                      "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                      "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                      "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                      "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                      "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                      "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                      "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                      "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
                      "Cost Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '434105ed-43f6-45c7-a02f-909b2ba83430')]",
                      "Cost Management Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '72fafb9e-0641-4937-9268-a91bfd8191a3')]",
                      "Data Box Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'add466c9-e687-43fc-8d98-dfcf8d720be5')]",
                      "Data Box Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027')]",
                      "Data Factory Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '673868aa-7521-48a0-acc6-0f60742d39f5')]",
                      "Data Lake Analytics Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '47b7735b-770e-4598-a7da-8b91488b4c88')]",
                      "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
                      "Desktop Virtualization User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]",
                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                      "EventGrid EventSubscription Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '428e0ff0-5e57-4d9c-a221-2c70d0e0a443')]",
                      "EventGrid EventSubscription Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2414bbcf-6497-4faf-8c65-045460748405')]",
                      "Experimentation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a33b-edd6ce5c915c')]",
                      "Experimentation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a22b-edd6ce5c915c')]",
                      "Experimentation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49632ef5-d9ac-41f4-b8e7-bbe587fa74a1')]",
                      "FHIR Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
                      "FHIR Data Exporter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3db33094-8700-4567-8da5-1501d4e7e843')]",
                      "FHIR Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]",
                      "FHIR Data Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3f88fce4-5892-4214-ae73-ba5294559913')]",
                      "Graph Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b60367af-1334-4454-b71e-769d9a4f83d9')]",
                      "HDInsight Cluster Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '61ed4efc-fab3-44fd-b111-e24485cc132a')]",
                      "HDInsight Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d8d5a11-05d3-4bda-a417-a08778121c7c')]",
                      "Hierarchy Settings Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '350f8d15-c687-4448-8ae1-157740a3936d')]",
                      "Hybrid Server Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb')]",
                      "Hybrid Server Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '48b40c6e-82e0-4eb3-90d5-19e40f49b624')]",
                      "Integration Service Environment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a41e2c5b-bd99-4a07-88f4-9bf657a760b8')]",
                      "Integration Service Environment Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7aa55d3-1abb-444a-a5ca-5e51e485d6ec')]",
                      "Intelligent Systems Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '03a6d094-3444-4b3d-88af-7477090a9e5e')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Knowledge Consumer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ee361c5d-f7b5-4119-b4b6-892157c8f64c')]",
                      "Kubernetes Cluster - Azure Arc Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '34e09817-6cbe-4d01-b1a2-e0eac5743d41')]",
                      "Lab Creator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b97fb8bc-a8b2-4522-a38b-dd33c7e65ead')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                      "Logic App Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '515c2055-d9d4-4321-b1b9-bd0c9a0f79fe')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Managed Services Registration assignment Delete ": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '91c1777a-f3dc-4fae-b103-61d183457e46')]",
                      "Management Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c')]",
                      "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]",
                      "Marketplace Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dd920d6d-f481-47f1-b461-f338c46b2d9f')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "New Relic APM Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d28c62d-5b37-4476-8438-e587778df237')]",
                      "Object Understanding Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4dd61c23-6743-42fe-a388-d8bdd41cb745')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Policy Insights Data Writer (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '66bb4e9e-b016-4a94-8249-4c0511c2be84')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Redis Cache Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e0f68234-74aa-48ed-b826-c38b57376e17')]",
                      "Remote Rendering Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3df8b902-2a6f-47c7-8cc5-360e9b272a7e')]",
                      "Remote Rendering Client": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd39065c4-c120-43c9-ab0a-63eed9795f0a')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Scheduler Job Collections Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '188a0f2f-5c9e-469b-ae67-2aa5ce574b94')]",
                      "Search Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                      "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                      "Security Assessment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '612c2aa1-cb24-443b-ac28-3ab7272de6f5')]",
                      "Security Manager (Legacy)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e3d13bf0-dd5a-482e-ba6b-9b8433878d10')]",
                      "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                      "SignalR AccessKey Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '04165923-9d83-45d5-8227-78b77b0a687e')]",
                      "SignalR Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761')]",
                      "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                      "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                      "Site Recovery Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dbaa88c4-0c30-4179-9fb3-46319faa6149')]",
                      "Spatial Anchors Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827')]",
                      "Spatial Anchors Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '70bbe301-9835-447d-afdd-19eb3167307c')]",
                      "Spatial Anchors Account Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d51204f-eb77-4b1c-b86a-2ec626c49413')]",
                      "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                      "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "Support Request Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e')]",
                      "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                      "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                      "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                      "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]",
                      "Workbook Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e8ddcd69-c73f-4f9f-9844-4100522f16ad')]",
                      "Workbook Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b279062a-9be3-42a0-92ae-8b3cf002ec4d')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the resource group"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the resource group"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[parameters('avdDeployMonitoring')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Monitoring-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "avdManagementPlaneLocation": {
            "value": "[parameters('avdManagementPlaneLocation')]"
          },
          "deployAlaWorkspace": {
            "value": "[parameters('deployAlaWorkspace')]"
          },
          "deployCustomPolicyMonitoring": {
            "value": "[parameters('deployCustomPolicyMonitoring')]"
          },
          "alaWorkspaceId": "[if(parameters('deployAlaWorkspace'), createObject('value', ''), createObject('value', parameters('alaExistingWorkspaceResourceId')))]",
          "avdMonitoringRgName": {
            "value": "[variables('varAvdMonitoringRgName')]"
          },
          "avdAlaWorkspaceName": "[if(parameters('deployAlaWorkspace'), createObject('value', variables('varAvdAlaWorkspaceName')), createObject('value', ''))]",
          "avdAlaWorkspaceDataRetention": {
            "value": "[parameters('avdAlaWorkspaceDataRetention')]"
          },
          "avdWorkloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "avdTags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varAllResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "8262979829574377259"
            }
          },
          "parameters": {
            "avdManagementPlaneLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy AVD management plane."
              }
            },
            "avdWorkloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "deployAlaWorkspace": {
              "type": "bool",
              "metadata": {
                "description": "Required. create new Azure log analytics workspace."
              }
            },
            "deployCustomPolicyMonitoring": {
              "type": "bool",
              "metadata": {
                "description": "Required. Create and assign custom Azure Policy for diagnostic settings for the AVD Log Analytics workspace."
              }
            },
            "alaWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Exisintg Azure log analytics workspace resource."
              }
            },
            "avdMonitoringRgName": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD Resource Group Name for monitoring resources."
              }
            },
            "avdAlaWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required.  Azure log analytics workspace name."
              }
            },
            "avdAlaWorkspaceDataRetention": {
              "type": "int",
              "metadata": {
                "description": "Required.  Azure log analytics workspace name data retention."
              }
            },
            "avdTags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('deployAlaWorkspace')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-{1}', parameters('avdMonitoringRgName'), parameters('time'))]",
              "subscriptionId": "[parameters('avdWorkloadSubsId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdMonitoringRgName')]"
                  },
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": false
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17022411650293639983"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                          },
                          "level": {
                            "value": "[parameters('lock')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "13711960058853982192"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the Lock"
                              }
                            },
                            "level": {
                              "type": "string",
                              "defaultValue": "NotSpecified",
                              "metadata": {
                                "description": "Optional. Set lock level."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "NotSpecified",
                                "ReadOnly"
                              ]
                            }
                          },
                          "variables": {
                            "lockNotes": {
                              "CanNotDelete": "Cannot delete resource or child resources.",
                              "ReadOnly": "Cannot modify the resource or child resources."
                            },
                            "lockName": "[if(empty(parameters('name')), format('{0}-lock', parameters('level')), parameters('name'))]"
                          },
                          "resources": [
                            {
                              "condition": "[not(equals(parameters('level'), 'NotSpecified'))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2017-04-01",
                              "name": "[variables('lockName')]",
                              "properties": {
                                "level": "[parameters('level')]",
                                "notes": "[variables('lockNotes')[parameters('level')]]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/locks', variables('lockName'))]",
                              "metadata": {
                                "description": "The resource ID of the lock"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[variables('lockName')]",
                              "metadata": {
                                "description": "The name of the lock"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "resourceGroup_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "14872887716180150882"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                              "API Management Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '312a565d-c81f-4fd8-895a-4e21e48d571c')]",
                              "API Management Service Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e022efe7-f5ba-4159-bbe4-b44f577e9b61')]",
                              "API Management Service Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '71522526-b88f-4d52-b57f-d31fc3546d0d')]",
                              "App Configuration Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]",
                              "App Configuration Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                              "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                              "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                              "Attestation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bbf86eb8-f7b4-4cce-96e4-18cddf81d86e')]",
                              "Attestation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bd22b-8476-40bc-a0bc-69b95687b9f3')]",
                              "Automation Job Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]",
                              "Automation Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd3881f73-407a-4167-8283-e981cbba0404')]",
                              "Automation Runbook Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Azure Connected Machine Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b64e21ea-ac4e-4cdf-9dc9-5b892992bee7')]",
                              "Azure Connected Machine Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cd570a14-e51a-42ad-bac8-bafd67325302')]",
                              "Azure Digital Twins Owner (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]",
                              "Azure Digital Twins Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd57506d4-4c8d-48b1-8587-93c323f6a5a3')]",
                              "Azure Event Hubs Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f526a384-b230-433a-b45c-95f59c4a2dec')]",
                              "Azure Event Hubs Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
                              "Azure Event Hubs Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
                              "Azure Kubernetes Service Cluster Admin Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]",
                              "Azure Kubernetes Service Cluster User Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4abbcc35-e782-43d8-92c5-2d3f1bd2253f')]",
                              "Azure Kubernetes Service Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]",
                              "Azure Maps Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204')]",
                              "Azure Maps Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '423170ca-a8f6-4b0f-8487-9e4eb8f49bfa')]",
                              "Azure Sentinel Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
                              "Azure Sentinel Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]",
                              "Azure Sentinel Responder": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]",
                              "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                              "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                              "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                              "Azure Stack Registration Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6f12a6df-dd06-4f3e-bcb1-ce8be600526a')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a795c7a0-d4a2-40c1-ae25-d81f01202912')]",
                              "Billing Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
                              "BizTalk Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e3c6656-6cfa-4708-81fe-0de47ac73342')]",
                              "Blockchain Member Node Access (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '31a002a1-acaf-453e-8a5b-297c9ca1ea24')]",
                              "Blueprint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '41077137-e803-4205-871c-5a86e6a753b4')]",
                              "Blueprint Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '437d2ced-4a38-4302-8479-ed2bcb43d090')]",
                              "CDN Endpoint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]",
                              "CDN Endpoint Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]",
                              "CDN Profile Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]",
                              "CDN Profile Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f96442b-4075-438f-813d-ad51ab4019af')]",
                              "Classic Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b34d265f-36f7-4a0d-a4d4-e158ca92e90f')]",
                              "Classic Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86e8f5dc-a6e9-4c67-9d15-de283e8eac25')]",
                              "Classic Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '985d6b00-f706-48f5-a6fe-d0ca12fb668d')]",
                              "Classic Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd73bb868-a0df-4d4d-bd69-98a00b01fccb')]",
                              "ClearDB MySQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9106cda0-8a86-4e81-b686-29a22c54effe')]",
                              "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                              "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                              "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                              "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                              "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                              "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                              "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                              "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                              "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                              "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
                              "Cost Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '434105ed-43f6-45c7-a02f-909b2ba83430')]",
                              "Cost Management Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '72fafb9e-0641-4937-9268-a91bfd8191a3')]",
                              "Data Box Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'add466c9-e687-43fc-8d98-dfcf8d720be5')]",
                              "Data Box Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027')]",
                              "Data Factory Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '673868aa-7521-48a0-acc6-0f60742d39f5')]",
                              "Data Lake Analytics Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '47b7735b-770e-4598-a7da-8b91488b4c88')]",
                              "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
                              "Desktop Virtualization User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "EventGrid EventSubscription Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '428e0ff0-5e57-4d9c-a221-2c70d0e0a443')]",
                              "EventGrid EventSubscription Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2414bbcf-6497-4faf-8c65-045460748405')]",
                              "Experimentation Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a33b-edd6ce5c915c')]",
                              "Experimentation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f646f1b-fa08-80eb-a22b-edd6ce5c915c')]",
                              "Experimentation Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49632ef5-d9ac-41f4-b8e7-bbe587fa74a1')]",
                              "FHIR Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
                              "FHIR Data Exporter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3db33094-8700-4567-8da5-1501d4e7e843')]",
                              "FHIR Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]",
                              "FHIR Data Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3f88fce4-5892-4214-ae73-ba5294559913')]",
                              "Graph Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b60367af-1334-4454-b71e-769d9a4f83d9')]",
                              "HDInsight Cluster Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '61ed4efc-fab3-44fd-b111-e24485cc132a')]",
                              "HDInsight Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d8d5a11-05d3-4bda-a417-a08778121c7c')]",
                              "Hierarchy Settings Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '350f8d15-c687-4448-8ae1-157740a3936d')]",
                              "Hybrid Server Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb')]",
                              "Hybrid Server Resource Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '48b40c6e-82e0-4eb3-90d5-19e40f49b624')]",
                              "Integration Service Environment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a41e2c5b-bd99-4a07-88f4-9bf657a760b8')]",
                              "Integration Service Environment Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7aa55d3-1abb-444a-a5ca-5e51e485d6ec')]",
                              "Intelligent Systems Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '03a6d094-3444-4b3d-88af-7477090a9e5e')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Knowledge Consumer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ee361c5d-f7b5-4119-b4b6-892157c8f64c')]",
                              "Kubernetes Cluster - Azure Arc Onboarding": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '34e09817-6cbe-4d01-b1a2-e0eac5743d41')]",
                              "Lab Creator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b97fb8bc-a8b2-4522-a38b-dd33c7e65ead')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                              "Logic App Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '515c2055-d9d4-4321-b1b9-bd0c9a0f79fe')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Managed Services Registration assignment Delete ": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '91c1777a-f3dc-4fae-b103-61d183457e46')]",
                              "Management Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c')]",
                              "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]",
                              "Marketplace Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dd920d6d-f481-47f1-b461-f338c46b2d9f')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "New Relic APM Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d28c62d-5b37-4476-8438-e587778df237')]",
                              "Object Understanding Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4dd61c23-6743-42fe-a388-d8bdd41cb745')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Policy Insights Data Writer (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '66bb4e9e-b016-4a94-8249-4c0511c2be84')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Redis Cache Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e0f68234-74aa-48ed-b826-c38b57376e17')]",
                              "Remote Rendering Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3df8b902-2a6f-47c7-8cc5-360e9b272a7e')]",
                              "Remote Rendering Client": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd39065c4-c120-43c9-ab0a-63eed9795f0a')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Scheduler Job Collections Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '188a0f2f-5c9e-469b-ae67-2aa5ce574b94')]",
                              "Search Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                              "Security Assessment Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '612c2aa1-cb24-443b-ac28-3ab7272de6f5')]",
                              "Security Manager (Legacy)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e3d13bf0-dd5a-482e-ba6b-9b8433878d10')]",
                              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                              "SignalR AccessKey Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '04165923-9d83-45d5-8227-78b77b0a687e')]",
                              "SignalR Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "Site Recovery Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'dbaa88c4-0c30-4179-9fb3-46319faa6149')]",
                              "Spatial Anchors Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827')]",
                              "Spatial Anchors Account Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '70bbe301-9835-447d-afdd-19eb3167307c')]",
                              "Spatial Anchors Account Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5d51204f-eb77-4b1c-b86a-2ec626c49413')]",
                              "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "Support Request Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e')]",
                              "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
                              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]",
                              "Workbook Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e8ddcd69-c73f-4f9f-9844-4100522f16ad')]",
                              "Workbook Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b279062a-9be3-42a0-92ae-8b3cf002ec4d')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the resource group"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the resource group"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deployAlaWorkspace')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Log-Analytics-Workspace-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdMonitoringRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "name": {
                    "value": "[parameters('avdAlaWorkspaceName')]"
                  },
                  "dataRetention": {
                    "value": "[parameters('avdAlaWorkspaceDataRetention')]"
                  },
                  "useResourcePermissions": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "13310094770206634120"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "Free",
                        "Standalone",
                        "PerNode",
                        "PerGB2018"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "storageInsightsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of storage accounts to be read by the workspace."
                      }
                    },
                    "linkedServices": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of services to be linked."
                      }
                    },
                    "linkedStorageAccounts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                      }
                    },
                    "savedSearches": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Kusto Query Language searches to save."
                      }
                    },
                    "dataSources": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW data sources to configure."
                      }
                    },
                    "gallerySolutions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 730,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Number of days data will be retained for."
                      }
                    },
                    "dailyQuotaGb": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "metadata": {
                        "description": "Optional. The workspace daily quota for ingestion."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "forceCmkForQuery": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Audit"
                      ],
                      "allowedValues": [
                        "Audit"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "logAnalyticsSearchVersion": 1,
                    "enableReferencedModulesTelemetry": false
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {
                          "searchVersion": "[variables('logAnalyticsSearchVersion')]",
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        },
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "retentionInDays": "[parameters('dataRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                        },
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_storageInsightConfigs",
                        "count": "[length(parameters('storageInsightsConfigs'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'containers'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].containers), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'tables'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].tables), createObject('value', createArray()))]",
                          "storageAccountId": {
                            "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountId]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "3442833318671660901"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The name of the storage insights config."
                              }
                            },
                            "storageAccountId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Azure Resource Manager ID of the storage account resource."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the blob containers that the workspace should read."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the Azure tables that the workspace should read."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "containers": "[parameters('containers')]",
                                "tables": "[parameters('tables')]",
                                "storageAccount": {
                                  "id": "[parameters('storageAccountId')]",
                                  "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-06-01').keys[0].value]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed storage insights configuration."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the storage insight configuration is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the storage insights configuration."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedServices",
                        "count": "[length(parameters('linkedServices'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedServices')[copyIndex()].name]"
                          },
                          "resourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'resourceId'), createObject('value', parameters('linkedServices')[copyIndex()].resourceId), createObject('value', ''))]",
                          "writeAccessResourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId'), createObject('value', parameters('linkedServices')[copyIndex()].writeAccessResourceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "15178628257265869957"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            },
                            "writeAccessResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resourceId": "[parameters('resourceId')]",
                                "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed linked service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed linked service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the linked service is deployed."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                        "count": "[length(parameters('linkedStorageAccounts'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                          },
                          "resourceId": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "14883499612522465847"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "Query",
                                "Alerts",
                                "CustomLogs",
                                "AzureWatson"
                              ],
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "storageAccountIds": [
                                  "[parameters('resourceId')]"
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed linked storage account."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed linked storage account."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the linked storage account is deployed."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_savedSearches",
                        "count": "[length(parameters('savedSearches'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                          },
                          "etag": "[if(contains(parameters('savedSearches')[copyIndex()], 'eTag'), createObject('value', parameters('savedSearches')[copyIndex()].etag), createObject('value', '*'))]",
                          "displayName": {
                            "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                          },
                          "category": {
                            "value": "[parameters('savedSearches')[copyIndex()].category]"
                          },
                          "query": {
                            "value": "[parameters('savedSearches')[copyIndex()].query]"
                          },
                          "functionAlias": "[if(contains(parameters('savedSearches')[copyIndex()], 'functionAlias'), createObject('value', parameters('savedSearches')[copyIndex()].functionAlias), createObject('value', ''))]",
                          "functionParameters": "[if(contains(parameters('savedSearches')[copyIndex()], 'functionParameters'), createObject('value', parameters('savedSearches')[copyIndex()].functionParameters), createObject('value', ''))]",
                          "version": "[if(contains(parameters('savedSearches')[copyIndex()], 'version'), createObject('value', parameters('savedSearches')[copyIndex()].version), createObject('value', 2))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "7418646215831353465"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the saved search."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Display name for the search."
                              }
                            },
                            "category": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Query category."
                              }
                            },
                            "query": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Kusto Query to be stored."
                              }
                            },
                            "tags": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "functionAlias": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The function alias if query serves as a function."
                              }
                            },
                            "functionParameters": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                              }
                            },
                            "version": {
                              "type": "int",
                              "defaultValue": 2,
                              "metadata": {
                                "description": "Optional. The version number of the query language."
                              }
                            },
                            "etag": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "etag": "[parameters('etag')]",
                                "tags": "[parameters('tags')]",
                                "displayName": "[parameters('displayName')]",
                                "category": "[parameters('category')]",
                                "query": "[parameters('query')]",
                                "functionAlias": "[parameters('functionAlias')]",
                                "functionParameters": "[parameters('functionParameters')]",
                                "version": "[parameters('version')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed saved search."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the saved search is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed saved search."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
                        "logAnalyticsWorkspace_linkedStorageAccounts"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_dataSources",
                        "count": "[length(parameters('dataSources'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('dataSources')[copyIndex()].name]"
                          },
                          "kind": {
                            "value": "[parameters('dataSources')[copyIndex()].kind]"
                          },
                          "linkedResourceId": "[if(contains(parameters('dataSources')[copyIndex()], 'linkedResourceId'), createObject('value', parameters('dataSources')[copyIndex()].linkedResourceId), createObject('value', ''))]",
                          "eventLogName": "[if(contains(parameters('dataSources')[copyIndex()], 'eventLogName'), createObject('value', parameters('dataSources')[copyIndex()].eventLogName), createObject('value', ''))]",
                          "eventTypes": "[if(contains(parameters('dataSources')[copyIndex()], 'eventTypes'), createObject('value', parameters('dataSources')[copyIndex()].eventTypes), createObject('value', createArray()))]",
                          "objectName": "[if(contains(parameters('dataSources')[copyIndex()], 'objectName'), createObject('value', parameters('dataSources')[copyIndex()].objectName), createObject('value', ''))]",
                          "instanceName": "[if(contains(parameters('dataSources')[copyIndex()], 'instanceName'), createObject('value', parameters('dataSources')[copyIndex()].instanceName), createObject('value', ''))]",
                          "intervalSeconds": "[if(contains(parameters('dataSources')[copyIndex()], 'intervalSeconds'), createObject('value', parameters('dataSources')[copyIndex()].intervalSeconds), createObject('value', 60))]",
                          "counterName": "[if(contains(parameters('dataSources')[copyIndex()], 'counterName'), createObject('value', parameters('dataSources')[copyIndex()].counterName), createObject('value', ''))]",
                          "state": "[if(contains(parameters('dataSources')[copyIndex()], 'state'), createObject('value', parameters('dataSources')[copyIndex()].state), createObject('value', ''))]",
                          "syslogName": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogName'), createObject('value', parameters('dataSources')[copyIndex()].syslogName), createObject('value', ''))]",
                          "syslogSeverities": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogSeverities'), createObject('value', parameters('dataSources')[copyIndex()].syslogSeverities), createObject('value', createArray()))]",
                          "performanceCounters": "[if(contains(parameters('dataSources')[copyIndex()], 'performanceCounters'), createObject('value', parameters('dataSources')[copyIndex()].performanceCounters), createObject('value', createArray()))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "4591480837530398732"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "AzureActivityLog",
                              "allowedValues": [
                                "AzureActivityLog",
                                "WindowsEvent",
                                "WindowsPerformanceCounter",
                                "IISLogs",
                                "LinuxSyslog",
                                "LinuxSyslogCollection",
                                "LinuxPerformanceObject",
                                "LinuxPerformanceCollection"
                              ],
                              "metadata": {
                                "description": "Required. The kind of the DataSource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "linkedResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the resource to be linked."
                              }
                            },
                            "eventLogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                              }
                            },
                            "eventTypes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                              }
                            },
                            "objectName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "instanceName": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "intervalSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "performanceCounters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                              }
                            },
                            "counterName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                              }
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                              }
                            },
                            "syslogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                              }
                            },
                            "syslogSeverities": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed data source."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the data source is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed data source."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_solutions",
                        "count": "[length(parameters('gallerySolutions'))]"
                      },
                      "condition": "[not(empty(parameters('gallerySolutions')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "product": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'product'), createObject('value', parameters('gallerySolutions')[copyIndex()].product), createObject('value', 'OMSGallery'))]",
                          "publisher": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'publisher'), createObject('value', parameters('gallerySolutions')[copyIndex()].publisher), createObject('value', 'Microsoft'))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "3544214926318226766"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                              }
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "product": {
                              "type": "string",
                              "defaultValue": "OMSGallery",
                              "metadata": {
                                "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "defaultValue": "Microsoft",
                              "metadata": {
                                "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "variables": {
                            "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                            "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationsManagement/solutions",
                              "apiVersion": "2015-11-01-preview",
                              "name": "[variables('solutionName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                              },
                              "plan": {
                                "name": "[variables('solutionName')]",
                                "promotionCode": "",
                                "product": "[variables('solutionProduct')]",
                                "publisher": "[parameters('publisher')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[variables('solutionName')]",
                              "metadata": {
                                "description": "The name of the deployed solution."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed solution."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the solution is deployed."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "12056965717878667488"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Automation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f353d9bd-d4a6-484e-a77a-8050b599b867')]",
                              "Azure Sentinel Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
                              "Azure Sentinel Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]",
                              "Azure Sentinel Responder": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]",
                              "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed log analytics workspace."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed log analytics workspace."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed log analytics workspace."
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2021-06-01').customerId]",
                      "metadata": {
                        "description": "The ID associated with the workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2021-06-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('avdWorkloadSubsId'), 'Microsoft.Resources/deployments', format('{0}-{1}', parameters('avdMonitoringRgName'), parameters('time')))]"
              ]
            },
            {
              "condition": "[parameters('deployAlaWorkspace')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('ALA-Workspace-Wait-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdMonitoringRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('AVD-alaWorkspaceWait-{0}', parameters('time'))]"
                  },
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "azPowerShellVersion": {
                    "value": "6.2"
                  },
                  "cleanupPreference": {
                    "value": "Always"
                  },
                  "timeout": {
                    "value": "PT10M"
                  },
                  "scriptContent": {
                    "value": "      Write-Host \"Start\"\n      Get-Date\n      Start-Sleep -Seconds 120\n      Write-Host \"Stop\"\n      Get-Date\n      "
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "9712062199062057663"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name of the script to be run."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzurePowerShell",
                      "allowedValues": [
                        "AzurePowerShell",
                        "AzureCLI"
                      ],
                      "metadata": {
                        "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                      }
                    },
                    "azPowerShellVersion": {
                      "type": "string",
                      "defaultValue": "3.0",
                      "metadata": {
                        "description": "Optional. Azure PowerShell module version to be used."
                      }
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure CLI module version to be used."
                      }
                    },
                    "scriptContent": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                      }
                    },
                    "primaryScriptUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                      }
                    },
                    "environmentVariables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The environment variables to pass over to the script. Must have a 'name' and a 'value' or a 'secretValue' property."
                      }
                    },
                    "supportingScriptUris": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                      }
                    },
                    "arguments": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                      }
                    },
                    "retentionInterval": {
                      "type": "string",
                      "defaultValue": "P1D",
                      "metadata": {
                        "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                      }
                    },
                    "runOnce": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                      }
                    },
                    "cleanupPreference": {
                      "type": "string",
                      "defaultValue": "Always",
                      "allowedValues": [
                        "Always",
                        "OnSuccess",
                        "OnExpiration"
                      ],
                      "metadata": {
                        "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                      }
                    },
                    "containerGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                      }
                    },
                    "timeout": {
                      "type": "string",
                      "defaultValue": "PT6H",
                      "metadata": {
                        "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "variables": {
                    "containerSettings": {
                      "containerGroupName": "[parameters('containerGroupName')]"
                    },
                    "identityType": "[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "azPowerShellVersion": "[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                        "azCliVersion": "[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                        "containerSettings": "[if(empty(parameters('containerGroupName')), null(), variables('containerSettings'))]",
                        "arguments": "[parameters('arguments')]",
                        "environmentVariables": "[if(empty(parameters('environmentVariables')), null(), parameters('environmentVariables'))]",
                        "scriptContent": "[if(empty(parameters('scriptContent')), null(), parameters('scriptContent'))]",
                        "primaryScriptUri": "[if(empty(parameters('primaryScriptUri')), null(), parameters('primaryScriptUri'))]",
                        "supportingScriptUris": "[if(empty(parameters('supportingScriptUris')), null(), parameters('supportingScriptUris'))]",
                        "cleanupPreference": "[parameters('cleanupPreference')]",
                        "forceUpdateTag": "[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                        "retentionInterval": "[parameters('retentionInterval')]",
                        "timeout": "[parameters('timeout')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "17750672647523699609"
                            }
                          },
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployment script"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the deployment script was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployment script"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[parameters('deployCustomPolicyMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Custom-Policy-Monitoring-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "alaWorkspaceId": "[if(parameters('deployAlaWorkspace'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value), createObject('value', parameters('alaWorkspaceId')))]",
                  "avdManagementPlaneLocation": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "avdWorkloadSubsId": {
                    "value": "[parameters('avdWorkloadSubsId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "2329966595084531575"
                    }
                  },
                  "parameters": {
                    "avdManagementPlaneLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location where to deploy AVD management plane."
                      }
                    },
                    "avdWorkloadSubsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AVD workload subscription ID, multiple subscriptions scenario."
                      }
                    },
                    "alaWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Exisintg Azure log analytics workspace."
                      }
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Do not modify, used to set unique value for resource deployment."
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "AVDScalingPlansDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('AVDScalingPlansLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "NetworkNICDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('NetworkNICLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "NetworkSecurityGroupsDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('NetworkSecurityGroupsLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "AzureFilesDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('AzureFilesLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "VirtualMachinesDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('VirtualMachinesLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "VirtualNetworkDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('VirtualNetworkLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "AVDAppGroupDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('AVDAppGroupsLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "AVDHostPoolsDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('AVDHostPoolsLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      },
                      "AVDWorkspaceDeployDiagnosticLogDeployLogAnalytics": {
                        "parameters": {
                          "logAnalytics": {
                            "value": "[[[parameters('logAnalytics')]"
                          },
                          "effect": {
                            "value": "[[[parameters('AVDWorkspaceLogAnalyticsEffect')]"
                          },
                          "profileName": {
                            "value": "[[[parameters('profileName')]"
                          }
                        }
                      }
                    },
                    "$fxv#1": "{\n    \"name\": \"policy-deploy-diagnostics-avd-application-group\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for AVD Application group to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for AVD Application group to stream to a Log Analytics workspace when any application group which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.\",\n      \"metadata\": {\n        \"version\": \"1.0.1\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"logsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.DesktopVirtualization/applicationGroups\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.DesktopVirtualization/applicationGroups/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"logs\": [\n                          {\n                            \"category\": \"Checkpoint\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Error\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Management\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#10": "{\n    \"name\": \"policy-set-deploy-avd-diagnostics-to-log-analytics\",\n    \"type\": \"Microsoft.Authorization/policySetDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings to AVD Landing Zone\",\n      \"description\": \"This policy set deploys the configurations of application Azure resources to forward diagnostic logs and metrics to an Azure Log Analytics workspace. See the list of policies of the services that are included \",\n      \"metadata\": {\n        \"version\": \"1.1.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"metadata\": {\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"displayName\": \"Log Analytics workspace\",\n            \"strongType\": \"omsWorkspace\"\n          },\n          \"type\": \"String\"\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"NetworkSecurityGroupsLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for Network Security Groups to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"NetworkNICLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for Network Interfaces to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"VirtualNetworkLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for Virtual Network to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"VirtualMachinesLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for Virtual Machines to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"AVDScalingPlansLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any application groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"AVDAppGroupsLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for AVD Application Groups to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for AVD Application groups to stream to a Log Analytics workspace when any application groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"AVDWorkspaceLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for AVD Workspace to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"AVDHostPoolsLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for AVD Host pools to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for AVD Host pools to stream to a Log Analytics workspace when any host pool which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        },\n        \"AzureFilesLogAnalyticsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for Azure Files to Log Analytics Workspace\",\n            \"description\": \"Deploys the diagnostic settings for Azure Files to stream to a Log Analytics workspace when any Azure Files share is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        }\n      },\n      \"policyDefinitions\": [\n        {\n          \"policyDefinitionReferenceId\": \"AVDScalingPlansDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDScalingPlans\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('AVDScalingPlansLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"AVDAppGroupDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDAppGroup\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('AVDAppGroupsLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"AVDWorkspaceDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDWorkspace\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('AVDWorkspaceLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"AVDHostPoolsDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AVDHostPools\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('AVDHostPoolsLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"NetworkSecurityGroupsDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NetworkSecurityGroups\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('NetworkSecurityGroupsLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"NetworkNICDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-NIC\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('NetworkNICLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"VirtualNetworkDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VirtualNetwork\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('VirtualNetworkLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"AzureFilesDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-AzureFiles\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('AzureFilesLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        },\n        {\n          \"policyDefinitionReferenceId\": \"VirtualMachinesDeployDiagnosticLogDeployLogAnalytics\",\n          \"policyDefinitionId\": \"${avdWorkloadSubsId}/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-VM\",\n          \"parameters\": {\n            \"logAnalytics\": {\n              \"value\": \"[[parameters('logAnalytics')]\"\n            },\n            \"effect\": {\n              \"value\": \"[[parameters('VirtualMachinesLogAnalyticsEffect')]\"\n            },\n            \"profileName\": {\n              \"value\": \"[[parameters('profileName')]\"\n            }\n          },\n          \"groupNames\": []\n        }\n   ],\n      \"policyDefinitionGroups\": null\n    }\n  }",
                    "$fxv#2": "{\n    \"name\": \"policy-deploy-diagnostics-avd-host-pool\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for AVD Host Pools to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for AVD Host Pools to stream to a Log Analytics workspace when any Host Pools which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.\",\n      \"metadata\": {\n        \"version\": \"1.1.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"logsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.DesktopVirtualization/hostpools\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.DesktopVirtualization/hostpools/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"logs\": [\n                          {\n                            \"category\": \"Checkpoint\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Error\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Management\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Connection\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"HostRegistration\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"AgentHealthStatus\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"NetworkData\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"ConnectionGraphicsData\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"SessionHostManagement\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#3": "{\n    \"name\": \"policy-deploy-diagnostics-avd-scaling-plan\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for AVD Scaling Plans to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for AVD Scaling Plans to stream to a Log Analytics workspace when any Scaling Plan which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.\",\n      \"metadata\": {\n        \"version\": \"1.0.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"logsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.DesktopVirtualization/scalingplans\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.DesktopVirtualization/scalingplans/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"logs\": [\n                          {\n                            \"category\": \"Autoscale\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#4": "{\n    \"name\": \"policy-deploy-diagnostics-avd-workspace\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for AVD Workspace to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for AVD Workspace to stream to a Log Analytics workspace when any Workspace which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all and categorys enabled.\",\n      \"metadata\": {\n        \"version\": \"1.0.1\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"logsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.DesktopVirtualization/workspaces\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.DesktopVirtualization/workspaces/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"logs\": [\n                          {\n                            \"category\": \"Checkpoint\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Error\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Management\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"Feed\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#5": "{\n    \"name\": \"policy-deploy-diagnostics-network-security-group\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for Network Security Groups to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\",\n      \"metadata\": {\n        \"version\": \"1.0.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"logsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.Network/networkSecurityGroups\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"metrics\": [],\n                        \"logs\": [\n                          {\n                            \"category\": \"NetworkSecurityGroupEvent\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"NetworkSecurityGroupRuleCounter\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#6": "{\n    \"name\": \"policy-deploy-diagnostics-nic\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for Network Interfaces to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for Network Interfaces to stream to a Log Analytics workspace when any Network Interfaces which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\",\n      \"metadata\": {\n        \"version\": \"1.0.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"metricsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable metrics\",\n            \"description\": \"Whether to enable metrics stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.Network/networkInterfaces\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/metrics.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"metricsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.Network/networkInterfaces/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"metrics\": [\n                          {\n                            \"category\": \"AllMetrics\",\n                            \"timeGrain\": null,\n                            \"enabled\": \"[parameters('metricsEnabled')]\",\n                            \"retentionPolicy\": {\n                              \"enabled\": false,\n                              \"days\": 0\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"metricsEnabled\": {\n                    \"value\": \"[parameters('metricsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#7": "{\n    \"name\": \"policy-deploy-diagnostics-virtual-machine\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for Virtual Machines to Log Analytics Workspace\",\n      \"description\": \"CUstom - Deploys the diagnostic settings for Virtual Machines to stream to a Log Analytics workspace when any Virtual Machines which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\",\n      \"metadata\": {\n        \"version\": \"1.0.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"metricsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable metrics\",\n            \"description\": \"Whether to enable metrics stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.Compute/virtualMachines\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/metrics.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"metricsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.Compute/virtualMachines/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"metrics\": [\n                          {\n                            \"category\": \"AllMetrics\",\n                            \"enabled\": \"[parameters('metricsEnabled')]\",\n                            \"retentionPolicy\": {\n                              \"enabled\": false,\n                              \"days\": 0\n                            }\n                          }\n                        ],\n                        \"logs\": []\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"metricsEnabled\": {\n                    \"value\": \"[parameters('metricsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#8": "{\n    \"name\": \"policy-deploy-diagnostics-virtual-network\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"Indexed\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for Virtual Network to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for Virtual Network to stream to a Log Analytics workspace when any Virtual Network which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\",\n      \"metadata\": {\n        \"version\": \"1.0.0\",\n        \"category\": \"Monitoring\"\n      },\n      \"parameters\": {\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\"\n          }\n        },\n        \"effect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"DeployIfNotExists\",\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          }\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"setbypolicy\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          }\n        },\n        \"metricsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable metrics\",\n            \"description\": \"Whether to enable metrics stream to the Log Analytics workspace - True or False\"\n          }\n        },\n        \"logsEnabled\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"True\",\n          \"allowedValues\": [\n            \"True\",\n            \"False\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          }\n        }\n      },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.Network/virtualNetworks\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"setByPolicy\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/metrics.enabled\",\n                  \"equals\": \"true\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"Incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"String\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"String\"\n                    },\n                    \"location\": {\n                      \"type\": \"String\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"String\"\n                    },\n                    \"metricsEnabled\": {\n                      \"type\": \"String\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"String\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.Network/virtualNetworks/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2017-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"metrics\": [\n                          {\n                            \"category\": \"AllMetrics\",\n                            \"enabled\": \"[parameters('metricsEnabled')]\",\n                            \"retentionPolicy\": {\n                              \"enabled\": false,\n                              \"days\": 0\n                            }\n                          }\n                        ],\n                        \"logs\": [\n                          {\n                            \"category\": \"VMProtectionAlerts\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('name')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  },\n                  \"metricsEnabled\": {\n                    \"value\": \"[parameters('metricsEnabled')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
                    "$fxv#9": "{\n    \"name\": \"policy-deploy-diagnostics-azure-files\",\n    \"type\": \"Microsoft.Authorization/policyDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"mode\": \"All\",\n      \"displayName\": \"Custom - Deploy Diagnostic Settings for Azure Files to Log Analytics Workspace\",\n      \"description\": \"Custom - Deploys the diagnostic settings for File Services to stream resource logs to a Log Analytics workspace when any file Service which is missing this diagnostic settings is created or updated.\",\n      \"metadata\": {\n          \"version\": \"1.0.0\",\n          \"category\": \"Monitoring\"\n        },\n      \"policyRule\": {\n        \"if\": {\n          \"field\": \"type\",\n          \"equals\": \"Microsoft.Storage/storageAccounts/fileServices\"\n        },\n        \"then\": {\n          \"effect\": \"[parameters('effect')]\",\n          \"details\": {\n            \"type\": \"Microsoft.Insights/diagnosticSettings\",\n            \"name\": \"[parameters('profileName')]\",\n            \"existenceCondition\": {\n              \"allOf\": [\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/logs.enabled\",\n                  \"equals\": \"[parameters('logsEnabled')]\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/metrics.enabled\",\n                  \"equals\": \"[parameters('metricsEnabled')]\"\n                },\n                {\n                  \"field\": \"Microsoft.Insights/diagnosticSettings/workspaceId\",\n                  \"equals\": \"[parameters('logAnalytics')]\"\n                }\n              ]\n            },\n            \"roleDefinitionIds\": [\n              \"/providers/microsoft.authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa\",\n              \"/providers/microsoft.authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293\"\n            ],\n            \"deployment\": {\n              \"properties\": {\n                \"mode\": \"incremental\",\n                \"template\": {\n                  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                  \"contentVersion\": \"1.0.0.0\",\n                  \"parameters\": {\n                    \"resourceName\": {\n                      \"type\": \"string\"\n                    },\n                    \"location\": {\n                      \"type\": \"string\"\n                    },\n                    \"logAnalytics\": {\n                      \"type\": \"string\"\n                    },\n                    \"metricsEnabled\": {\n                      \"type\": \"bool\"\n                    },\n                    \"logsEnabled\": {\n                      \"type\": \"bool\"\n                    },\n                    \"profileName\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"variables\": {},\n                  \"resources\": [\n                    {\n                      \"type\": \"Microsoft.Storage/storageAccounts/fileServices/providers/diagnosticSettings\",\n                      \"apiVersion\": \"2021-05-01-preview\",\n                      \"name\": \"[concat(parameters('resourceName'), '/', 'Microsoft.Insights/', parameters('profileName'))]\",\n                      \"location\": \"[parameters('location')]\",\n                      \"dependsOn\": [],\n                      \"properties\": {\n                        \"workspaceId\": \"[parameters('logAnalytics')]\",\n                        \"metrics\": [\n                          {\n                            \"category\": \"Transaction\",\n                            \"enabled\": \"[parameters('metricsEnabled')]\"\n                          }\n                        ],\n                        \"logs\": [\n                          {\n                            \"category\": \"StorageRead\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"StorageWrite\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          },\n                          {\n                            \"category\": \"StorageDelete\",\n                            \"enabled\": \"[parameters('logsEnabled')]\"\n                          }\n                        ]\n                      }\n                    }\n                  ],\n                  \"outputs\": {}\n                },\n                \"parameters\": {\n                  \"location\": {\n                    \"value\": \"[field('location')]\"\n                  },\n                  \"resourceName\": {\n                    \"value\": \"[field('fullName')]\"\n                  },\n                  \"logAnalytics\": {\n                    \"value\": \"[parameters('logAnalytics')]\"\n                  },\n                  \"metricsEnabled\": {\n                    \"value\": \"[parameters('metricsEnabled')]\"\n                  },\n                  \"logsEnabled\": {\n                    \"value\": \"[parameters('logsEnabled')]\"\n                  },\n                  \"profileName\": {\n                    \"value\": \"[parameters('profileName')]\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"parameters\": {\n        \"effect\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Effect\",\n            \"description\": \"Enable or disable the execution of the policy\"\n          },\n          \"allowedValues\": [\n            \"DeployIfNotExists\",\n            \"AuditIfNotExists\",\n            \"Disabled\"\n          ],\n          \"defaultValue\": \"DeployIfNotExists\"\n        },\n        \"profileName\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Profile name\",\n            \"description\": \"The diagnostic settings profile name\"\n          },\n          \"defaultValue\": \"setbypolicy\"\n        },\n        \"logAnalytics\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Log Analytics workspace\",\n            \"description\": \"Select Log Analytics workspace from dropdown list. If this workspace is outside of the scope of the assignment you must manually grant 'Log Analytics Contributor' permissions (or similar) to the policy assignment's principal ID.\",\n            \"strongType\": \"omsWorkspace\",\n            \"assignPermissions\": true\n          }\n        },\n        \"metricsEnabled\": {\n          \"type\": \"Boolean\",\n          \"metadata\": {\n            \"displayName\": \"Enable metrics\",\n            \"description\": \"Whether to enable metrics stream to the Log Analytics workspace - True or False\"\n          },\n          \"allowedValues\": [\n            true,\n            false\n          ],\n          \"defaultValue\": true\n        },\n        \"logsEnabled\": {\n          \"type\": \"Boolean\",\n          \"metadata\": {\n            \"displayName\": \"Enable logs\",\n            \"description\": \"Whether to enable logs stream to the Log Analytics workspace - True or False\"\n          },\n          \"allowedValues\": [\n            true,\n            false\n          ],\n          \"defaultValue\": true\n        }\n      }\n    }\n}",
                    "varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters": "[variables('$fxv#0')]",
                    "varCustomPolicyDefinitions": [
                      {
                        "name": "policy-deploy-diagnostics-avd-application-group",
                        "libDefinition": "[json(variables('$fxv#1'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-avd-host-pool",
                        "libDefinition": "[json(variables('$fxv#2'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-avd-scaling-plan",
                        "libDefinition": "[json(variables('$fxv#3'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-avd-workspace",
                        "libDefinition": "[json(variables('$fxv#4'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-network-security-group",
                        "libDefinition": "[json(variables('$fxv#5'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-nic",
                        "libDefinition": "[json(variables('$fxv#6'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-virtual-machine",
                        "libDefinition": "[json(variables('$fxv#7'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-virtual-network",
                        "libDefinition": "[json(variables('$fxv#8'))]"
                      },
                      {
                        "name": "policy-deploy-diagnostics-azure-files",
                        "libDefinition": "[json(variables('$fxv#9'))]"
                      }
                    ],
                    "varCustomPolicySetDefinitions": {
                      "name": "policy-set-deploy-avd-diagnostics-to-log-analytics",
                      "libSetDefinition": "[json(variables('$fxv#10'))]",
                      "libSetChildDefinitions": [
                        {
                          "definitionReferenceId": "AVDAppGroupDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-avd-application-group', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').AVDAppGroupDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "AVDHostPoolsDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-avd-host-pool', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').AVDHostPoolsDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "AVDScalingPlansDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-avd-scaling-plan', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').AVDScalingPlansDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "AVDWorkspaceDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-avd-workspace', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').AVDWorkspaceDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "NetworkSecurityGroupsDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-network-security-group', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').NetworkSecurityGroupsDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "NetworkNICDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-nic', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').NetworkNICDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "VirtualMachinesDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-virtual-machine', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').VirtualMachinesDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "VirtualNetworkDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-virtual-network', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').VirtualNetworkDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        },
                        {
                          "definitionReferenceId": "AzureFilesDeployDiagnosticLogDeployLogAnalytics",
                          "definitionId": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policyDefinitions/policy-deploy-diagnostics-azure-files', parameters('avdWorkloadSubsId'))]",
                          "definitionParameters": "[variables('varPolicySetDefinitionEsDeployDiagnosticsLoganalyticsParameters').AzureFilesDeployDiagnosticLogDeployLogAnalytics.parameters]"
                        }
                      ]
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "avdPolicyDefinitions",
                        "count": "[length(variables('varCustomPolicyDefinitions'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[if(greater(length(format('{0}-{1}', variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.name, parameters('time'))), 64), take(format('{0}-{1}', variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.name, parameters('time')), 64), format('{0}-{1}', variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.name, parameters('time')))]",
                      "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('avdManagementPlaneLocation')]"
                          },
                          "name": {
                            "value": "[variables('varCustomPolicyDefinitions')[copyIndex()].name]"
                          },
                          "displayName": {
                            "value": "[variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.properties.displayName]"
                          },
                          "metadata": {
                            "value": "[variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.properties.metadata]"
                          },
                          "mode": {
                            "value": "[variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.properties.mode]"
                          },
                          "parameters": {
                            "value": "[variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.properties.parameters]"
                          },
                          "policyRule": {
                            "value": "[variables('varCustomPolicyDefinitions')[copyIndex()].libDefinition.properties.policyRule]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "18224410441992624460"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Specifies the name of the policy definition. Maximum length is 64 characters."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 128,
                              "metadata": {
                                "description": "Optional. The display name of the policy definition. Maximum length is 128 characters."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The policy definition description."
                              }
                            },
                            "mode": {
                              "type": "string",
                              "defaultValue": "All",
                              "allowedValues": [
                                "All",
                                "Indexed",
                                "Microsoft.KeyVault.Data",
                                "Microsoft.ContainerService.Data",
                                "Microsoft.Kubernetes.Data"
                              ],
                              "metadata": {
                                "description": "Optional. The policy definition mode. Default is All, Some examples are All, Indexed, Microsoft.KeyVault.Data."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The policy Definition metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                              }
                            },
                            "parameters": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The policy definition parameters that can be used in policy definition references."
                              }
                            },
                            "policyRule": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. The Policy Rule details for the Policy Definition"
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. The subscription ID of the subscription"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[deployment().location]",
                              "metadata": {
                                "description": "Optional. Location deployment metadata."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyDefinitions",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "policyType": "Custom",
                                "mode": "[parameters('mode')]",
                                "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                                "parameters": "[if(not(empty(parameters('parameters'))), parameters('parameters'), null())]",
                                "policyRule": "[parameters('policyRule')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "Policy Definition Name"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Authorization/policyDefinitions', parameters('name'))]",
                              "metadata": {
                                "description": "Policy Definition resource ID"
                              }
                            },
                            "roleDefinitionIds": {
                              "type": "array",
                              "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', parameters('name')), '2021-06-01').policyRule.then, 'details'), if(contains(reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', parameters('name')), '2021-06-01').policyRule.then.details, 'roleDefinitionIds'), reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', parameters('name')), '2021-06-01').policyRule.then.details.roleDefinitionIds, createArray()), createArray())]",
                              "metadata": {
                                "description": "Policy Definition Role Definition IDs"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Policy-Set-Definition-{0}', parameters('time'))]",
                      "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('avdManagementPlaneLocation')]"
                          },
                          "name": {
                            "value": "[variables('varCustomPolicySetDefinitions').name]"
                          },
                          "description": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.description]"
                          },
                          "displayName": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.displayName]"
                          },
                          "metadata": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.metadata]"
                          },
                          "parameters": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.parameters]"
                          },
                          "policyDefinitions": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(variables('varCustomPolicySetDefinitions').libSetChildDefinitions)]",
                                "input": "[createObject('policyDefinitionReferenceId', variables('varCustomPolicySetDefinitions').libSetChildDefinitions[copyIndex('value')].definitionReferenceId, 'policyDefinitionId', variables('varCustomPolicySetDefinitions').libSetChildDefinitions[copyIndex('value')].definitionId, 'parameters', variables('varCustomPolicySetDefinitions').libSetChildDefinitions[copyIndex('value')].definitionParameters)]"
                              }
                            ]
                          },
                          "policyDefinitionGroups": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "12091840458791259617"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Specifies the name of the policy Set Definition (Initiative). Maximum length is 64 characters for subscription scope."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 128,
                              "metadata": {
                                "description": "Optional. The display name of the Set Definition (Initiative). Maximum length is 128 characters."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description name of the Set Definition (Initiative)"
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. The subscription ID of the subscription"
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The Set Definition (Initiative) metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                              }
                            },
                            "policyDefinitions": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The array of Policy definitions object to include for this policy set. Each object must include the Policy definition ID, and optionally other properties like parameters"
                              }
                            },
                            "policyDefinitionGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The metadata describing groups of policy definition references within the Policy Set Definition (Initiative)."
                              }
                            },
                            "parameters": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The Set Definition (Initiative) parameters that can be used in policy definition references."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[deployment().location]",
                              "metadata": {
                                "description": "Optional. Location deployment metadata."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policySetDefinitions",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "policyType": "Custom",
                                "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                                "parameters": "[if(not(empty(parameters('parameters'))), parameters('parameters'), null())]",
                                "policyDefinitions": "[parameters('policyDefinitions')]",
                                "policyDefinitionGroups": "[if(not(empty(parameters('policyDefinitionGroups'))), parameters('policyDefinitionGroups'), createArray())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "Policy Set Definition Name"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Authorization/policySetDefinitions', parameters('name'))]",
                              "metadata": {
                                "description": "Policy Set Definition resource ID"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "avdPolicyDefinitions"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Policy-Set-Assignment-{0}', parameters('time'))]",
                      "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('avdManagementPlaneLocation')]"
                          },
                          "name": {
                            "value": "[take(format('{0}-{1}', variables('varCustomPolicySetDefinitions').name, parameters('avdWorkloadSubsId')), 64)]"
                          },
                          "description": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.description]"
                          },
                          "displayName": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.displayName]"
                          },
                          "metadata": {
                            "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.metadata]"
                          },
                          "identity": {
                            "value": "SystemAssigned"
                          },
                          "roleDefinitionIds": {
                            "value": [
                              "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293"
                            ]
                          },
                          "parameters": {
                            "value": {
                              "logAnalytics": {
                                "value": "[parameters('alaWorkspaceId')]"
                              }
                            }
                          },
                          "policyDefinitionId": {
                            "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policySetDefinitions/policy-set-deploy-avd-diagnostics-to-log-analytics', parameters('avdWorkloadSubsId'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "9324846330589197778"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Specifies the name of the policy assignment. Maximum length is 64 characters for subscription scope."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. This message will be part of response in case of policy violation."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 128,
                              "metadata": {
                                "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
                              }
                            },
                            "policyDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
                              }
                            },
                            "parameters": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Parameters for the policy assignment if needed."
                              }
                            },
                            "identity": {
                              "type": "string",
                              "defaultValue": "SystemAssigned",
                              "allowedValues": [
                                "SystemAssigned",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
                              }
                            },
                            "roleDefinitionIds": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Required. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition"
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                              }
                            },
                            "nonComplianceMessage": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
                              }
                            },
                            "enforcementMode": {
                              "type": "string",
                              "defaultValue": "Default",
                              "allowedValues": [
                                "Default",
                                "DoNotEnforce"
                              ],
                              "metadata": {
                                "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce"
                              }
                            },
                            "notScopes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The policy excluded scopes"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[deployment().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. The Target Scope for the Policy. The subscription ID of the subscription for the policy assignment. If not provided, will use the current scope for deployment."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "variables": {
                            "nonComplianceMessage_var": {
                              "message": "[if(not(empty(parameters('nonComplianceMessage'))), parameters('nonComplianceMessage'), null())]"
                            },
                            "identity_var": "[if(equals(parameters('identity'), 'SystemAssigned'), createObject('type', parameters('identity')), null())]"
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                                "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]",
                                "parameters": "[parameters('parameters')]",
                                "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessage'))), array(variables('nonComplianceMessage_var')), createArray())]",
                                "enforcementMode": "[parameters('enforcementMode')]",
                                "notScopes": "[if(not(empty(parameters('notScopes'))), parameters('notScopes'), createArray())]"
                              },
                              "identity": "[variables('identity_var')]"
                            },
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('roleDefinitionIds'))]"
                              },
                              "condition": "[and(not(empty(parameters('roleDefinitionIds'))), not(equals(parameters('identity'), 'None')))]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "name": "[guid(parameters('subscriptionId'), parameters('roleDefinitionIds')[copyIndex()], parameters('location'), parameters('name'))]",
                              "properties": {
                                "roleDefinitionId": "[parameters('roleDefinitionIds')[copyIndex()]]",
                                "principalId": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name')), '2021-06-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "Policy Assignment Name"
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[if(equals(parameters('identity'), 'SystemAssigned'), reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name')), '2021-06-01', 'full').identity.principalId, '')]",
                              "metadata": {
                                "description": "Policy Assignment principal ID"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Authorization/policyAssignments', parameters('name'))]",
                              "metadata": {
                                "description": "Policy Assignment resource ID"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId(format('{0}', parameters('avdWorkloadSubsId')), 'Microsoft.Resources/deployments', format('Policy-Set-Definition-{0}', parameters('time')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Events-Performance-{0}', parameters('time'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "avdManagementPlaneLocation": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "deployAlaWorkspace": {
                    "value": "[parameters('deployAlaWorkspace')]"
                  },
                  "alaWorkspaceId": "[if(parameters('deployAlaWorkspace'), createObject('value', ''), createObject('value', parameters('alaWorkspaceId')))]",
                  "avdMonitoringRgName": {
                    "value": "[parameters('avdMonitoringRgName')]"
                  },
                  "avdAlaWorkspaceName": "[if(parameters('deployAlaWorkspace'), createObject('value', parameters('avdAlaWorkspaceName')), createObject('value', ''))]",
                  "avdWorkloadSubsId": {
                    "value": "[parameters('avdWorkloadSubsId')]"
                  },
                  "avdTags": {
                    "value": "[parameters('avdTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "7731038961734161013"
                    }
                  },
                  "parameters": {
                    "avdManagementPlaneLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location where to deploy AVD management plane."
                      }
                    },
                    "avdWorkloadSubsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AVD workload subscription ID, multiple subscriptions scenario."
                      }
                    },
                    "deployAlaWorkspace": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. create new Azure log analytics workspace."
                      }
                    },
                    "alaWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Exisintg Azure log analytics workspace."
                      }
                    },
                    "avdMonitoringRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AVD Resource Group Name for monitoring resources."
                      }
                    },
                    "avdAlaWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required.  Azure log analytics workspace name."
                      }
                    },
                    "avdTags": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Tags to be applied to resources"
                      }
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Do not modify, used to set unique value for resource deployment."
                      }
                    }
                  },
                  "variables": {
                    "varAvdExistingAlaWorkspaceName": "[if(parameters('deployAlaWorkspace'), '', split(parameters('alaWorkspaceId'), '/')[8])]",
                    "varAvdExistingAlaWorkspaceRgName": "[if(parameters('deployAlaWorkspace'), '', split(parameters('alaWorkspaceId'), '/')[4])]",
                    "varAvdExistingAlaWorkspaceSubID": "[if(parameters('deployAlaWorkspace'), '', split(parameters('alaWorkspaceId'), '/')[2])]",
                    "varAvdOsSettingsAlaWorkspaceRgName": "[if(parameters('deployAlaWorkspace'), parameters('avdMonitoringRgName'), variables('varAvdExistingAlaWorkspaceRgName'))]",
                    "varAvdOsSettingsAlaWorkspaceSubId": "[if(parameters('deployAlaWorkspace'), parameters('avdWorkloadSubsId'), variables('varAvdExistingAlaWorkspaceSubID'))]",
                    "varWindowsEvents": [
                      {
                        "name": "Microsoft-FSLogix-Apps/Operational",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "System",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          }
                        ]
                      },
                      {
                        "name": "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "Microsoft-FSLogix-Apps/Admin",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "Application",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          }
                        ]
                      }
                    ],
                    "varWindowsPerformanceCounters": [
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Disk Transfers/sec"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current Disk Queue Length"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Disk Reads/sec"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Free Space"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Read"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Disk Writes/sec"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Write"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Free Megabytes"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 60,
                        "counterName": "% Free Space"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 30,
                        "counterName": "Avg. Disk Queue Length"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Transfer"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 30,
                        "counterName": "Current Disk Queue Length"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "% Committed Bytes In Use"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Available Mbytes"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Page Faults/sec"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Pages/sec"
                      },
                      {
                        "objectName": "Network Adapter",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Bytes Sent/sec"
                      },
                      {
                        "objectName": "Network Adapter",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Bytes Received/sec"
                      },
                      {
                        "objectName": "Network Interface",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Bytes Total/sec"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk Bytes/Transfer"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk Bytes/Read"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Avg. Disk sec/Write"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Avg. Disk sec/Read"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk Bytes/Write"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Transfer"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Avg. Disk Queue Length"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "IO Write Operations/sec"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "IO Read Operations/sec"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Thread Count"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% User Time"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Working Set"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "Processor",
                        "instanceName": "_Total",
                        "intervalSeconds": 30,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "Processor Information",
                        "instanceName": "_Total",
                        "intervalSeconds": 30,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Frames Skipped/Second - Insufficient Server Resources"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Average Encoding Time"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Frames Skipped/Second - Insufficient Client Resources"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Frames Skipped/Second - Insufficient Network Resources"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Current UDP Bandwidth"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current TCP Bandwidth"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Current TCP RTT"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current UDP RTT"
                      },
                      {
                        "objectName": "System",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Processor Queue Length"
                      },
                      {
                        "objectName": "Terminal Services",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Inactive Sessions"
                      },
                      {
                        "objectName": "Terminal Services",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Total Sessions"
                      },
                      {
                        "objectName": "Terminal Services",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Active Sessions"
                      },
                      {
                        "objectName": "Terminal Services Session",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "User Input Delay per Process",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Max Input Delay"
                      },
                      {
                        "objectName": "User Input Delay per Session",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Max Input Delay"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "avdOsEvents",
                        "count": "[length(variables('varWindowsEvents'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Monitoring-OS-Events-{0}-{1}', copyIndex(), parameters('time'))]",
                      "subscriptionId": "[format('{0}', variables('varAvdOsSettingsAlaWorkspaceSubId'))]",
                      "resourceGroup": "[format('{0}', variables('varAvdOsSettingsAlaWorkspaceRgName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('WindowsEvent{0}', copyIndex())]"
                          },
                          "kind": {
                            "value": "WindowsEvent"
                          },
                          "logAnalyticsWorkspaceName": "[if(parameters('deployAlaWorkspace'), createObject('value', parameters('avdAlaWorkspaceName')), createObject('value', variables('varAvdExistingAlaWorkspaceName')))]",
                          "eventLogName": {
                            "value": "[variables('varWindowsEvents')[copyIndex()].name]"
                          },
                          "eventTypes": {
                            "value": "[variables('varWindowsEvents')[copyIndex()].types]"
                          },
                          "tags": {
                            "value": "[parameters('avdTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "4591480837530398732"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "AzureActivityLog",
                              "allowedValues": [
                                "AzureActivityLog",
                                "WindowsEvent",
                                "WindowsPerformanceCounter",
                                "IISLogs",
                                "LinuxSyslog",
                                "LinuxSyslogCollection",
                                "LinuxPerformanceObject",
                                "LinuxPerformanceCollection"
                              ],
                              "metadata": {
                                "description": "Required. The kind of the DataSource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "linkedResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the resource to be linked."
                              }
                            },
                            "eventLogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                              }
                            },
                            "eventTypes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                              }
                            },
                            "objectName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "instanceName": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "intervalSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "performanceCounters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                              }
                            },
                            "counterName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                              }
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                              }
                            },
                            "syslogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                              }
                            },
                            "syslogSeverities": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed data source."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the data source is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed data source."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "avdOsPerformanceCounters",
                        "count": "[length(variables('varWindowsPerformanceCounters'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Monitoring-OS-Performance-Counters-{0}-{1}', copyIndex(), parameters('time'))]",
                      "subscriptionId": "[format('{0}', variables('varAvdOsSettingsAlaWorkspaceSubId'))]",
                      "resourceGroup": "[format('{0}', variables('varAvdOsSettingsAlaWorkspaceRgName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('WindowsPerformanceCounter{0}', copyIndex())]"
                          },
                          "kind": {
                            "value": "WindowsPerformanceCounter"
                          },
                          "logAnalyticsWorkspaceName": "[if(parameters('deployAlaWorkspace'), createObject('value', parameters('avdAlaWorkspaceName')), createObject('value', variables('varAvdExistingAlaWorkspaceName')))]",
                          "objectName": {
                            "value": "[variables('varWindowsPerformanceCounters')[copyIndex()].objectName]"
                          },
                          "instanceName": {
                            "value": "[variables('varWindowsPerformanceCounters')[copyIndex()].instanceName]"
                          },
                          "intervalSeconds": {
                            "value": "[variables('varWindowsPerformanceCounters')[copyIndex()].intervalSeconds]"
                          },
                          "counterName": {
                            "value": "[variables('varWindowsPerformanceCounters')[copyIndex()].counterName]"
                          },
                          "tags": {
                            "value": "[parameters('avdTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "4591480837530398732"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "AzureActivityLog",
                              "allowedValues": [
                                "AzureActivityLog",
                                "WindowsEvent",
                                "WindowsPerformanceCounter",
                                "IISLogs",
                                "LinuxSyslog",
                                "LinuxSyslogCollection",
                                "LinuxPerformanceObject",
                                "LinuxPerformanceCollection"
                              ],
                              "metadata": {
                                "description": "Required. The kind of the DataSource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "linkedResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the resource to be linked."
                              }
                            },
                            "eventLogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                              }
                            },
                            "eventTypes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                              }
                            },
                            "objectName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "instanceName": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "intervalSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "performanceCounters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                              }
                            },
                            "counterName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                              }
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                              }
                            },
                            "syslogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                              }
                            },
                            "syslogSeverities": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed data source."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the data source is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed data source."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "avdOsEvents"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time')))]"
              ]
            }
          ],
          "outputs": {
            "avdAlaWorkspaceResourceId": {
              "type": "string",
              "value": "[if(parameters('deployAlaWorkspace'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value, parameters('alaWorkspaceId'))]"
            },
            "avdAlaWorkspaceId": {
              "type": "string",
              "value": "[if(parameters('deployAlaWorkspace'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time'))), '2020-10-01').outputs.logAnalyticsWorkspaceId.value, parameters('alaWorkspaceId'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(parameters('avdDeployMonitoring'), parameters('deployCustomPolicyNetworking'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[if(greater(length(format('Enable-Azure-Policy-for-Netwok-Security-{0}', parameters('time'))), 64), take(format('Enable-Azure-Policy-for-Netwok-Security-{0}', parameters('time')), 64), format('Enable-Azure-Policy-for-Netwok-Security-{0}', parameters('time')))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "alaWorkspaceResourceId": "[if(and(parameters('avdDeployMonitoring'), parameters('deployAlaWorkspace')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceResourceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId')))]",
          "alaWorkspaceId": "[if(and(parameters('avdDeployMonitoring'), parameters('deployAlaWorkspace')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId')))]",
          "avdManagementPlaneLocation": {
            "value": "[parameters('avdManagementPlaneLocation')]"
          },
          "avdWorkloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "avdMonitoringRgName": {
            "value": "[variables('varAvdMonitoringRgName')]"
          },
          "stgAccountForFlowLogsId": "[if(parameters('deployStgAccountForFlowLogs'), createObject('value', ''), createObject('value', parameters('stgAccountForFlowLogsId')))]",
          "stgAccountForFlowLogsName": "[if(parameters('deployStgAccountForFlowLogs'), createObject('value', variables('varStgAccountForFlowLogsName')), createObject('value', ''))]",
          "avdTags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varAllResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "12963854926804769085"
            }
          },
          "parameters": {
            "avdManagementPlaneLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy AVD management plane."
              }
            },
            "avdWorkloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "avdMonitoringRgName": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD Resource Group Name for monitoring resources."
              }
            },
            "stgAccountForFlowLogsName": {
              "type": "string",
              "metadata": {
                "description": "Required.  Azure Storage Account name."
              }
            },
            "alaWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required.  Azure log analytics workspace Resource Id ."
              }
            },
            "alaWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Required.  Azure log analytics workspace ID."
              }
            },
            "stgAccountForFlowLogsId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Required. Existing Azure Storage account for NSG flow logs. (Default: )"
              }
            },
            "avdTags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            }
          },
          "variables": {
            "$fxv#0": "{\n    \"name\": \"policy-set-deploy-avd-diagnostics-to-log-analytics\",\n    \"type\": \"Microsoft.Authorization/policySetDefinitions\",\n    \"apiVersion\": \"2021-06-01\",\n    \"scope\": null,\n    \"properties\": {\n      \"policyType\": \"Custom\",\n      \"displayName\": \"Custom - Flow logs should be configured and enabled for every network security group\",\n      \"description\": \"Audit for network security groups to verify if flow logs are configured and if flow log status is enabled. Enabling flow logs allows to log information about IP traffic flowing through network security group. It can be used for optimizing network flows, monitoring throughput, verifying compliance, detecting intrusions and more. \",\n      \"metadata\": {\n        \"version\": \"1.1.0\",\n        \"category\": \"Network\"\n      },\n      \"parameters\": {\n        \"RemediateNsgFlowLogsEffect\": {\n            \"type\": \"String\",\n            \"defaultValue\": \"DeployIfNotExists\",\n            \"allowedValues\": [\n              \"DeployIfNotExists\",\n              \"Disabled\"\n            ],\n            \"metadata\": {\n              \"displayName\": \"Deploy NSG flow Logs to Log Analytics workspace and Storage Account\",\n              \"description\": \"If it already has traffic analytics enabled, then policy will overwrite its existing settings with the ones provided during policy creation. Traffic analytics is a cloud-based solution that provides visibility into user and application activity in cloud networks.\"\n            }\n        },\n        \"nsgRegion\": {\n          \"metadata\": {\n            \"description\": \"Configures for network security groups in the selected region only.\",\n            \"displayName\": \"Network security group Region\"\n          },\n          \"type\": \"String\"\n        },\n        \"storageId\": {\n          \"type\": \"String\",\n          \"metadata\": {\n            \"displayName\": \"Storage Resource ID\",\n            \"description\": \"Resource ID of the storage account where the flow logs are written. Make sure this storage account is located in the selected network security group region. The format must be: '/subscriptions/{subscription id}/resourceGroups/{resourceGroup name}/providers/Microsoft.Storage/storageAccounts/{storage account name}\",\n            \"assignPermissions\": true\n          }\n        },\n        \"timeInterval\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Traffic analytics processing interval in minutes\",\n              \"description\": \"Traffic analytics processes blobs at the selected frequency.\"\n            },\n            \"allowedValues\": [\n              \"10\",\n              \"60\"\n            ],\n            \"defaultValue\": \"60\"\n          },\n          \"workspaceResourceId\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Workspace resource ID\",\n              \"description\": \"Log Analytics workspace resource id\",\n              \"assignPermissions\": true\n            }\n          },\n          \"workspaceRegion\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Workspace region\",\n              \"description\": \"Log Analytics workspace region\",\n              \"strongType\": \"location\"\n            }\n          },\n          \"workspaceId\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Workspace ID\",\n              \"description\": \"Log Analytics workspace GUID\"\n            }\n          },\n          \"networkWatcherRG\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Network Watcher resource group\",\n              \"description\": \"The Network Watcher regional instance is present in this resource group. The network security group flow logs resources are also created. This is used only if a deployment is required. By default, it is named 'NetworkWatcherRG'.\",\n              \"strongType\": \"existingResourceGroups\"\n            }\n          },\n          \"networkWatcherName\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Network Watcher name\",\n              \"description\": \"The name of the network watcher under which the flow log resources are created. Make sure it belongs to the same region as the network security group.\"\n            }\n          },\n          \"retentionDays\": {\n            \"type\": \"String\",\n            \"metadata\": {\n              \"displayName\": \"Number of days to retain flowlogs\",\n              \"description\": \"The number of days for which flowlog data will be retained in storage account. If you want to retain data forever and do not want to apply any retention policy, set retention (days) to 0.\"\n            },\n            \"defaultValue\": \"30\"\n          },\n        \"AuditForFlowLogsEffect\": {\n          \"type\": \"String\",\n          \"defaultValue\": \"Audit\",\n          \"allowedValues\": [\n            \"Audit\",\n            \"Disabled\"\n          ],\n          \"metadata\": {\n            \"displayName\": \"Deploy Diagnostic Settings for Network Security Groups to Log Analytics workspace\",\n            \"description\": \"Deploys the diagnostic settings for Network Security Groups to stream to a Log Analytics workspace when any Network Security Groups which is missing this diagnostic settings is created or updated. The Policy will set the diagnostic with all metrics and category enabled\"\n          }\n        }\n      },\n      \"policyDefinitions\": [\n        {\n          \"policyDefinitionReferenceId\": \"AuditForFlowLogs\",\n          \"policyDefinitionId\": \"/providers/Microsoft.Authorization/policyDefinitions/c251913d-7d24-4958-af87-478ed3b9ba41\",\n          \"parameters\": {\n            \"effect\": {\n              \"value\": \"[parameters('AuditForFlowLogsEffect')]\"\n            }\n          },\n          \"groupNames\": [\n            \"AUDIT\"\n          ]\n        },\n        {\n            \"policyDefinitionReferenceId\": \"RemediateNsgFlowLogs\",\n            \"policyDefinitionId\": \"/providers/Microsoft.Authorization/policyDefinitions/5e1cd26a-5090-4fdb-9d6a-84a90335e22d\",\n            \"parameters\":{\n              \"effect\": {\n                \"value\": \"[parameters('RemediateNsgFlowLogsEffect')]\"\n            },\n            \"nsgRegion\": { \"value\": \"[parameters('nsgRegion')]\" },\n            \"storageId\": { \"value\": \"[parameters('storageId')]\" },\n            \"networkWatcherRG\": { \"value\": \"[parameters('networkWatcherRG')]\" },\n            \"networkWatcherName\": { \"value\": \"[parameters('networkWatcherName')]\" },\n            \"timeInterval\": { \"value\": \"[parameters('timeInterval')]\" },\n            \"workspaceResourceId\": { \"value\": \"[parameters('workspaceResourceId')]\" },\n            \"workspaceRegion\": { \"value\": \"[parameters('workspaceRegion')]\" },\n            \"workspaceId\": { \"value\": \"[parameters('workspaceId')]\" },\n            \"retentionDays\":{ \"value\": \"[parameters('retentionDays')]\" }\n            },\n            \"groupNames\" :[\n                \"REMEDIATE\"\n            ]\n\n        }\n   ],\n      \"policyDefinitionGroups\": [\n        {\n            \"name\": \"AUDIT\",\n            \"displayName\": \"Report on NSGs without the Flow Logs enabled\"\n        },\n        {\n            \"name\": \"REMEDIATE\",\n            \"displayName\": \"Remediate/Enable Flow Logs on NSGs\"\n        }\n      ]\n    }\n  }",
            "varCustomPolicySetDefinitions": {
              "name": "policy-set-deploy-networking",
              "libSetDefinition": "[json(variables('$fxv#0'))]"
            }
          },
          "resources": [
            {
              "condition": "[empty(parameters('stgAccountForFlowLogsId'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[if(greater(length(format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time'))), 64), take(format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time')), 64), format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time')))]",
              "resourceGroup": "[format('{0}', parameters('avdMonitoringRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "name": {
                    "value": "[parameters('stgAccountForFlowLogsName')]"
                  },
                  "storageAccountKind": {
                    "value": "StorageV2"
                  },
                  "publicNetworkAccess": {
                    "value": "Disabled"
                  },
                  "networkAcls": {
                    "value": {
                      "bypass": "AzureServices",
                      "defaultAction": "Deny"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "5098869028723443761"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Storage Account. Autogenerated with a unique string if not provided."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "basetime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "cMKKeyVaultResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from."
                      }
                    },
                    "cMKKeyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
                      }
                    },
                    "cMKUserAssignedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
                      }
                    },
                    "cMKKeyVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "maxNameLength": 24,
                    "uniqueStorageNameUntrim": "[uniqueString(format('Storage Account{0}', parameters('basetime')))]",
                    "uniqueStorageName": "[if(greater(length(variables('uniqueStorageNameUntrim')), variables('maxNameLength')), substring(variables('uniqueStorageNameUntrim'), 0, variables('maxNameLength')), variables('uniqueStorageNameUntrim'))]",
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
                    "enableReferencedModulesTelemetry": false
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                            "table": {
                              "enabled": true
                            },
                            "queue": {
                              "enabled": true
                            }
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                          "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                          "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(not(empty(parameters('networkAcls'))), parameters('networkAcls').bypass, null()), 'defaultAction', if(not(empty(parameters('networkAcls'))), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'virtualNetworkRules')), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'ipRules')), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "name": "[format('{0}-{1}-lock', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "7307617091553145483"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-StorageAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "[parameters('privateEndpoints')[copyIndex()].service]"
                            ]
                          },
                          "name": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'name'), createObject('value', parameters('privateEndpoints')[copyIndex()].name), createObject('value', format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex())))]",
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location]"
                          },
                          "lock": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'lock'), createObject('value', parameters('privateEndpoints')[copyIndex()].lock), createObject('value', parameters('lock')))]",
                          "privateDnsZoneGroup": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject('value', parameters('privateEndpoints')[copyIndex()].privateDnsZoneGroup), createObject('value', createObject()))]",
                          "roleAssignments": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'roleAssignments'), createObject('value', parameters('privateEndpoints')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "tags": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject('value', parameters('privateEndpoints')[copyIndex()].tags), createObject('value', createObject()))]",
                          "manualPrivateLinkServiceConnections": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createObject('value', parameters('privateEndpoints')[copyIndex()].manualPrivateLinkServiceConnections), createObject('value', createArray()))]",
                          "customDnsConfigs": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createObject('value', parameters('privateEndpoints')[copyIndex()].customDnsConfigs), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "1032327575867298469"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              },
                              "allowedValues": [
                                "",
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "variables": {
                            "enableReferencedModulesTelemetry": false
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2021-08-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                },
                                "customDnsConfigs": "[parameters('customDnsConfigs')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('lock')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2017-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "5333437997582427841"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "maxLength": 5,
                                      "minLength": 1,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PrivateEndpoint-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                  "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "12655027121926365790"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    },
                                    "condition": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                      }
                                    },
                                    "conditionVersion": {
                                      "type": "string",
                                      "defaultValue": "2.0",
                                      "allowedValues": [
                                        "2.0"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Version of the condition."
                                      }
                                    },
                                    "delegatedManagedIdentityResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Id of the delegated managed identity resource."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2021-08-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "4365881297100810646"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "2420546046425144725"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service."
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "enableReferencedModulesTelemetry": false
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "15100624959249557035"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "enableReferencedModulesTelemetry": false
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]",
                                          "enableDefaultTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "17794682189008442523"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent blob service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            },
                                            "enableDefaultTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "condition": "[parameters('enableDefaultTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": []
                                                }
                                              }
                                            },
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2021-09-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "16889580375143822891"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "15741468441077731908"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service."
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "enableReferencedModulesTelemetry": false
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "15458324113608899731"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "8496884097482476995"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "315886999947723370"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "enableReferencedModulesTelemetry": false
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "7728564275860205676"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent queue service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "16611601632006802827"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "11114219731878994182"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ],
                            "enableReferencedModulesTelemetry": false
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6216064727411757092"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent table service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-09-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-09-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[if(greater(length(format('NetPolicySetDefini-{0}', parameters('time'))), 64), take(format('AVD-Network-Policy-Set-Definition-{0}', parameters('time')), 64), format('AVD-Network-Policy-Set-Definition-{0}', parameters('time')))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "name": {
                    "value": "[variables('varCustomPolicySetDefinitions').name]"
                  },
                  "description": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.description]"
                  },
                  "displayName": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.displayName]"
                  },
                  "metadata": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.metadata]"
                  },
                  "parameters": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.parameters]"
                  },
                  "policyDefinitions": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.policyDefinitions]"
                  },
                  "policyDefinitionGroups": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.policyDefinitionGroups]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "12091840458791259617"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Specifies the name of the policy Set Definition (Initiative). Maximum length is 64 characters for subscription scope."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "defaultValue": "",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Optional. The display name of the Set Definition (Initiative). Maximum length is 128 characters."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description name of the Set Definition (Initiative)"
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. The subscription ID of the subscription"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The Set Definition (Initiative) metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                      }
                    },
                    "policyDefinitions": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The array of Policy definitions object to include for this policy set. Each object must include the Policy definition ID, and optionally other properties like parameters"
                      }
                    },
                    "policyDefinitionGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The metadata describing groups of policy definition references within the Policy Set Definition (Initiative)."
                      }
                    },
                    "parameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The Set Definition (Initiative) parameters that can be used in policy definition references."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location deployment metadata."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policySetDefinitions",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "policyType": "Custom",
                        "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                        "parameters": "[if(not(empty(parameters('parameters'))), parameters('parameters'), null())]",
                        "policyDefinitions": "[parameters('policyDefinitions')]",
                        "policyDefinitionGroups": "[if(not(empty(parameters('policyDefinitionGroups'))), parameters('policyDefinitionGroups'), createArray())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "Policy Set Definition Name"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Authorization/policySetDefinitions', parameters('name'))]",
                      "metadata": {
                        "description": "Policy Set Definition resource ID"
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[if(greater(length(format('NetPolicySetAssign-{0}', parameters('time'))), 64), take(format('AVD-NetPolicySetAssign-{0}', parameters('time')), 64), format('AVD-NetPolicySetAssign-{0}', parameters('time')))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": "[if(greater(length(format('{0}-{1}', variables('varCustomPolicySetDefinitions').name, parameters('avdWorkloadSubsId'))), 64), createObject('value', take(format('{0}-{1}', variables('varCustomPolicySetDefinitions').name, parameters('avdWorkloadSubsId')), 64)), createObject('value', format('{0}-{1}', variables('varCustomPolicySetDefinitions').name, parameters('avdWorkloadSubsId'))))]",
                  "displayName": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.displayName]"
                  },
                  "description": {
                    "value": "[variables('varCustomPolicySetDefinitions').libSetDefinition.properties.description]"
                  },
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "policyDefinitionId": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/policySetDefinitions/{1}', parameters('avdWorkloadSubsId'), variables('varCustomPolicySetDefinitions').name)]"
                  },
                  "identity": {
                    "value": "SystemAssigned"
                  },
                  "roleDefinitionIds": {
                    "value": [
                      "/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c"
                    ]
                  },
                  "parameters": {
                    "value": {
                      "nsgRegion": {
                        "value": "[parameters('avdManagementPlaneLocation')]"
                      },
                      "storageId": {
                        "value": "[if(empty(parameters('stgAccountForFlowLogsId')), format('{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', if(greater(length(format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time'))), 64), take(format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time')), 64), format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time')))), '2020-10-01').outputs.resourceId.value), parameters('stgAccountForFlowLogsId'))]"
                      },
                      "workspaceResourceId": {
                        "value": "[parameters('alaWorkspaceResourceId')]"
                      },
                      "workspaceRegion": {
                        "value": "[parameters('avdManagementPlaneLocation')]"
                      },
                      "workspaceId": {
                        "value": "[parameters('alaWorkspaceId')]"
                      },
                      "networkWatcherRG": {
                        "value": "NetworkWatcherRG"
                      },
                      "networkWatcherName": {
                        "value": "[format('NetworkWatcher_{0}', parameters('avdManagementPlaneLocation'))]"
                      }
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "9324846330589197778"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 64 characters for subscription scope."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This message will be part of response in case of policy violation."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "defaultValue": "",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
                      }
                    },
                    "policyDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
                      }
                    },
                    "parameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters for the policy assignment if needed."
                      }
                    },
                    "identity": {
                      "type": "string",
                      "defaultValue": "SystemAssigned",
                      "allowedValues": [
                        "SystemAssigned",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
                      }
                    },
                    "roleDefinitionIds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                      }
                    },
                    "nonComplianceMessage": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
                      }
                    },
                    "enforcementMode": {
                      "type": "string",
                      "defaultValue": "Default",
                      "allowedValues": [
                        "Default",
                        "DoNotEnforce"
                      ],
                      "metadata": {
                        "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce"
                      }
                    },
                    "notScopes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy excluded scopes"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. The Target Scope for the Policy. The subscription ID of the subscription for the policy assignment. If not provided, will use the current scope for deployment."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "nonComplianceMessage_var": {
                      "message": "[if(not(empty(parameters('nonComplianceMessage'))), parameters('nonComplianceMessage'), null())]"
                    },
                    "identity_var": "[if(equals(parameters('identity'), 'SystemAssigned'), createObject('type', parameters('identity')), null())]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                        "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "policyDefinitionId": "[parameters('policyDefinitionId')]",
                        "parameters": "[parameters('parameters')]",
                        "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessage'))), array(variables('nonComplianceMessage_var')), createArray())]",
                        "enforcementMode": "[parameters('enforcementMode')]",
                        "notScopes": "[if(not(empty(parameters('notScopes'))), parameters('notScopes'), createArray())]"
                      },
                      "identity": "[variables('identity_var')]"
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('roleDefinitionIds'))]"
                      },
                      "condition": "[and(not(empty(parameters('roleDefinitionIds'))), not(equals(parameters('identity'), 'None')))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('roleDefinitionIds')[copyIndex()], parameters('location'), parameters('name'))]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionIds')[copyIndex()]]",
                        "principalId": "[reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name')), '2021-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "Policy Assignment Name"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[if(equals(parameters('identity'), 'SystemAssigned'), reference(subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name')), '2021-06-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "Policy Assignment principal ID"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Authorization/policyAssignments', parameters('name'))]",
                      "metadata": {
                        "description": "Policy Assignment resource ID"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(format('{0}', parameters('avdWorkloadSubsId')), 'Microsoft.Resources/deployments', if(greater(length(format('NetPolicySetDefini-{0}', parameters('time'))), 64), take(format('AVD-Network-Policy-Set-Definition-{0}', parameters('time')), 64), format('AVD-Network-Policy-Set-Definition-{0}', parameters('time'))))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}', parameters('avdMonitoringRgName'))), 'Microsoft.Resources/deployments', if(greater(length(format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time'))), 64), take(format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time')), 64), format('Deploy-Stg-Account-for-Flow-Logs-{0}-{1}', parameters('stgAccountForFlowLogsName'), parameters('time'))))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[parameters('createAvdVnet')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Networking-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "avdApplicationSecurityGroupName": {
            "value": "[variables('varAvdApplicationSecurityGroupName')]"
          },
          "avdComputeObjectsRgName": {
            "value": "[variables('varAvdComputeObjectsRgName')]"
          },
          "avdNetworkObjectsRgName": {
            "value": "[variables('varAvdNetworkObjectsRgName')]"
          },
          "avdNetworksecurityGroupName": {
            "value": "[variables('varAvdNetworksecurityGroupName')]"
          },
          "avdRouteTableName": {
            "value": "[variables('varAvdRouteTableName')]"
          },
          "avdVnetworkAddressPrefixes": {
            "value": "[parameters('avdVnetworkAddressPrefixes')]"
          },
          "avdVnetworkName": {
            "value": "[variables('varAvdVnetworkName')]"
          },
          "avdVnetworkPeeringName": "[if(equals(parameters('avdIdentityServiceProvider'), 'AAD'), createObject('value', ''), createObject('value', variables('varAvdVnetworkPeeringName')))]",
          "avdVnetworkSubnetName": {
            "value": "[variables('varAvdVnetworkSubnetName')]"
          },
          "createAvdVnet": {
            "value": "[parameters('createAvdVnet')]"
          },
          "createAvdVnetPeering": {
            "value": "[variables('varCreateAvdVnetPeering')]"
          },
          "vNetworkGatewayOnHub": {
            "value": "[parameters('vNetworkGatewayOnHub')]"
          },
          "existingHubVnetResourceId": "[if(equals(parameters('avdIdentityServiceProvider'), 'AAD'), createObject('value', ''), createObject('value', parameters('existingHubVnetResourceId')))]",
          "avdSessionHostLocation": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "avdVnetworkSubnetAddressPrefix": {
            "value": "[parameters('avdVnetworkSubnetAddressPrefix')]"
          },
          "avdWorkloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "dnsServers": {
            "value": "[variables('varDnsServers')]"
          },
          "avdTags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varCommonResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]",
          "avdAlaWorkspaceResourceId": "[if(parameters('avdDeployMonitoring'), if(parameters('deployAlaWorkspace'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceResourceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId'))), createObject('value', ''))]",
          "avdDiagnosticLogsRetentionInDays": {
            "value": "[parameters('avdAlaWorkspaceDataRetention')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "5331669982050122973"
            }
          },
          "parameters": {
            "avdWorkloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario"
              }
            },
            "avdComputeObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for the AVD session hosts"
              }
            },
            "createAvdVnet": {
              "type": "bool",
              "metadata": {
                "description": "Create new virtual network"
              }
            },
            "avdNetworkObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Optional. If new virtual network required for the AVD machines. Resource Group name for the virtual network."
              }
            },
            "avdVnetworkName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Name of the virtual network if required to be created."
              }
            },
            "avdNetworksecurityGroupName": {
              "type": "string",
              "metadata": {
                "description": "Network Security Group Name"
              }
            },
            "avdApplicationSecurityGroupName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Created if a new VNet for AVD is created. Application Security Group (ASG) for the session hosts."
              }
            },
            "avdRouteTableName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Created if the new VNet for AVD is created. Route Table name."
              }
            },
            "vNetworkGatewayOnHub": {
              "type": "bool",
              "metadata": {
                "description": "Does the hub contain a virtual network gateway."
              }
            },
            "existingHubVnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Existing hub virtual network for peering."
              }
            },
            "avdVnetworkPeeringName": {
              "type": "string",
              "metadata": {
                "description": "VNet peering name for AVD VNet to vHub."
              }
            },
            "createAvdVnetPeering": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Create virtual network peering to hub."
              }
            },
            "avdVnetworkAddressPrefixes": {
              "type": "string",
              "metadata": {
                "description": "AVD VNet address prefixes."
              }
            },
            "avdVnetworkSubnetName": {
              "type": "string",
              "metadata": {
                "description": "AVD subnet Name."
              }
            },
            "avdVnetworkSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "AVD VNet subnet address prefix."
              }
            },
            "dnsServers": {
              "type": "array",
              "metadata": {
                "description": "custom DNS servers IPs"
              }
            },
            "avdSessionHostLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Required. Location where to deploy compute services."
              }
            },
            "avdTags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "avdAlaWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Optional. Log analytics workspace for diagnostic logs."
              }
            },
            "avdDiagnosticLogsRetentionInDays": {
              "type": "int",
              "metadata": {
                "description": "Optional. Diagnostic logs retention."
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment"
              }
            }
          },
          "variables": {
            "varAvdNetworkSecurityGroupDiagnostic": [
              "NetworkSecurityGroupEvent",
              "NetworkSecurityGroupRuleCounter"
            ],
            "varAvdVirtualNetworkLogsDiagnostic": [
              "VMProtectionAlerts"
            ],
            "varAvdVirtualNetworkMetricsDiagnostic": [
              "AllMetrics"
            ],
            "varCreateAvdStaicRoute": true
          },
          "resources": [
            {
              "condition": "[parameters('createAvdVnet')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('NSG-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdNetworkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdNetworksecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('avdSessionHostLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('avdAlaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('avdDiagnosticLogsRetentionInDays')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[variables('varAvdNetworkSecurityGroupDiagnostic')]"
                  },
                  "securityRules": {
                    "value": [
                      {
                        "name": "AVDServiceTraffic",
                        "properties": {
                          "priority": 100,
                          "access": "Allow",
                          "description": "Session host traffic to AVD control plane",
                          "destinationAddressPrefix": "WindowsVirtualDesktop",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureCloud",
                        "properties": {
                          "priority": 110,
                          "access": "Allow",
                          "description": "Session host traffic to Azure cloud services",
                          "destinationAddressPrefix": "AzureCloud",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "8443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureMonitor",
                        "properties": {
                          "priority": 120,
                          "access": "Allow",
                          "description": "Session host traffic to Azure Monitor",
                          "destinationAddressPrefix": "AzureMonitor",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureMarketPlace",
                        "properties": {
                          "priority": 130,
                          "access": "Allow",
                          "description": "Session host traffic to Azure Monitor",
                          "destinationAddressPrefix": "AzureFrontDoor.Frontend",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "443",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "WindowsActivationKMS",
                        "properties": {
                          "priority": 140,
                          "access": "Allow",
                          "description": "Session host traffic to Windows license activation services",
                          "destinationAddressPrefix": "23.102.135.246",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "1688",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "AzureInstanceMetadata",
                        "properties": {
                          "priority": 150,
                          "access": "Allow",
                          "description": "Session host traffic to Azure instance metadata",
                          "destinationAddressPrefix": "169.254.169.254",
                          "direction": "Outbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "80",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      },
                      {
                        "name": "RDPShortpath",
                        "properties": {
                          "priority": 150,
                          "access": "Allow",
                          "description": "Session host traffic to Azure instance metadata",
                          "destinationAddressPrefix": "VirtualNetwork",
                          "direction": "Inbound",
                          "sourcePortRange": "*",
                          "destinationPortRange": "3390",
                          "protocol": "Udp",
                          "sourceAddressPrefix": "VirtualNetwork"
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "832944999867450179"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "allowedValues": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-securityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6862585747269866531"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule"
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the network security group to deploy the security rule into"
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule"
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the security rule"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the security rule"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-NSG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "16512633092172013668"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the network security group"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the network security group"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAvdVnet')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('ASG-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdComputeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdApplicationSecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('avdSessionHostLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "11525552763319216716"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/applicationSecurityGroups",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/applicationSecurityGroups/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "applicationSecurityGroup_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AppSecurityGroup-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/applicationSecurityGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "9244123131395790076"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                              "ExpressRoute Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7896-14b4-4889-afef-fbb65a96e5a2')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Network/applicationSecurityGroups/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/applicationSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the application security group was deployed into"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/applicationSecurityGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the application security group"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the application security group"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAvdVnet')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Route-Table-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdNetworkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdRouteTableName')]"
                  },
                  "location": {
                    "value": "[parameters('avdSessionHostLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "routes": "[if(variables('varCreateAvdStaicRoute'), createObject('value', createArray(createObject('name', 'AVDServiceTraffic', 'properties', createObject('addressPrefix', 'WindowsVirtualDesktop', 'hasBgpOverride', true(), 'nextHopType', 'Internet')))), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "10911519173757375123"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of Routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "routeTable_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RouteTable-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "14578912620199586992"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Network/routeTables/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the route table was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the route table"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the route table"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('createAvdVnet')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('vNet-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdNetworkObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdVnetworkName')]"
                  },
                  "location": {
                    "value": "[parameters('avdSessionHostLocation')]"
                  },
                  "addressPrefixes": {
                    "value": "[array(parameters('avdVnetworkAddressPrefixes'))]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "virtualNetworkPeerings": "[if(parameters('createAvdVnetPeering'), createObject('value', createArray(createObject('remoteVirtualNetworkId', parameters('existingHubVnetResourceId'), 'name', parameters('avdVnetworkPeeringName'), 'allowForwardedTraffic', true(), 'allowGatewayTransit', false(), 'allowVirtualNetworkAccess', true(), 'doNotVerifyRemoteGateways', true(), 'useRemoteGateways', if(parameters('vNetworkGatewayOnHub'), true(), false()), 'remotePeeringEnabled', true(), 'remotePeeringName', parameters('avdVnetworkPeeringName'), 'remotePeeringAllowForwardedTraffic', true(), 'remotePeeringAllowGatewayTransit', if(parameters('vNetworkGatewayOnHub'), true(), false()), 'remotePeeringAllowVirtualNetworkAccess', true(), 'remotePeeringDoNotVerifyRemoteGateways', true(), 'remotePeeringUseRemoteGateways', false()))), createObject('value', createArray()))]",
                  "subnets": {
                    "value": [
                      {
                        "name": "[parameters('avdVnetworkSubnetName')]",
                        "addressPrefix": "[parameters('avdVnetworkSubnetAddressPrefix')]",
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled",
                        "networkSecurityGroupId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdNetworkObjectsRgName'))), 'Microsoft.Resources/deployments', format('NSG-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value]",
                        "routeTableId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdNetworkObjectsRgName'))), 'Microsoft.Resources/deployments', format('Route-Table-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value]"
                      }
                    ]
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('avdAlaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('avdDiagnosticLogsRetentionInDays')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[variables('varAvdVirtualNetworkLogsDiagnostic')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[variables('varAvdVirtualNetworkMetricsDiagnostic')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "12224047620434768806"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Virtual Network (vNet) Name."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "virtualNetworkPeerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Virtual Network Peerings configurations"
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "VMProtectionAlerts"
                      ],
                      "allowedValues": [
                        "VMProtectionAlerts"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "dnsServers_var": {
                      "dnsServers": "[array(parameters('dnsServers'))]"
                    },
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                                "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIpConfigurations, createArray())]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), json('null'))]",
                                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), json('null'))]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), json('null'))]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanId'))), variables('ddosProtectionPlan'), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServers_var'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(parameters('subnets'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('subnets')[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[parameters('subnets')[copyIndex()].addressPrefix]"
                          },
                          "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex()], 'addressPrefixes'), createObject('value', parameters('subnets')[copyIndex()].addressPrefixes), createObject('value', createArray()))]",
                          "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex()], 'applicationGatewayIpConfigurations'), createObject('value', parameters('subnets')[copyIndex()].applicationGatewayIpConfigurations), createObject('value', createArray()))]",
                          "delegations": "[if(contains(parameters('subnets')[copyIndex()], 'delegations'), createObject('value', parameters('subnets')[copyIndex()].delegations), createObject('value', createArray()))]",
                          "ipAllocations": "[if(contains(parameters('subnets')[copyIndex()], 'ipAllocations'), createObject('value', parameters('subnets')[copyIndex()].ipAllocations), createObject('value', createArray()))]",
                          "natGatewayId": "[if(contains(parameters('subnets')[copyIndex()], 'natGatewayId'), createObject('value', parameters('subnets')[copyIndex()].natGatewayId), createObject('value', ''))]",
                          "networkSecurityGroupId": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupId'), createObject('value', parameters('subnets')[copyIndex()].networkSecurityGroupId), createObject('value', ''))]",
                          "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateEndpointNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateEndpointNetworkPolicies), createObject('value', ''))]",
                          "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateLinkServiceNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateLinkServiceNetworkPolicies), createObject('value', ''))]",
                          "roleAssignments": "[if(contains(parameters('subnets')[copyIndex()], 'roleAssignments'), createObject('value', parameters('subnets')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "routeTableId": "[if(contains(parameters('subnets')[copyIndex()], 'routeTableId'), createObject('value', parameters('subnets')[copyIndex()].routeTableId), createObject('value', ''))]",
                          "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpointPolicies'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpointPolicies), createObject('value', createArray()))]",
                          "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpoints'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpoints), createObject('value', createArray()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "8436422089765486064"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the parent virtual network"
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The address prefix for the subnet."
                              }
                            },
                            "networkSecurityGroupId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet"
                              }
                            },
                            "routeTableId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet"
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet"
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The delegations to enable on the subnet"
                              }
                            },
                            "natGatewayId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet"
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of address prefixes for the subnet."
                              }
                            },
                            "applicationGatewayIpConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "ipAllocations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of IpAllocation which reference this subnet"
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableId'))), createObject('id', parameters('routeTableId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayId'))), createObject('id', parameters('natGatewayId')), null())]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "delegations": "[parameters('delegations')]",
                                "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                                "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "applicationGatewayIpConfigurations": "[parameters('applicationGatewayIpConfigurations')]",
                                "ipAllocations": "[parameters('ipAllocations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "subnet_rbac",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Subnet-Rbac-{1}', uniqueString(deployment().name, resourceGroup().location), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "11986822212973311537"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the prinicpals to assign to role to"
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Description of role assignment"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                      "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                      "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                      "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                      "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                                      "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2021-04-01-preview",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                                      "name": "[guid(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering"
                              }
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefix]",
                              "metadata": {
                                "description": "The address prefix for the subnet"
                              }
                            },
                            "subnetAddressPrefixes": {
                              "type": "array",
                              "value": "[if(not(empty(parameters('addressPrefixes'))), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefixes, createArray())]",
                              "metadata": {
                                "description": "List of address prefixes for the subnet"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId]"
                          },
                          "name": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'name'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].name), createObject('value', format('{0}-{1}', parameters('name'), last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowForwardedTraffic'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowGatewayTransit'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowVirtualNetworkAccess'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'doNotVerifyRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].doNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'useRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].useRemoteGateways), createObject('value', false()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6544616652070741828"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName"
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Name of the Virtual Network to add the peering to."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID"
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true"
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false"
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true"
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true"
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "condition": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringEnabled'), equals(parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringEnabled, true()), false())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[2]]",
                      "resourceGroup": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/'))]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringName'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringName), createObject('value', format('{0}-{1}', last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')), parameters('name'))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowForwardedTraffic'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowGatewayTransit'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringDoNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringUseRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringUseRemoteGateways), createObject('value', false()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6544616652070741828"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName"
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Name of the Virtual Network to add the peering to."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID"
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true"
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false"
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true"
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true"
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VNet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "8923807067638805919"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the virtual network"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network"
                      }
                    },
                    "subnetNames": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[parameters('subnets')[copyIndex()].name]"
                      },
                      "metadata": {
                        "description": "The names of the deployed subnets"
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
                      },
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdComputeObjectsRgName'))), 'Microsoft.Resources/deployments', format('ASG-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdNetworkObjectsRgName'))), 'Microsoft.Resources/deployments', format('NSG-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdNetworkObjectsRgName'))), 'Microsoft.Resources/deployments', format('Route-Table-{0}', parameters('time')))]"
              ]
            }
          ],
          "outputs": {
            "avdApplicationSecurityGroupResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdComputeObjectsRgName'))), 'Microsoft.Resources/deployments', format('ASG-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value]"
            },
            "avdVirtualNetworkResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdNetworkObjectsRgName'))), 'Microsoft.Resources/deployments', format('vNet-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('avdWorkloadSubsId'), 'Microsoft.Resources/deployments', format('Deploy-{0}-{1}', variables('varAvdNetworkObjectsRgName'), parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('HostPool-AppGroups-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "avdApplicationGroupNameDesktop": {
            "value": "[variables('varAvdApplicationGroupNameDesktop')]"
          },
          "avdApplicationGroupFriendlyNameDesktop": {
            "value": "[variables('varAvdApplicationGroupFriendlyName')]"
          },
          "avdApplicationGroupAppFriendlyNameDesktop": {
            "value": "[variables('varAvdApplicationGroupAppFriendlyName')]"
          },
          "avdWorkSpaceName": {
            "value": "[variables('varAvdWorkSpaceName')]"
          },
          "avdWorkSpaceFriendlyName": {
            "value": "[variables('varAvdWorkSpaceFriendlyName')]"
          },
          "avdApplicationGroupNameRapp": {
            "value": "[variables('varAvdApplicationGroupNameRapp')]"
          },
          "avdApplicationGroupFriendlyNameRapp": {
            "value": "[variables('varAvdApplicationGroupFriendlyNameRapp')]"
          },
          "avdDeployRappGroup": {
            "value": "[parameters('avdDeployRappGroup')]"
          },
          "avdTimeZone": {
            "value": "[variables('varTimeZones')[parameters('avdSessionHostLocation')]]"
          },
          "avdHostPoolName": {
            "value": "[variables('varAvdHostPoolName')]"
          },
          "avdHostPoolFriendlyName": {
            "value": "[variables('varAvdHostFriendlyName')]"
          },
          "avdHostPoolRdpProperties": {
            "value": "[parameters('avdHostPoolRdpProperties')]"
          },
          "avdHostPoolLoadBalancerType": {
            "value": "[parameters('avdHostPoolLoadBalancerType')]"
          },
          "avdHostPoolType": {
            "value": "[parameters('avdHostPoolType')]"
          },
          "avdDeployScalingPlan": {
            "value": "[parameters('avdDeployScalingPlan')]"
          },
          "avdScalingPlanExclusionTag": {
            "value": "[variables('varAvdScalingPlanExclusionTag')]"
          },
          "avdScalingPlanSchedules": {
            "value": "[variables('varAvdScalingPlanSchedules')]"
          },
          "avdScalingPlanName": {
            "value": "[variables('varAvdScalingPlanName')]"
          },
          "avhHostPoolMaxSessions": {
            "value": "[parameters('avhHostPoolMaxSessions')]"
          },
          "avdPersonalAssignType": {
            "value": "[parameters('avdPersonalAssignType')]"
          },
          "avdManagementPlaneLocation": {
            "value": "[parameters('avdManagementPlaneLocation')]"
          },
          "avdServiceObjectsRgName": {
            "value": "[variables('varAvdServiceObjectsRgName')]"
          },
          "avdStartVmOnConnect": "[if(equals(parameters('avdHostPoolType'), 'Pooled'), createObject('value', parameters('avdDeployScalingPlan')), createObject('value', parameters('avdStartVmOnConnect')))]",
          "avdWorkloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "avdIdentityServiceProvider": {
            "value": "[parameters('avdIdentityServiceProvider')]"
          },
          "avdApplicationGroupIdentitiesIds": {
            "value": "[variables('varAvdApplicationGroupIdentitiesIds')]"
          },
          "avdApplicationGroupIdentityType": {
            "value": "[parameters('avdApplicationGroupIdentityType')]"
          },
          "avdTags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varCommonResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]",
          "avdAlaWorkspaceResourceId": "[if(parameters('avdDeployMonitoring'), if(parameters('deployAlaWorkspace'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceResourceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId'))), createObject('value', ''))]",
          "avdDiagnosticLogsRetentionInDays": {
            "value": "[parameters('avdAlaWorkspaceDataRetention')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "10425240591089026963"
            }
          },
          "parameters": {
            "avdManagementPlaneLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy AVD management plane."
              }
            },
            "avdWorkloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "avdTimeZone": {
              "type": "string",
              "metadata": {
                "description": "Required. Virtual machine time zone."
              }
            },
            "avdIdentityServiceProvider": {
              "type": "string",
              "metadata": {
                "description": "Required, The service providing domain services for Azure Virtual Desktop."
              }
            },
            "avdApplicationGroupIdentitiesIds": {
              "type": "array",
              "metadata": {
                "description": "Required, Identity ID to grant RBAC role to access AVD application group."
              }
            },
            "avdApplicationGroupIdentityType": {
              "type": "string",
              "metadata": {
                "description": "Optional, Identity type to grant RBAC role to access AVD application group. (Defualt: \"\")"
              }
            },
            "avdServiceObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "AVD Resource Group Name for the service objects."
              }
            },
            "avdApplicationGroupNameRapp": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD Application Group Name for the applications."
              }
            },
            "avdApplicationGroupFriendlyNameRapp": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD Application Group friendly Name for the applications."
              }
            },
            "avdApplicationGroupNameDesktop": {
              "type": "string",
              "metadata": {
                "description": "AVD Application group for the session hosts. Desktop type."
              }
            },
            "avdApplicationGroupFriendlyNameDesktop": {
              "type": "string",
              "metadata": {
                "description": "AVD Application group for the session hosts. Desktop type (friendly name)."
              }
            },
            "avdApplicationGroupAppFriendlyNameDesktop": {
              "type": "string",
              "metadata": {
                "description": "AVD Application group app for the session hosts. Desktop type (friendly name)."
              }
            },
            "avdDeployRappGroup": {
              "type": "bool",
              "metadata": {
                "description": "Optional. AVD deploy remote app application group."
              }
            },
            "avdDeployScalingPlan": {
              "type": "bool",
              "metadata": {
                "description": "Optional. AVD deploy scaling plan."
              }
            },
            "avdHostPoolName": {
              "type": "string",
              "metadata": {
                "description": "AVD Host Pool Name"
              }
            },
            "avdHostPoolFriendlyName": {
              "type": "string",
              "metadata": {
                "description": "AVD Host Pool friendly Name"
              }
            },
            "avdScalingPlanName": {
              "type": "string",
              "metadata": {
                "description": "AVD scaling plan name"
              }
            },
            "avdScalingPlanSchedules": {
              "type": "array",
              "metadata": {
                "description": "AVD scaling plan schedules"
              }
            },
            "avdWorkSpaceName": {
              "type": "string",
              "metadata": {
                "description": "AVD workspace name."
              }
            },
            "avdWorkSpaceFriendlyName": {
              "type": "string",
              "metadata": {
                "description": "AVD workspace friendly name."
              }
            },
            "avdHostPoolRdpProperties": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD host pool Custom RDP properties."
              }
            },
            "avdHostPoolType": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD host pool type."
              },
              "allowedValues": [
                "Personal",
                "Pooled"
              ]
            },
            "avdPersonalAssignType": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD host pool type."
              },
              "allowedValues": [
                "Automatic",
                "Direct"
              ]
            },
            "avdHostPoolLoadBalancerType": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD host pool load balacing type."
              },
              "allowedValues": [
                "BreadthFirst",
                "DepthFirst"
              ]
            },
            "avhHostPoolMaxSessions": {
              "type": "int",
              "metadata": {
                "description": "Optional. AVD host pool maximum number of user sessions per session host."
              }
            },
            "avdStartVmOnConnect": {
              "type": "bool",
              "metadata": {
                "description": "Optional. AVD host pool start VM on Connect."
              }
            },
            "avdTags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "avdScalingPlanExclusionTag": {
              "type": "string",
              "metadata": {
                "description": "Required. Tag to exclude resources from scaling plan."
              }
            },
            "avdAlaWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Optional. Log analytics workspace for diagnostic logs."
              }
            },
            "avdDiagnosticLogsRetentionInDays": {
              "type": "int",
              "metadata": {
                "description": "Optional. Diagnostic logs retention."
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            }
          },
          "variables": {
            "varDesktopApplicaitonGroups": [
              {
                "name": "[parameters('avdApplicationGroupNameDesktop')]",
                "friendlyName": "[parameters('avdApplicationGroupFriendlyNameDesktop')]",
                "location": "[parameters('avdManagementPlaneLocation')]",
                "applicationGroupType": "Desktop"
              }
            ],
            "varApplicationApplicationGroups": [
              {
                "name": "[parameters('avdApplicationGroupNameRapp')]",
                "friendlyName": "[parameters('avdApplicationGroupFriendlyNameRapp')]",
                "location": "[parameters('avdManagementPlaneLocation')]",
                "applicationGroupType": "RemoteApp"
              }
            ],
            "varAvdHostPoolRdpPropertiesDomainServiceCheck": "[if(equals(parameters('avdIdentityServiceProvider'), 'AAD'), format('{0};targetisaadjoined:i:1;enablerdsaadauth:i:1', parameters('avdHostPoolRdpProperties')), parameters('avdHostPoolRdpProperties'))]",
            "varFinalApplicationGroups": "[if(parameters('avdDeployRappGroup'), concat(variables('varDesktopApplicaitonGroups'), variables('varApplicationApplicationGroups')), variables('varDesktopApplicaitonGroups'))]",
            "varAvdHostPoolDiagnostic": [
              "Checkpoint",
              "Error",
              "Management",
              "Connection",
              "HostRegistration",
              "AgentHealthStatus",
              "NetworkData",
              "ConnectionGraphicsData",
              "SessionHostManagement"
            ],
            "varAvdApplicationGroupDiagnostic": [
              "Checkpoint",
              "Error",
              "Management"
            ],
            "varAvdWorkspaceDiagnostic": [
              "Checkpoint",
              "Error",
              "Management",
              "Feed"
            ],
            "varAvdScalingPlanDiagnostic": [
              "Autoscale"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('HostPool-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdServiceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdHostPoolName')]"
                  },
                  "hostpoolFriendlyName": {
                    "value": "[parameters('avdHostPoolFriendlyName')]"
                  },
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "hostpoolType": {
                    "value": "[parameters('avdHostPoolType')]"
                  },
                  "startVMOnConnect": {
                    "value": "[parameters('avdStartVmOnConnect')]"
                  },
                  "customRdpProperty": {
                    "value": "[variables('varAvdHostPoolRdpPropertiesDomainServiceCheck')]"
                  },
                  "loadBalancerType": {
                    "value": "[parameters('avdHostPoolLoadBalancerType')]"
                  },
                  "maxSessionLimit": {
                    "value": "[parameters('avhHostPoolMaxSessions')]"
                  },
                  "personalDesktopAssignmentType": {
                    "value": "[parameters('avdPersonalAssignType')]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('avdAlaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('avdDiagnosticLogsRetentionInDays')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[variables('varAvdHostPoolDiagnostic')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "11395938199324575006"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the Host Pool"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "hostpoolFriendlyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The friendly name of the Host Pool to be created."
                      }
                    },
                    "hostpoolDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the Host Pool to be created."
                      }
                    },
                    "hostpoolType": {
                      "type": "string",
                      "defaultValue": "Pooled",
                      "allowedValues": [
                        "Personal",
                        "Pooled"
                      ],
                      "metadata": {
                        "description": "Optional. Set this parameter to Personal if you would like to enable Persistent Desktop experience. Defaults to Pooled."
                      }
                    },
                    "personalDesktopAssignmentType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Automatic",
                        "Direct",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Set the type of assignment for a Personal Host Pool type"
                      }
                    },
                    "loadBalancerType": {
                      "type": "string",
                      "defaultValue": "BreadthFirst",
                      "allowedValues": [
                        "BreadthFirst",
                        "DepthFirst",
                        "Persistent"
                      ],
                      "metadata": {
                        "description": "Optional. Type of load balancer algorithm."
                      }
                    },
                    "maxSessionLimit": {
                      "type": "int",
                      "defaultValue": 99999,
                      "metadata": {
                        "description": "Optional. Maximum number of sessions."
                      }
                    },
                    "customRdpProperty": {
                      "type": "string",
                      "defaultValue": "audiocapturemode:i:1;audiomode:i:0;drivestoredirect:s:;redirectclipboard:i:1;redirectcomports:i:1;redirectprinters:i:1;redirectsmartcards:i:1;screen mode id:i:2;",
                      "metadata": {
                        "description": "Optional. Host Pool RDP properties"
                      }
                    },
                    "validationEnviroment": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether to use validation enviroment. When set to true, the Host Pool will be deployed in a validation 'ring' (environment) that receives all the new features (might be less stable). Ddefaults to false that stands for the stable, production-ready environment."
                      }
                    },
                    "vmTemplate": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The necessary information for adding more VMs to this Host Pool."
                      }
                    },
                    "tokenValidityLength": {
                      "type": "string",
                      "defaultValue": "PT8H",
                      "metadata": {
                        "description": "Optional. Host Pool token validity length. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the token will be valid for 8 hours."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "preferredAppGroupType": {
                      "type": "string",
                      "defaultValue": "Desktop",
                      "allowedValues": [
                        "Desktop",
                        "None",
                        "RailApplications"
                      ],
                      "metadata": {
                        "description": "Optional. The type of preferred application group type, default to Desktop Application Group"
                      }
                    },
                    "startVMOnConnect": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable Start VM on connect to allow users to start the virtual machine from a deallocated state. Important: Custom RBAC role required to power manage VMs."
                      }
                    },
                    "validationEnvironment": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Validation host pool allows you to test service changes before they are deployed to production."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Checkpoint",
                        "Error",
                        "Management",
                        "Connection",
                        "HostRegistration",
                        "AgentHealthStatus",
                        "NetworkData",
                        "ConnectionGraphicsData",
                        "SessionHostManagement"
                      ],
                      "allowedValues": [
                        "Checkpoint",
                        "Error",
                        "Management",
                        "Connection",
                        "HostRegistration",
                        "AgentHealthStatus",
                        "NetworkData",
                        "ConnectionGraphicsData",
                        "SessionHostManagement"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "tokenExpirationTime": "[dateTimeAdd(parameters('baseTime'), parameters('tokenValidityLength'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.DesktopVirtualization/hostPools",
                      "apiVersion": "2019-12-10-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "friendlyName": "[parameters('hostpoolFriendlyName')]",
                        "description": "[parameters('hostpoolDescription')]",
                        "hostPoolType": "[parameters('hostpoolType')]",
                        "customRdpProperty": "[parameters('customRdpProperty')]",
                        "personalDesktopAssignmentType": "[parameters('personalDesktopAssignmentType')]",
                        "preferredAppGroupType": "[parameters('preferredAppGroupType')]",
                        "maxSessionLimit": "[parameters('maxSessionLimit')]",
                        "loadBalancerType": "[parameters('loadBalancerType')]",
                        "validationEnviroment": "[parameters('validationEnviroment')]",
                        "startVMOnConnect": "[parameters('startVMOnConnect')]",
                        "validationEnvironment": "[parameters('validationEnvironment')]",
                        "registrationInfo": {
                          "expirationTime": "[variables('tokenExpirationTime')]",
                          "token": null,
                          "registrationTokenOperation": "Update"
                        },
                        "vmTemplate": "[if(not(empty(parameters('vmTemplate'))), null(), string(parameters('vmTemplate')))]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "hostPool_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-HostPool-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "10188304547811382897"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ca6382a4-1721-4bcf-a114-ff0c70227b6b')]",
                              "Desktop Virtualization Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86240b0e-9422-4c43-887b-b61143f32ba8')]",
                              "Desktop Virtualization Application Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aebf23d0-b568-4e86-b8f9-fe83a2c6ab55')]",
                              "Desktop Virtualization Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '082f0a83-3be5-4ba1-904c-961cca79b387')]",
                              "Desktop Virtualization Host Pool Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e307426c-f9b6-4e81-87de-d99efb3c32bc')]",
                              "Desktop Virtualization Host Pool Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ceadfde2-b300-400a-ab7b-6143895aa822')]",
                              "Desktop Virtualization Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49a72310-ab8d-41df-bbb0-79b649203868')]",
                              "Desktop Virtualization Session Host Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2ad6aaab-ead9-4eaa-8ac5-da422f562408')]",
                              "Desktop Virtualization User Session Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the AVD host pool"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the AVD host pool was deployed into"
                      }
                    },
                    "hostPoolRegistrationInfo": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('name')), '2019-12-10-preview').registrationInfo]",
                      "metadata": {
                        "description": "Host pool registration info"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the AVD host pool"
                      }
                    },
                    "tokenExpirationTime": {
                      "type": "string",
                      "value": "[dateTimeAdd(parameters('baseTime'), parameters('tokenValidityLength'))]",
                      "metadata": {
                        "description": "The expiration time for the registration token"
                      }
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "avdApplicationGroups",
                "count": "[length(variables('varFinalApplicationGroups'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Application-Group-{0}-{1}', variables('varFinalApplicationGroups')[copyIndex()].name, parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdServiceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varFinalApplicationGroups')[copyIndex()].name]"
                  },
                  "friendlyName": {
                    "value": "[variables('varFinalApplicationGroups')[copyIndex()].friendlyName]"
                  },
                  "location": {
                    "value": "[variables('varFinalApplicationGroups')[copyIndex()].location]"
                  },
                  "applicationGroupType": {
                    "value": "[variables('varFinalApplicationGroups')[copyIndex()].applicationGroupType]"
                  },
                  "hostpoolName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('HostPool-{0}', parameters('time'))), '2020-10-01').outputs.name.value]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "roleAssignments": "[if(not(empty(parameters('avdApplicationGroupIdentitiesIds'))), createObject('value', createArray(createObject('roleDefinitionIdOrName', 'Desktop Virtualization User', 'principalIds', parameters('avdApplicationGroupIdentitiesIds'), 'principalType', parameters('avdApplicationGroupIdentityType')))), createObject('value', createArray()))]",
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('avdAlaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('avdDiagnosticLogsRetentionInDays')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[variables('varAvdApplicationGroupDiagnostic')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "4449999602108371375"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the Application Group to create this application in."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "applicationGroupType": {
                      "type": "string",
                      "allowedValues": [
                        "RemoteApp",
                        "Desktop"
                      ],
                      "metadata": {
                        "description": "Required. The type of the Application Group to be created. Allowed values: RemoteApp or Desktop"
                      }
                    },
                    "hostpoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Host Pool to be linked to this Application Group."
                      }
                    },
                    "friendlyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The friendly name of the Application Group to be created."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the Application Group to be created."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of log analytics."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Checkpoint",
                        "Error",
                        "Management"
                      ],
                      "allowedValues": [
                        "Checkpoint",
                        "Error",
                        "Management"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "applications": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of applications to be created in the Application Group."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.DesktopVirtualization/applicationGroups",
                      "apiVersion": "2021-07-12",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "hostPoolArmPath": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostpoolName'))]",
                        "friendlyName": "[parameters('friendlyName')]",
                        "description": "[parameters('description')]",
                        "applicationGroupType": "[parameters('applicationGroupType')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "appGroup_applications",
                        "count": "[length(parameters('applications'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AppGroup-App-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('applications')[copyIndex()].name]"
                          },
                          "appGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "description": "[if(contains(parameters('applications')[copyIndex()], 'description'), createObject('value', parameters('applications')[copyIndex()].description), createObject('value', ''))]",
                          "friendlyName": "[if(contains(parameters('applications')[copyIndex()], 'friendlyName'), createObject('value', parameters('applications')[copyIndex()].friendlyName), createObject('value', parameters('name')))]",
                          "filePath": {
                            "value": "[parameters('applications')[copyIndex()].filePath]"
                          },
                          "commandLineSetting": "[if(contains(parameters('applications')[copyIndex()], 'commandLineSetting'), createObject('value', parameters('applications')[copyIndex()].commandLineSetting), createObject('value', 'DoNotAllow'))]",
                          "commandLineArguments": "[if(contains(parameters('applications')[copyIndex()], 'commandLineArguments'), createObject('value', parameters('applications')[copyIndex()].commandLineArguments), createObject('value', ''))]",
                          "showInPortal": "[if(contains(parameters('applications')[copyIndex()], 'showInPortal'), createObject('value', parameters('applications')[copyIndex()].showInPortal), createObject('value', false()))]",
                          "iconPath": "[if(contains(parameters('applications')[copyIndex()], 'iconPath'), createObject('value', parameters('applications')[copyIndex()].iconPath), createObject('value', parameters('applications')[copyIndex()].filePath))]",
                          "iconIndex": "[if(contains(parameters('applications')[copyIndex()], 'iconIndex'), createObject('value', parameters('applications')[copyIndex()].iconIndex), createObject('value', 0))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "1581191055317780834"
                            }
                          },
                          "parameters": {
                            "appGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Application Group to create the application(s) in."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Application to be created in the Application Group."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of Application.."
                              }
                            },
                            "friendlyName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Friendly name of Application.."
                              }
                            },
                            "filePath": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies a path for the executable file for the application."
                              }
                            },
                            "commandLineSetting": {
                              "type": "string",
                              "defaultValue": "DoNotAllow",
                              "metadata": {
                                "description": "Optional. Specifies whether this published application can be launched with command-line arguments provided by the client, command-line arguments specified at publish time, or no command-line arguments at all."
                              },
                              "allowedValues": [
                                "Allow",
                                "DoNotAllow",
                                "Require"
                              ]
                            },
                            "commandLineArguments": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Command-Line Arguments for Application."
                              }
                            },
                            "showInPortal": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether to show the RemoteApp program in the RD Web Access server."
                              }
                            },
                            "iconPath": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Path to icon."
                              }
                            },
                            "iconIndex": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Index of the icon."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.DesktopVirtualization/applicationGroups/applications",
                              "apiVersion": "2021-07-12",
                              "name": "[format('{0}/{1}', parameters('appGroupName'), parameters('name'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "friendlyName": "[parameters('friendlyName')]",
                                "filePath": "[parameters('filePath')]",
                                "commandLineSetting": "[parameters('commandLineSetting')]",
                                "commandLineArguments": "[parameters('commandLineArguments')]",
                                "showInPortal": "[parameters('showInPortal')]",
                                "iconPath": "[parameters('iconPath')]",
                                "iconIndex": "[parameters('iconIndex')]"
                              }
                            }
                          ],
                          "outputs": {
                            "applicationResourceIds": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups/applications', parameters('appGroupName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed Application."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the AVD Application was created in."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('appGroupName')]",
                              "metadata": {
                                "description": "The Name of the Application Group to register the Application in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "appGroup_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AppGroup-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "2145694256898998092"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ca6382a4-1721-4bcf-a114-ff0c70227b6b')]",
                              "Desktop Virtualization Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86240b0e-9422-4c43-887b-b61143f32ba8')]",
                              "Desktop Virtualization Application Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aebf23d0-b568-4e86-b8f9-fe83a2c6ab55')]",
                              "Desktop Virtualization Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '082f0a83-3be5-4ba1-904c-961cca79b387')]",
                              "Desktop Virtualization Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49a72310-ab8d-41df-bbb0-79b649203868')]",
                              "Desktop Virtualization User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]",
                              "Desktop Virtualization Workspace Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21efdde3-836f-432b-bf3d-3e8e734d4b2b')]",
                              "Desktop Virtualization Workspace Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0fa44ee9-7a7d-466b-9bb2-2bf446b1204d')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID  of the AVD application group"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the AVD application group was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the AVD application group"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('HostPool-{0}', parameters('time')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Workspace-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdServiceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdWorkSpaceName')]"
                  },
                  "workspaceFriendlyName": {
                    "value": "[parameters('avdWorkSpaceFriendlyName')]"
                  },
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "appGroupResourceIds": "[if(parameters('avdDeployRappGroup'), createObject('value', createArray(format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/applicationgroups/{2}', parameters('avdWorkloadSubsId'), parameters('avdServiceObjectsRgName'), parameters('avdApplicationGroupNameDesktop')), format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/applicationgroups/{2}', parameters('avdWorkloadSubsId'), parameters('avdServiceObjectsRgName'), parameters('avdApplicationGroupNameRapp')))), createObject('value', createArray(format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/applicationgroups/{2}', parameters('avdWorkloadSubsId'), parameters('avdServiceObjectsRgName'), parameters('avdApplicationGroupNameDesktop')))))]",
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('avdAlaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('avdDiagnosticLogsRetentionInDays')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[variables('varAvdWorkspaceDiagnostic')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "14386266687804025399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the workspace to be attach to new Application Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "appGroupResourceIds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Required. Resource IDs fo the existing Application groups this workspace will group together."
                      }
                    },
                    "workspaceFriendlyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The friendly name of the Workspace to be created."
                      }
                    },
                    "workspaceDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the Workspace to be created."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Checkpoint",
                        "Error",
                        "Management",
                        "Feed"
                      ],
                      "allowedValues": [
                        "Checkpoint",
                        "Error",
                        "Management",
                        "Feed"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2021-07-12",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "applicationGroupReferences": "[parameters('appGroupResourceIds')]",
                        "description": "[parameters('workspaceDescription')]",
                        "friendlyName": "[parameters('workspaceFriendlyName')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "workspace_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Workspace-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "12340409839593070735"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ca6382a4-1721-4bcf-a114-ff0c70227b6b')]",
                              "Desktop Virtualization Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '082f0a83-3be5-4ba1-904c-961cca79b387')]",
                              "Desktop Virtualization Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49a72310-ab8d-41df-bbb0-79b649203868')]",
                              "Desktop Virtualization Workspace Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21efdde3-836f-432b-bf3d-3e8e734d4b2b')]",
                              "Desktop Virtualization Workspace Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0fa44ee9-7a7d-466b-9bb2-2bf446b1204d')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the AVD workspace"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the AVD workspace was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the AVD workspace"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "avdApplicationGroups",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('HostPool-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[and(parameters('avdDeployScalingPlan'), equals(parameters('avdHostPoolType'), 'Pooled'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Scaling-Plan-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdServiceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('avdScalingPlanName')]"
                  },
                  "location": {
                    "value": "[parameters('avdManagementPlaneLocation')]"
                  },
                  "hostPoolType": {
                    "value": "Pooled"
                  },
                  "exclusionTag": {
                    "value": "[parameters('avdScalingPlanExclusionTag')]"
                  },
                  "timeZone": {
                    "value": "[parameters('avdTimeZone')]"
                  },
                  "schedules": {
                    "value": "[parameters('avdScalingPlanSchedules')]"
                  },
                  "hostPoolReferences": {
                    "value": [
                      {
                        "hostPoolArmPath": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', parameters('avdWorkloadSubsId'), parameters('avdServiceObjectsRgName'), parameters('avdHostPoolName'))]",
                        "scalingPlanEnabled": true
                      }
                    ]
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('avdAlaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('avdDiagnosticLogsRetentionInDays')]"
                  },
                  "logsToEnable": {
                    "value": "[variables('varAvdScalingPlanDiagnostic')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "4879464971534888034"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Name of the scaling plan"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "friendlyName": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]",
                      "metadata": {
                        "description": "Optional. Friendly Name of the scaling plan"
                      }
                    },
                    "scalingplanDescription": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]",
                      "metadata": {
                        "description": "Optional. Description of the scaling plan."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "W. Europe Standard Time",
                      "metadata": {
                        "description": "Optional. Timezone to be used for the scaling plan."
                      }
                    },
                    "hostPoolType": {
                      "type": "string",
                      "defaultValue": "Pooled",
                      "metadata": {
                        "description": "Optional. The type of hostpool where this scaling plan should be applied."
                      },
                      "allowedValues": [
                        "Pooled"
                      ]
                    },
                    "exclusionTag": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Provide a tag to be used for hosts that should not be affected by the scaling plan."
                      }
                    },
                    "schedules": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "rampUpStartTime": {
                            "hour": 7,
                            "minute": 0
                          },
                          "peakStartTime": {
                            "hour": 9,
                            "minute": 0
                          },
                          "rampDownStartTime": {
                            "hour": 18,
                            "minute": 0
                          },
                          "offPeakStartTime": {
                            "hour": 20,
                            "minute": 0
                          },
                          "name": "weekdays_schedule",
                          "daysOfWeek": [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday"
                          ],
                          "rampUpLoadBalancingAlgorithm": "DepthFirst",
                          "rampUpMinimumHostsPct": 20,
                          "rampUpCapacityThresholdPct": 60,
                          "peakLoadBalancingAlgorithm": "DepthFirst",
                          "rampDownLoadBalancingAlgorithm": "DepthFirst",
                          "rampDownMinimumHostsPct": 10,
                          "rampDownCapacityThresholdPct": 90,
                          "rampDownForceLogoffUsers": true,
                          "rampDownWaitTimeMinutes": 30,
                          "rampDownNotificationMessage": "You will be logged off in 30 min. Make sure to save your work.",
                          "rampDownStopHostsWhen": "ZeroSessions",
                          "offPeakLoadBalancingAlgorithm": "DepthFirst"
                        }
                      ],
                      "metadata": {
                        "description": "Optional. The schedules related to this scaling plan. If no value is provided a default schedule will be provided."
                      }
                    },
                    "hostPoolReferences": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of references to hostpools."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalIds' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "logsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Autoscale"
                      ],
                      "allowedValues": [
                        "Autoscale"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/scalingPlans",
                      "apiVersion": "2021-09-03-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "friendlyName": "[parameters('friendlyName')]",
                        "timeZone": "[parameters('timeZone')]",
                        "hostPoolType": "[parameters('hostPoolType')]",
                        "exclusionTag": "[parameters('exclusionTag')]",
                        "schedules": "[parameters('schedules')]",
                        "hostPoolReferences": "[parameters('hostPoolReferences')]",
                        "description": "[parameters('scalingplanDescription')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/scalingPlans/{0}', parameters('name'))]",
                      "name": "[format('{0}-diagnosticsetting', parameters('name'))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "scalingplan_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Workspace-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "10188304547811382897"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ca6382a4-1721-4bcf-a114-ff0c70227b6b')]",
                              "Desktop Virtualization Application Group Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '86240b0e-9422-4c43-887b-b61143f32ba8')]",
                              "Desktop Virtualization Application Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aebf23d0-b568-4e86-b8f9-fe83a2c6ab55')]",
                              "Desktop Virtualization Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '082f0a83-3be5-4ba1-904c-961cca79b387')]",
                              "Desktop Virtualization Host Pool Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e307426c-f9b6-4e81-87de-d99efb3c32bc')]",
                              "Desktop Virtualization Host Pool Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ceadfde2-b300-400a-ab7b-6143895aa822')]",
                              "Desktop Virtualization Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '49a72310-ab8d-41df-bbb0-79b649203868')]",
                              "Desktop Virtualization Session Host Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2ad6aaab-ead9-4eaa-8ac5-da422f562408')]",
                              "Desktop Virtualization User Session Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the AVD scaling plan"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the AVD scaling plan was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the AVD scaling plan"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "avdApplicationGroups",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('HostPool-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Workspace-{0}', parameters('time')))]"
              ]
            }
          ],
          "outputs": {
            "hostPooltoken": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('HostPool-{0}', parameters('time'))), '2020-10-01').outputs.hostPoolRegistrationInfo.value.token]"
            }
          }
        }
      },
      "dependsOn": [
        "avdBaselineResourceGroups",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Managed-ID-RoleAssign-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "avdComputeObjectsRgName": {
            "value": "[variables('varAvdComputeObjectsRgName')]"
          },
          "avdDeploySessionHosts": {
            "value": "[parameters('avdDeploySessionHosts')]"
          },
          "avdEnterpriseAppObjectId": {
            "value": "[parameters('avdEnterpriseAppObjectId')]"
          },
          "avdDeployScalingPlan": {
            "value": "[parameters('avdDeployScalingPlan')]"
          },
          "avdSessionHostLocation": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "avdServiceObjectsRgName": {
            "value": "[variables('varAvdServiceObjectsRgName')]"
          },
          "avdStorageObjectsRgName": {
            "value": "[variables('varAvdStorageObjectsRgName')]"
          },
          "avdWorkloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "storageManagedIdentityName": {
            "value": "[variables('varStorageManagedIdentityName')]"
          },
          "readerRoleId": {
            "value": "[variables('varReaderRoleId')]"
          },
          "enableStartVmOnConnect": {
            "value": "[parameters('avdStartVmOnConnect')]"
          },
          "avdManagementPlaneLocation": {
            "value": "[parameters('avdManagementPlaneLocation')]"
          },
          "avdIdentityServiceProvider": {
            "value": "[parameters('avdIdentityServiceProvider')]"
          },
          "storageAccountContributorRoleId": {
            "value": "[variables('varStorageAccountContributorRoleId')]"
          },
          "createStorageDeployment": {
            "value": "[variables('varCreateStorageDeployment')]"
          },
          "desktopVirtualizationPowerOnContributorRoleId": {
            "value": "[variables('varDesktopVirtualizationPowerOnContributorRoleId')]"
          },
          "desktopVirtualizationPowerOnOffContributorRoleId": {
            "value": "[variables('varDesktopVirtualizationPowerOnOffContributorRoleId')]"
          },
          "avdApplicationGroupIdentitiesIds": {
            "value": "[variables('varAvdApplicationGroupIdentitiesIds')]"
          },
          "avdTags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varCommonResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "17323763838198895579"
            }
          },
          "parameters": {
            "avdSessionHostLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy AVD session hosts."
              }
            },
            "avdManagementPlaneLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy AVD management plane."
              }
            },
            "avdWorkloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "avdServiceObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "AVD Resource Group Name for the service objects."
              }
            },
            "avdComputeObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name for the session hosts."
              }
            },
            "avdStorageObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for Azure Files."
              }
            },
            "avdEnterpriseAppObjectId": {
              "type": "string",
              "metadata": {
                "description": "Azure Virtual Desktop enterprise application object ID."
              }
            },
            "avdDeploySessionHosts": {
              "type": "bool",
              "metadata": {
                "description": "Deploy new session hosts."
              }
            },
            "enableStartVmOnConnect": {
              "type": "bool",
              "metadata": {
                "description": "Configure start VM on connect."
              }
            },
            "avdIdentityServiceProvider": {
              "type": "string",
              "metadata": {
                "description": "Required, The service providing domain services for Azure Virtual Desktop."
              }
            },
            "avdApplicationGroupIdentitiesIds": {
              "type": "array",
              "metadata": {
                "description": "Required, Identity ID to grant RBAC role to access AVD application group."
              }
            },
            "avdDeployScalingPlan": {
              "type": "bool",
              "metadata": {
                "description": "Deploy scaling plan."
              }
            },
            "storageManagedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Storage managed identity name."
              }
            },
            "readerRoleId": {
              "type": "string",
              "metadata": {
                "description": "GUID for built role Reader."
              }
            },
            "storageAccountContributorRoleId": {
              "type": "string",
              "metadata": {
                "description": "GUID for built in role ID of Storage Account Contributor."
              }
            },
            "desktopVirtualizationPowerOnContributorRoleId": {
              "type": "string",
              "metadata": {
                "description": "GUID for built in role ID of Desktop Virtualization Power On Contributor."
              }
            },
            "desktopVirtualizationPowerOnOffContributorRoleId": {
              "type": "string",
              "metadata": {
                "description": "GUID for built in role ID of Desktop Virtualization Power On Off Contributor."
              }
            },
            "createStorageDeployment": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Deploy Storage setup."
              }
            },
            "avdTags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            }
          },
          "resources": [
            {
              "condition": "[and(parameters('createStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Managed-Identity-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdStorageObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('storageManagedIdentityName')]"
                  },
                  "location": {
                    "value": "[parameters('avdSessionHostLocation')]"
                  },
                  "tags": {
                    "value": "[parameters('avdTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "12276341375667167786"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[guid(resourceGroup().id)]",
                      "metadata": {
                        "description": "Optional. Name of the User Assigned Identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "userMsi_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-UserMSI-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6707473810616295753"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the user assigned identity"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]",
                      "metadata": {
                        "description": "The principal ID of the user assigned identity"
                      }
                    },
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the user assigned identity was deployed into"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(parameters('createStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Storage-Identity-Wait-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdStorageObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('AVD-storageManagedIdentityWait-{0}', parameters('time'))]"
                  },
                  "location": {
                    "value": "[parameters('avdSessionHostLocation')]"
                  },
                  "azPowerShellVersion": {
                    "value": "6.2"
                  },
                  "cleanupPreference": {
                    "value": "Always"
                  },
                  "timeout": {
                    "value": "PT10M"
                  },
                  "scriptContent": {
                    "value": "      Write-Host \"Start\"\n      Get-Date\n      Start-Sleep -Seconds 60\n      Write-Host \"Stop\"\n      Get-Date\n      "
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "9712062199062057663"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name of the script to be run."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzurePowerShell",
                      "allowedValues": [
                        "AzurePowerShell",
                        "AzureCLI"
                      ],
                      "metadata": {
                        "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                      }
                    },
                    "azPowerShellVersion": {
                      "type": "string",
                      "defaultValue": "3.0",
                      "metadata": {
                        "description": "Optional. Azure PowerShell module version to be used."
                      }
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure CLI module version to be used."
                      }
                    },
                    "scriptContent": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                      }
                    },
                    "primaryScriptUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                      }
                    },
                    "environmentVariables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The environment variables to pass over to the script. Must have a 'name' and a 'value' or a 'secretValue' property."
                      }
                    },
                    "supportingScriptUris": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                      }
                    },
                    "arguments": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                      }
                    },
                    "retentionInterval": {
                      "type": "string",
                      "defaultValue": "P1D",
                      "metadata": {
                        "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                      }
                    },
                    "runOnce": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                      }
                    },
                    "cleanupPreference": {
                      "type": "string",
                      "defaultValue": "Always",
                      "allowedValues": [
                        "Always",
                        "OnSuccess",
                        "OnExpiration"
                      ],
                      "metadata": {
                        "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                      }
                    },
                    "containerGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                      }
                    },
                    "timeout": {
                      "type": "string",
                      "defaultValue": "PT6H",
                      "metadata": {
                        "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "variables": {
                    "containerSettings": {
                      "containerGroupName": "[parameters('containerGroupName')]"
                    },
                    "identityType": "[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "azPowerShellVersion": "[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                        "azCliVersion": "[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                        "containerSettings": "[if(empty(parameters('containerGroupName')), null(), variables('containerSettings'))]",
                        "arguments": "[parameters('arguments')]",
                        "environmentVariables": "[if(empty(parameters('environmentVariables')), null(), parameters('environmentVariables'))]",
                        "scriptContent": "[if(empty(parameters('scriptContent')), null(), parameters('scriptContent'))]",
                        "primaryScriptUri": "[if(empty(parameters('primaryScriptUri')), null(), parameters('primaryScriptUri'))]",
                        "supportingScriptUris": "[if(empty(parameters('supportingScriptUris')), null(), parameters('supportingScriptUris'))]",
                        "cleanupPreference": "[parameters('cleanupPreference')]",
                        "forceUpdateTag": "[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                        "retentionInterval": "[parameters('retentionInterval')]",
                        "timeout": "[parameters('timeout')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "17750672647523699609"
                            }
                          },
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployment script"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the deployment script was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployment script"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[and(parameters('enableStartVmOnConnect'), not(parameters('avdDeployScalingPlan')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Start-OnConnect-RolAssignComp-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdComputeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', parameters('avdWorkloadSubsId'), parameters('desktopVirtualizationPowerOnContributorRoleId'))]"
                  },
                  "principalId": {
                    "value": "[parameters('avdEnterpriseAppObjectId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(parameters('enableStartVmOnConnect'), not(parameters('avdDeployScalingPlan')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Start-OnConnect-RolAssignServ-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdServiceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', parameters('avdWorkloadSubsId'), parameters('desktopVirtualizationPowerOnContributorRoleId'))]"
                  },
                  "principalId": {
                    "value": "[parameters('avdEnterpriseAppObjectId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(parameters('createStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('UserAIdentity-ContributorRoleAssign-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdStorageObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', parameters('avdWorkloadSubsId'), parameters('storageAccountContributorRoleId'))]"
                  },
                  "principalId": "[if(parameters('createStorageDeployment'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time'))), '2020-10-01').outputs.principalId.value), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-Identity-Wait-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[and(parameters('createStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Storage-UserAIdentity-ReaderRoleAssign-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdStorageObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', parameters('avdWorkloadSubsId'), parameters('readerRoleId'))]"
                  },
                  "principalId": "[if(parameters('createStorageDeployment'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time'))), '2020-10-01').outputs.principalId.value), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-Identity-Wait-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[parameters('avdDeployScalingPlan')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Scaling-Plan-Assign-Compute-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdComputeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', parameters('avdWorkloadSubsId'), parameters('desktopVirtualizationPowerOnOffContributorRoleId'))]"
                  },
                  "principalId": {
                    "value": "[parameters('avdEnterpriseAppObjectId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('avdDeployScalingPlan')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Scaling-Plan-Assign-Service-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdServiceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/{1}', parameters('avdWorkloadSubsId'), parameters('desktopVirtualizationPowerOnOffContributorRoleId'))]"
                  },
                  "principalId": {
                    "value": "[parameters('avdEnterpriseAppObjectId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "avdAadIdentityLoginAccessCompute",
                "count": "[length(parameters('avdApplicationGroupIdentitiesIds'))]"
              },
              "condition": "[and(equals(parameters('avdIdentityServiceProvider'), 'AAD'), not(empty(parameters('avdApplicationGroupIdentitiesIds'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('AAD-VM-Role-AssignComp-{0}-{1}', take(format('{0}', parameters('avdApplicationGroupIdentitiesIds')[copyIndex()]), 6), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdComputeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "Virtual Machine User Login"
                  },
                  "principalId": {
                    "value": "[parameters('avdApplicationGroupIdentitiesIds')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "avdAadIdentityLoginAccessServiceObjects",
                "count": "[length(parameters('avdApplicationGroupIdentitiesIds'))]"
              },
              "condition": "[and(equals(parameters('avdIdentityServiceProvider'), 'AAD'), not(empty(parameters('avdApplicationGroupIdentitiesIds'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('AAD-VM-Role-AssignServ-{0}-{1}', take(format('{0}', parameters('avdApplicationGroupIdentitiesIds')[copyIndex()]), 6), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('avdComputeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "Virtual Machine User Login"
                  },
                  "principalId": {
                    "value": "[parameters('avdApplicationGroupIdentitiesIds')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "17193365879581268896"
                    }
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource"
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to"
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\""
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames_var": {
                      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
                      "API Management Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/312a565d-c81f-4fd8-895a-4e21e48d571c",
                      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
                      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
                      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
                      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                      "API Management Service Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                      "API Management Service Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/71522526-b88f-4d52-b57f-d31fc3546d0d",
                      "Application Insights Component Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e",
                      "Application Insights Snapshot Debugger": "/providers/Microsoft.Authorization/roleDefinitions/08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                      "Attestation Reader": "/providers/Microsoft.Authorization/roleDefinitions/fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                      "Automation Job Operator": "/providers/Microsoft.Authorization/roleDefinitions/4fe576fe-1146-4730-92eb-48519fa6bf9f",
                      "Automation Runbook Operator": "/providers/Microsoft.Authorization/roleDefinitions/5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                      "Automation Operator": "/providers/Microsoft.Authorization/roleDefinitions/d3881f73-407a-4167-8283-e981cbba0404",
                      "Avere Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                      "Avere Operator": "/providers/Microsoft.Authorization/roleDefinitions/c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                      "Azure Kubernetes Service Cluster Admin Role": "/providers/Microsoft.Authorization/roleDefinitions/0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                      "Azure Kubernetes Service Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                      "Azure Maps Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                      "Azure Stack Registration Owner": "/providers/Microsoft.Authorization/roleDefinitions/6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                      "Backup Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e467623-bb1f-42f4-a55d-6e525e11384b",
                      "Billing Reader": "/providers/Microsoft.Authorization/roleDefinitions/fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                      "Backup Operator": "/providers/Microsoft.Authorization/roleDefinitions/00c29273-979b-4161-815c-10b084fb9324",
                      "Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/a795c7a0-d4a2-40c1-ae25-d81f01202912",
                      "BizTalk Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5e3c6656-6cfa-4708-81fe-0de47ac73342",
                      "CDN Endpoint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                      "CDN Endpoint Reader": "/providers/Microsoft.Authorization/roleDefinitions/871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                      "CDN Profile Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ec156ff8-a8d1-4d15-830c-5b80698ca432",
                      "CDN Profile Reader": "/providers/Microsoft.Authorization/roleDefinitions/8f96442b-4075-438f-813d-ad51ab4019af",
                      "Classic Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                      "Classic Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                      "Classic Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                      "ClearDB MySQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9106cda0-8a86-4e81-b686-29a22c54effe",
                      "Classic Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                      "Cognitive Services User": "/providers/Microsoft.Authorization/roleDefinitions/a97b65f3-24c7-4388-baec-2e87135dc908",
                      "Cognitive Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                      "CosmosBackupOperator": "/providers/Microsoft.Authorization/roleDefinitions/db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
                      "Cosmos DB Account Reader Role": "/providers/Microsoft.Authorization/roleDefinitions/fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                      "Cost Management Contributor": "/providers/Microsoft.Authorization/roleDefinitions/434105ed-43f6-45c7-a02f-909b2ba83430",
                      "Cost Management Reader": "/providers/Microsoft.Authorization/roleDefinitions/72fafb9e-0641-4937-9268-a91bfd8191a3",
                      "Data Box Contributor": "/providers/Microsoft.Authorization/roleDefinitions/add466c9-e687-43fc-8d98-dfcf8d720be5",
                      "Data Box Reader": "/providers/Microsoft.Authorization/roleDefinitions/028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                      "Data Factory Contributor": "/providers/Microsoft.Authorization/roleDefinitions/673868aa-7521-48a0-acc6-0f60742d39f5",
                      "Data Purger": "/providers/Microsoft.Authorization/roleDefinitions/150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                      "Data Lake Analytics Developer": "/providers/Microsoft.Authorization/roleDefinitions/47b7735b-770e-4598-a7da-8b91488b4c88",
                      "DevTest Labs User": "/providers/Microsoft.Authorization/roleDefinitions/76283e04-6283-4c54-8f91-bcf1374a3c64",
                      "DocumentDB Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5bd9cd88-fe45-4216-938b-f97437e15450",
                      "DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/befefa01-2a29-4197-83a8-272ff33ce314",
                      "EventGrid EventSubscription Contributor": "/providers/Microsoft.Authorization/roleDefinitions/428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                      "EventGrid EventSubscription Reader": "/providers/Microsoft.Authorization/roleDefinitions/2414bbcf-6497-4faf-8c65-045460748405",
                      "Graph Owner": "/providers/Microsoft.Authorization/roleDefinitions/b60367af-1334-4454-b71e-769d9a4f83d9",
                      "HDInsight Domain Services Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8d8d5a11-05d3-4bda-a417-a08778121c7c",
                      "Intelligent Systems Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/03a6d094-3444-4b3d-88af-7477090a9e5e",
                      "Key Vault Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f25e0fa2-a7c8-4377-a976-54943a77a395",
                      "Knowledge Consumer": "/providers/Microsoft.Authorization/roleDefinitions/ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                      "Lab Creator": "/providers/Microsoft.Authorization/roleDefinitions/b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
                      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                      "Logic App Operator": "/providers/Microsoft.Authorization/roleDefinitions/515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                      "Logic App Contributor": "/providers/Microsoft.Authorization/roleDefinitions/87a39d53-fc1b-424a-814c-f7e04687dc9e",
                      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
                      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
                      "Managed Identity Operator": "/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830",
                      "Managed Identity Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                      "Management Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                      "Management Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/ac63b705-f282-497d-ac71-919bf39d939d",
                      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
                      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                      "Network Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7",
                      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                      "New Relic APM Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5d28c62d-5b37-4476-8438-e587778df237",
                      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "Redis Cache Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e0f68234-74aa-48ed-b826-c38b57376e17",
                      "Reader and Data Access": "/providers/Microsoft.Authorization/roleDefinitions/c12c1c16-33a1-487b-954d-41c89c60f349",
                      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                      "Scheduler Job Collections Contributor": "/providers/Microsoft.Authorization/roleDefinitions/188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                      "Search Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                      "Security Admin": "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd",
                      "Security Reader": "/providers/Microsoft.Authorization/roleDefinitions/39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                      "Spatial Anchors Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                      "Site Recovery Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                      "Site Recovery Operator": "/providers/Microsoft.Authorization/roleDefinitions/494ae006-db33-4328-bf46-533a6560a3ca",
                      "Spatial Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/5d51204f-eb77-4b1c-b86a-2ec626c49413",
                      "Site Recovery Reader": "/providers/Microsoft.Authorization/roleDefinitions/dbaa88c4-0c30-4179-9fb3-46319faa6149",
                      "Spatial Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/70bbe301-9835-447d-afdd-19eb3167307c",
                      "SQL Managed Instance Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                      "SQL DB Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                      "SQL Security Manager": "/providers/Microsoft.Authorization/roleDefinitions/056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                      "Storage Account Contributor": "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab",
                      "SQL Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                      "Storage Account Key Operator Service Role": "/providers/Microsoft.Authorization/roleDefinitions/81a9662b-bebf-436f-a333-f67b29880f12",
                      "Storage Blob Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                      "Storage Blob Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                      "Storage Blob Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                      "Storage Queue Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                      "Storage Queue Data Message Processor": "/providers/Microsoft.Authorization/roleDefinitions/8a0f0c08-91a1-4084-bc3d-661d67233fed",
                      "Storage Queue Data Message Sender": "/providers/Microsoft.Authorization/roleDefinitions/c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                      "Storage Queue Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/19e7f393-937e-4f77-808e-94535e297925",
                      "Support Request Contributor": "/providers/Microsoft.Authorization/roleDefinitions/cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                      "Traffic Manager Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                      "Virtual Machine Administrator Login": "/providers/Microsoft.Authorization/roleDefinitions/1c0163c0-47e6-4577-8991-ea5c82e286e4",
                      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                      "Virtual Machine User Login": "/providers/Microsoft.Authorization/roleDefinitions/fb879df8-f326-4884-b1cf-06f3ad86be52",
                      "Virtual Machine Contributor": "/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                      "Web Plan Contributor": "/providers/Microsoft.Authorization/roleDefinitions/2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                      "Website Contributor": "/providers/Microsoft.Authorization/roleDefinitions/de139f84-1756-47ae-9be6-808fbbe84772",
                      "Azure Service Bus Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/090c5cfd-751d-490a-894a-3ce6f1109419",
                      "Azure Event Hubs Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/f526a384-b230-433a-b45c-95f59c4a2dec",
                      "Attestation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                      "HDInsight Cluster Operator": "/providers/Microsoft.Authorization/roleDefinitions/61ed4efc-fab3-44fd-b111-e24485cc132a",
                      "Cosmos DB Operator": "/providers/Microsoft.Authorization/roleDefinitions/230815da-be43-4aae-9cb4-875f7bd000aa",
                      "Hybrid Server Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                      "Hybrid Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                      "Azure Event Hubs Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                      "Azure Event Hubs Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/2b629674-e913-4c01-ae53-ef4638d8f975",
                      "Azure Service Bus Data Receiver": "/providers/Microsoft.Authorization/roleDefinitions/4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                      "Azure Service Bus Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                      "Storage File Data SMB Share Reader": "/providers/Microsoft.Authorization/roleDefinitions/aba4ae5f-2193-4029-9191-0cb91df5e314",
                      "Storage File Data SMB Share Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                      "Private DNS Zone Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                      "Storage Blob Delegator": "/providers/Microsoft.Authorization/roleDefinitions/db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                      "Desktop Virtualization User": "/providers/Microsoft.Authorization/roleDefinitions/1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Storage File Data SMB Share Elevated Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a7264617-510b-434b-a828-9731dc254ea7",
                      "Blueprint Contributor": "/providers/Microsoft.Authorization/roleDefinitions/41077137-e803-4205-871c-5a86e6a753b4",
                      "Blueprint Operator": "/providers/Microsoft.Authorization/roleDefinitions/437d2ced-4a38-4302-8479-ed2bcb43d090",
                      "Azure Sentinel Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ab8e14d6-4a74-4a29-9ba8-549422addade",
                      "Azure Sentinel Responder": "/providers/Microsoft.Authorization/roleDefinitions/3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                      "Azure Sentinel Reader": "/providers/Microsoft.Authorization/roleDefinitions/8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                      "Workbook Reader": "/providers/Microsoft.Authorization/roleDefinitions/b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                      "Workbook Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                      "SignalR AccessKey Reader": "/providers/Microsoft.Authorization/roleDefinitions/04165923-9d83-45d5-8227-78b77b0a687e",
                      "SignalR/Web PubSub Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                      "Azure Connected Machine Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                      "Azure Connected Machine Resource Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cd570a14-e51a-42ad-bac8-bafd67325302",
                      "Managed Services Registration assignment Delete Role": "/providers/Microsoft.Authorization/roleDefinitions/91c1777a-f3dc-4fae-b103-61d183457e46",
                      "App Configuration Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                      "App Configuration Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/516239f1-63e1-4d78-a4de-a74fb236a071",
                      "Kubernetes Cluster - Azure Arc Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                      "Experimentation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                      "Cognitive Services QnA Maker Reader": "/providers/Microsoft.Authorization/roleDefinitions/466ccd10-b268-4a11-b098-b4849f024126",
                      "Cognitive Services QnA Maker Editor": "/providers/Microsoft.Authorization/roleDefinitions/f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                      "Experimentation Administrator": "/providers/Microsoft.Authorization/roleDefinitions/7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                      "Remote Rendering Administrator": "/providers/Microsoft.Authorization/roleDefinitions/3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                      "Remote Rendering Client": "/providers/Microsoft.Authorization/roleDefinitions/d39065c4-c120-43c9-ab0a-63eed9795f0a",
                      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
                      "Security Assessment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                      "Tag Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                      "Integration Service Environment Developer": "/providers/Microsoft.Authorization/roleDefinitions/c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                      "Integration Service Environment Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                      "Azure Kubernetes Service Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                      "Azure Digital Twins Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                      "Azure Digital Twins Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                      "Hierarchy Settings Administrator": "/providers/Microsoft.Authorization/roleDefinitions/350f8d15-c687-4448-8ae1-157740a3936d",
                      "FHIR Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd",
                      "FHIR Data Exporter": "/providers/Microsoft.Authorization/roleDefinitions/3db33094-8700-4567-8da5-1501d4e7e843",
                      "FHIR Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                      "FHIR Data Writer": "/providers/Microsoft.Authorization/roleDefinitions/3f88fce4-5892-4214-ae73-ba5294559913",
                      "Experimentation Reader": "/providers/Microsoft.Authorization/roleDefinitions/49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                      "Object Understanding Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/4dd61c23-6743-42fe-a388-d8bdd41cb745",
                      "Azure Maps Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                      "Cognitive Services Custom Vision Contributor": "/providers/Microsoft.Authorization/roleDefinitions/c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                      "Cognitive Services Custom Vision Deployment": "/providers/Microsoft.Authorization/roleDefinitions/5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                      "Cognitive Services Custom Vision Labeler": "/providers/Microsoft.Authorization/roleDefinitions/88424f51-ebe7-446f-bc41-7fa16989e96c",
                      "Cognitive Services Custom Vision Reader": "/providers/Microsoft.Authorization/roleDefinitions/93586559-c37d-4a6b-ba08-b9f0940c2d73",
                      "Cognitive Services Custom Vision Trainer": "/providers/Microsoft.Authorization/roleDefinitions/0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                      "Key Vault Administrator": "/providers/Microsoft.Authorization/roleDefinitions/00482a5a-887f-4fb3-b363-3b7fe8e74483",
                      "Key Vault Crypto Officer": "/providers/Microsoft.Authorization/roleDefinitions/14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                      "Key Vault Crypto User": "/providers/Microsoft.Authorization/roleDefinitions/12338af0-0e69-4776-bea7-57ae8d297424",
                      "Key Vault Secrets Officer": "/providers/Microsoft.Authorization/roleDefinitions/b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                      "Key Vault Secrets User": "/providers/Microsoft.Authorization/roleDefinitions/4633458b-17de-408a-b874-0445c86b69e6",
                      "Key Vault Certificates Officer": "/providers/Microsoft.Authorization/roleDefinitions/a4417e6f-fecd-4de8-b567-7b0420556985",
                      "Key Vault Reader": "/providers/Microsoft.Authorization/roleDefinitions/21090545-7ca7-4776-b22c-e363652d74d2",
                      "Key Vault Crypto Service Encryption User": "/providers/Microsoft.Authorization/roleDefinitions/e147488a-f6f5-4113-8e2d-b22465e65bf6",
                      "Azure Arc Kubernetes Viewer": "/providers/Microsoft.Authorization/roleDefinitions/63f0a09d-1495-4db4-a681-037d84835eb4",
                      "Azure Arc Kubernetes Writer": "/providers/Microsoft.Authorization/roleDefinitions/5b999177-9696-4545-85c7-50de3797e5a1",
                      "Azure Arc Kubernetes Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/8393591c-06b9-48a2-a542-1bd6b377f6a2",
                      "Azure Arc Kubernetes Admin": "/providers/Microsoft.Authorization/roleDefinitions/dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                      "Azure Kubernetes Service RBAC Cluster Admin": "/providers/Microsoft.Authorization/roleDefinitions/b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                      "Azure Kubernetes Service RBAC Admin": "/providers/Microsoft.Authorization/roleDefinitions/3498e952-d568-435e-9b2c-8d77e338d7f7",
                      "Azure Kubernetes Service RBAC Reader": "/providers/Microsoft.Authorization/roleDefinitions/7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                      "Azure Kubernetes Service RBAC Writer": "/providers/Microsoft.Authorization/roleDefinitions/a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                      "Services Hub Operator": "/providers/Microsoft.Authorization/roleDefinitions/82200a5b-e217-47a5-b665-6d8765ee745b",
                      "Object Understanding Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/d18777c0-1514-4662-8490-608db7d334b6",
                      "Azure Arc Enabled Kubernetes Cluster User Role": "/providers/Microsoft.Authorization/roleDefinitions/00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                      "SignalR REST API Owner": "/providers/Microsoft.Authorization/roleDefinitions/fd53cd77-2268-407a-8f46-7e7863d0f521",
                      "Collaborative Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/daa9e50b-21df-454c-94a6-a8050adab352",
                      "Device Update Reader": "/providers/Microsoft.Authorization/roleDefinitions/e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                      "Device Update Administrator": "/providers/Microsoft.Authorization/roleDefinitions/02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                      "Device Update Content Administrator": "/providers/Microsoft.Authorization/roleDefinitions/0378884a-3af5-44ab-8323-f5b22f9f3c98",
                      "Device Update Deployments Administrator": "/providers/Microsoft.Authorization/roleDefinitions/e4237640-0e3d-4a46-8fda-70bc94856432",
                      "Device Update Deployments Reader": "/providers/Microsoft.Authorization/roleDefinitions/49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                      "Device Update Content Reader": "/providers/Microsoft.Authorization/roleDefinitions/d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                      "Cognitive Services Metrics Advisor Administrator": "/providers/Microsoft.Authorization/roleDefinitions/cb43c632-a144-4ec5-977c-e80c4affc34a",
                      "Cognitive Services Metrics Advisor User": "/providers/Microsoft.Authorization/roleDefinitions/3b20f47b-3825-43cb-8114-4bd2201156a8",
                      "AgFood Platform Service Reader": "/providers/Microsoft.Authorization/roleDefinitions/7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                      "AgFood Platform Service Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8508508a-4469-4e45-963b-2518ee0bb728",
                      "AgFood Platform Service Admin": "/providers/Microsoft.Authorization/roleDefinitions/f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                      "Managed HSM contributor": "/providers/Microsoft.Authorization/roleDefinitions/18500a29-7fe2-46b2-a342-b16a415e101d",
                      "Security Detonation Chamber Submitter": "/providers/Microsoft.Authorization/roleDefinitions/0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                      "SignalR REST API Reader": "/providers/Microsoft.Authorization/roleDefinitions/ddde6b66-c0df-4114-a159-3618637b3035",
                      "SignalR Service Owner": "/providers/Microsoft.Authorization/roleDefinitions/7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                      "Reservation Purchaser": "/providers/Microsoft.Authorization/roleDefinitions/f7b75c60-3036-4b75-91c3-6b41c27c1689",
                      "Storage Account Backup Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                      "Experimentation Metric Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6188b7c9-7d01-4f99-a59f-c88b630326c0",
                      "Project Babylon Data Curator": "/providers/Microsoft.Authorization/roleDefinitions/9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                      "Project Babylon Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/c8d896ba-346d-4f50-bc1d-7d1c84130446",
                      "Project Babylon Data Source Administrator": "/providers/Microsoft.Authorization/roleDefinitions/05b7651b-dc44-475e-b74d-df3db49fae0f",
                      "Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                      "Desktop Virtualization Reader": "/providers/Microsoft.Authorization/roleDefinitions/49a72310-ab8d-41df-bbb0-79b649203868",
                      "Desktop Virtualization Contributor": "/providers/Microsoft.Authorization/roleDefinitions/082f0a83-3be5-4ba1-904c-961cca79b387",
                      "Desktop Virtualization Workspace Contributor": "/providers/Microsoft.Authorization/roleDefinitions/21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                      "Desktop Virtualization User Session Operator": "/providers/Microsoft.Authorization/roleDefinitions/ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                      "Desktop Virtualization Session Host Operator": "/providers/Microsoft.Authorization/roleDefinitions/2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                      "Desktop Virtualization Host Pool Reader": "/providers/Microsoft.Authorization/roleDefinitions/ceadfde2-b300-400a-ab7b-6143895aa822",
                      "Desktop Virtualization Host Pool Contributor": "/providers/Microsoft.Authorization/roleDefinitions/e307426c-f9b6-4e81-87de-d99efb3c32bc",
                      "Desktop Virtualization Application Group Reader": "/providers/Microsoft.Authorization/roleDefinitions/aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                      "Desktop Virtualization Application Group Contributor": "/providers/Microsoft.Authorization/roleDefinitions/86240b0e-9422-4c43-887b-b61143f32ba8",
                      "Desktop Virtualization Workspace Reader": "/providers/Microsoft.Authorization/roleDefinitions/0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                      "Disk Backup Reader": "/providers/Microsoft.Authorization/roleDefinitions/3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                      "Disk Restore Operator": "/providers/Microsoft.Authorization/roleDefinitions/b50d9833-a0cb-478e-945f-707fcc997c13",
                      "Disk Snapshot Contributor": "/providers/Microsoft.Authorization/roleDefinitions/7efff54f-a5b4-42b5-a1c5-5411624893ce",
                      "Microsoft.Kubernetes connected cluster role": "/providers/Microsoft.Authorization/roleDefinitions/5548b2cf-c94c-4228-90ba-30851930a12f",
                      "Security Detonation Chamber Submission Manager": "/providers/Microsoft.Authorization/roleDefinitions/a37b566d-3efa-4beb-a2f2-698963fa42ce",
                      "Security Detonation Chamber Publisher": "/providers/Microsoft.Authorization/roleDefinitions/352470b3-6a9c-4686-b503-35deb827e500",
                      "Collaborative Runtime Operator": "/providers/Microsoft.Authorization/roleDefinitions/7a6f0e70-c033-4fb1-828c-08514e5f4102",
                      "CosmosRestoreOperator": "/providers/Microsoft.Authorization/roleDefinitions/5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                      "FHIR Data Converter": "/providers/Microsoft.Authorization/roleDefinitions/a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                      "Azure Sentinel Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                      "Quota Request Operator": "/providers/Microsoft.Authorization/roleDefinitions/0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                      "EventGrid Contributor": "/providers/Microsoft.Authorization/roleDefinitions/1e241071-0855-49ea-94dc-649edcd759de",
                      "Security Detonation Chamber Reader": "/providers/Microsoft.Authorization/roleDefinitions/28241645-39f8-410b-ad48-87863e2951d5",
                      "Object Anchors Account Reader": "/providers/Microsoft.Authorization/roleDefinitions/4a167cdf-cb95-4554-9203-2347fe489bd9",
                      "Object Anchors Account Owner": "/providers/Microsoft.Authorization/roleDefinitions/ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                      "WorkloadBuilder Migration Agent Role": "/providers/Microsoft.Authorization/roleDefinitions/d17ce0a2-0697-43bc-aac5-9113337ab61c",
                      "Azure Spring Cloud Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b5537268-8956-4941-a8f0-646150406f0c",
                      "Cognitive Services Speech User": "/providers/Microsoft.Authorization/roleDefinitions/f2dc8367-1007-4938-bd23-fe263f013447",
                      "Cognitive Services Speech Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0e75ca1e-0464-4b4d-8b93-68208a576181",
                      "Cognitive Services Face Recognizer": "/providers/Microsoft.Authorization/roleDefinitions/9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                      "Media Services Account Administrator": "/providers/Microsoft.Authorization/roleDefinitions/054126f8-9a2b-4f1c-a9ad-eca461f08466",
                      "Media Services Live Events Administrator": "/providers/Microsoft.Authorization/roleDefinitions/532bc159-b25e-42c0-969e-a1d439f60d77",
                      "Media Services Media Operator": "/providers/Microsoft.Authorization/roleDefinitions/e4395492-1534-4db2-bedf-88c14621589c",
                      "Media Services Policy Administrator": "/providers/Microsoft.Authorization/roleDefinitions/c4bba371-dacd-4a26-b320-7250bca963ae",
                      "Media Services Streaming Endpoints Administrator": "/providers/Microsoft.Authorization/roleDefinitions/99dba123-b5fe-44d5-874c-ced7199a5804",
                      "Stream Analytics Query Tester": "/providers/Microsoft.Authorization/roleDefinitions/1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                      "AnyBuild Builder": "/providers/Microsoft.Authorization/roleDefinitions/a2138dac-4907-4679-a376-736901ed8ad8",
                      "IoT Hub Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                      "IoT Hub Twin Contributor": "/providers/Microsoft.Authorization/roleDefinitions/494bdba2-168f-4f31-a0a1-191d2f7c028c",
                      "IoT Hub Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                      "IoT Hub Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/4fc6c259-987e-4a07-842e-c321cc9d413f",
                      "Test Base Reader": "/providers/Microsoft.Authorization/roleDefinitions/15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                      "Search Index Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/1407120a-92aa-4202-b7e9-c0e197c71c8f",
                      "Search Index Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                      "Storage Table Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/76199698-9eea-4c19-bc75-cec21354c6b6",
                      "Storage Table Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                      "DICOM Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                      "DICOM Data Owner": "/providers/Microsoft.Authorization/roleDefinitions/58a3b984-7adf-4c20-983a-32417c86fbc8",
                      "EventGrid Data Sender": "/providers/Microsoft.Authorization/roleDefinitions/d5a91429-5739-47e2-a06b-3470a27159e7",
                      "Disk Pool Operator": "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840",
                      "AzureML Data Scientist": "/providers/Microsoft.Authorization/roleDefinitions/f6c7c914-8db3-469d-8ca1-694a8f32e121",
                      "Grafana Admin": "/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                      "Azure Connected SQL Server Onboarding": "/providers/Microsoft.Authorization/roleDefinitions/e8113dce-c529-4d33-91fa-e9b972617508",
                      "Azure Relay Sender": "/providers/Microsoft.Authorization/roleDefinitions/26baccc8-eea7-41f1-98f4-1762cc7f685d",
                      "Azure Relay Owner": "/providers/Microsoft.Authorization/roleDefinitions/2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                      "Azure Relay Listener": "/providers/Microsoft.Authorization/roleDefinitions/26e0b698-aa6d-4085-9386-aadae190014d",
                      "Grafana Viewer": "/providers/Microsoft.Authorization/roleDefinitions/60921a7e-fef1-4a43-9b16-a26c52ad4769",
                      "Grafana Editor": "/providers/Microsoft.Authorization/roleDefinitions/a79a5197-3a5c-4973-a920-486035ffd60f",
                      "Automation Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "Kubernetes Extension Contributor": "/providers/Microsoft.Authorization/roleDefinitions/85cb6faf-e071-4c9b-8136-154b5a04f717",
                      "Device Provisioning Service Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/10745317-c249-44a1-a5ce-3a4353c0bbd8",
                      "Device Provisioning Service Data Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                      "CodeSigning Certificate Profile Signer": "/providers/Microsoft.Authorization/roleDefinitions/2837e146-70d7-4cfd-ad55-7efa6464f958",
                      "Azure Spring Cloud Service Registry Reader": "/providers/Microsoft.Authorization/roleDefinitions/cff1b556-2399-4e7e-856d-a8f754be7b65",
                      "Azure Spring Cloud Service Registry Contributor": "/providers/Microsoft.Authorization/roleDefinitions/f5880b48-c26d-48be-b172-7927bfa1c8f1",
                      "Azure Spring Cloud Config Server Reader": "/providers/Microsoft.Authorization/roleDefinitions/d04c6db6-4947-4782-9e91-30a88feb7be7",
                      "Azure Spring Cloud Config Server Contributor": "/providers/Microsoft.Authorization/roleDefinitions/a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                      "Azure VM Managed identities restore Contributor": "/providers/Microsoft.Authorization/roleDefinitions/6ae96244-5829-4925-a7d3-5975537d91dd",
                      "Azure Maps Search and Render Data Reader": "/providers/Microsoft.Authorization/roleDefinitions/6be48352-4f82-47c9-ad5e-0acacefdb005",
                      "Azure Maps Contributor": "/providers/Microsoft.Authorization/roleDefinitions/dba33070-676a-4fb0-87fa-064dc56ff7fb"
                    },
                    "roleDefinitionId_var": "[if(contains(variables('builtInRoleNames_var'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames_var')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionId_var')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId'))]",
                      "metadata": {
                        "description": "The GUID of the Role Assignment"
                      }
                    },
                    "scope": {
                      "type": "string",
                      "value": "[resourceGroup().id]",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId(parameters('resourceGroupName'), 'Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionId_var'), parameters('principalId')))]",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at"
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "managedIdentityResourceId": {
              "type": "string",
              "value": "[if(and(parameters('createStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time'))), '2020-10-01').outputs.resourceId.value, '')]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[if(and(parameters('createStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', parameters('avdStorageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Managed-Identity-{0}', parameters('time'))), '2020-10-01').outputs.clientId.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "avdBaselineResourceGroups",
        "[subscriptionResourceId(parameters('avdWorkloadSubsId'), 'Microsoft.Resources/deployments', format('Deploy-{0}-{1}', variables('varAvdStorageObjectsRgName'), parameters('time')))]"
      ]
    },
    {
      "condition": "[parameters('avdDeploySessionHosts')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Workload-KeyVault-{0}', parameters('time'))]",
      "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
      "resourceGroup": "[format('{0}', variables('varAvdServiceObjectsRgName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varAvdWrklKvName')]"
          },
          "location": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "enableRbacAuthorization": {
            "value": false
          },
          "enablePurgeProtection": {
            "value": true
          },
          "softDeleteRetentionInDays": {
            "value": 7
          },
          "networkAcls": {
            "value": {
              "bypass": "AzureServices",
              "defaultAction": "Deny",
              "virtualNetworkRules": [],
              "ipRules": []
            }
          },
          "privateEndpoints": "[if(parameters('avdVnetPrivateDnsZone'), createObject('value', createArray(createObject('name', variables('varAvdWrklKvPrivateEndpointName'), 'subnetResourceId', if(parameters('createAvdVnet'), format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName')), parameters('existingVnetSubnetResourceId')), 'service', 'vault', 'privateDnsZoneResourceIds', createArray(parameters('avdVnetPrivateDnsZoneKeyvaultId'))))), createObject('value', createArray(createObject('name', variables('varAvdWrklKvPrivateEndpointName'), 'subnetResourceId', if(parameters('createAvdVnet'), format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName')), parameters('existingVnetSubnetResourceId')), 'service', 'vault'))))]",
          "secrets": {
            "value": {
              "secureList": "[if(not(equals(parameters('avdIdentityServiceProvider'), 'AAD')), createArray(createObject('name', 'avdVmLocalUserPassword', 'value', parameters('avdVmLocalUserPassword'), 'contentType', 'Session host local user credentials'), createObject('name', 'avdVmLocalUserName', 'value', parameters('avdVmLocalUserName'), 'contentType', 'Session host local user credentials'), createObject('name', 'avdDomainJoinUserName', 'value', parameters('avdDomainJoinUserName'), 'contentType', 'Domain join credentials'), createObject('name', 'avdDomainJoinUserPassword', 'value', parameters('avdDomainJoinUserPassword'), 'contentType', 'Domain join credentials')), createArray(createObject('name', 'avdVmLocalUserPassword', 'value', parameters('avdVmLocalUserPassword'), 'contentType', 'Session host local user credentials'), createObject('name', 'avdVmLocalUserName', 'value', parameters('avdVmLocalUserName'), 'contentType', 'Session host local user credentials'), createObject('name', 'avdDomainJoinUserName', 'value', 'AAD-Joined-Deployment-No-Domain-Credentials', 'contentType', 'Domain join credentials'), createObject('name', 'avdDomainJoinUserPassword', 'value', 'AAD-Joined-Deployment-No-Domain-Credentials', 'contentType', 'Domain join credentials')))]"
            }
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varCommonResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "2818938470534718414"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 24,
              "metadata": {
                "description": "Optional. Name of the Key Vault. If no name is provided, then unique name will be created."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of access policies object"
              }
            },
            "secrets": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. All secrets to create"
              }
            },
            "keys": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. All keys to create"
              }
            },
            "enableVaultForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute"
              }
            },
            "enableVaultForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for a template deployment"
              }
            },
            "enableVaultForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "allowedValues": [
                true,
                false
              ],
              "metadata": {
                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
              }
            },
            "vaultSku": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "premium",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the SKU for the vault"
              }
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Service endpoint object information. For security reasons, it is recommended to set the DefaultAction Deny"
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "enabled",
              "allowedValues": [
                "enabled",
                "disabled"
              ],
              "metadata": {
                "description": "Optional. Property to specify whether the vault will accept traffic from public internet. If set to \"disabled\" all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub"
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub"
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to. "
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub"
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "privateEndpoints": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Configuration Details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "enableDefaultTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "AuditEvent",
                "AzurePolicyEvaluationDetails"
              ],
              "allowedValues": [
                "AuditEvent",
                "AzurePolicyEvaluationDetails"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "formattedAccessPolicies",
                "count": "[length(parameters('accessPolicies'))]",
                "input": {
                  "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                  "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                  "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                  "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                }
              }
            ],
            "maxNameLength": 24,
            "uniquenameUntrim": "[uniqueString(format('Key Vault{0}', parameters('baseTime')))]",
            "uniquename": "[if(greater(length(variables('uniquenameUntrim')), variables('maxNameLength')), substring(variables('uniquenameUntrim'), 0, variables('maxNameLength')), variables('uniquenameUntrim'))]",
            "name_var": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniquename'))]",
            "networkAcls_var": {
              "bypass": "[if(not(empty(parameters('networkAcls'))), parameters('networkAcls').bypass, null())]",
              "defaultAction": "[if(not(empty(parameters('networkAcls'))), parameters('networkAcls').defaultAction, null())]",
              "virtualNetworkRules": "[if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'virtualNetworkRules')), parameters('networkAcls').virtualNetworkRules, createArray())]",
              "ipRules": "[if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'ipRules')), parameters('networkAcls').ipRules, createArray())]"
            },
            "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]"
          },
          "resources": [
            {
              "condition": "[parameters('enableDefaultTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2021-04-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-11-01-preview",
              "name": "[variables('name_var')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "createMode": "[parameters('createMode')]",
                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[variables('formattedAccessPolicies')]",
                "sku": {
                  "name": "[parameters('vaultSku')]",
                  "family": "A"
                },
                "networkAcls": "[if(not(empty(parameters('networkAcls'))), variables('networkAcls_var'), null())]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('name_var'))]",
              "name": "[format('{0}-{1}-lock', variables('name_var'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('name_var'))]",
              "name": "[parameters('diagnosticSettingsName')]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('accessPolicies')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('name_var')]"
                  },
                  "accessPolicies": {
                    "value": "[variables('formattedAccessPolicies')]"
                  },
                  "enableDefaultTelemetry": {
                    "value": "[parameters('enableDefaultTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "16446955179549543980"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "add",
                      "metadata": {
                        "description": "Optional. The access policy deployment"
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the access policies assignment was created in."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the access policies assignment"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the access policies assignment"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_secrets",
                "count": "[length(variables('secretList'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('secretList')[copyIndex()].name]"
                  },
                  "value": {
                    "value": "[variables('secretList')[copyIndex()].value]"
                  },
                  "keyVaultName": {
                    "value": "[variables('name_var')]"
                  },
                  "attributesEnabled": "[if(contains(variables('secretList')[copyIndex()], 'attributesEnabled'), createObject('value', variables('secretList')[copyIndex()].attributesEnabled), createObject('value', true()))]",
                  "attributesExp": "[if(contains(variables('secretList')[copyIndex()], 'attributesExp'), createObject('value', variables('secretList')[copyIndex()].attributesExp), createObject('value', -1))]",
                  "attributesNbf": "[if(contains(variables('secretList')[copyIndex()], 'attributesNbf'), createObject('value', variables('secretList')[copyIndex()].attributesNbf), createObject('value', -1))]",
                  "contentType": "[if(contains(variables('secretList')[copyIndex()], 'contentType'), createObject('value', variables('secretList')[copyIndex()].contentType), createObject('value', ''))]",
                  "tags": "[if(contains(variables('secretList')[copyIndex()], 'tags'), createObject('value', variables('secretList')[copyIndex()].tags), createObject('value', createObject()))]",
                  "roleAssignments": "[if(contains(variables('secretList')[copyIndex()], 'roleAssignments'), createObject('value', variables('secretList')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                  "enableDefaultTelemetry": {
                    "value": "[parameters('enableDefaultTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "7471684843210767978"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "contentType": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The content type of the secret."
                      }
                    },
                    "value": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "contentType": "[parameters('contentType')]",
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                          "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                        },
                        "value": "[parameters('value')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "secret_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "13306903821900642888"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                              "name": "[guid(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the secret."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the secret."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the secret was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_keys",
                "count": "[length(parameters('keys'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('keys')[copyIndex()].name]"
                  },
                  "keyVaultName": {
                    "value": "[variables('name_var')]"
                  },
                  "attributesEnabled": "[if(contains(parameters('keys')[copyIndex()], 'attributesEnabled'), createObject('value', parameters('keys')[copyIndex()].attributesEnabled), createObject('value', true()))]",
                  "attributesExp": "[if(contains(parameters('keys')[copyIndex()], 'attributesExp'), createObject('value', parameters('keys')[copyIndex()].attributesExp), createObject('value', -1))]",
                  "attributesNbf": "[if(contains(parameters('keys')[copyIndex()], 'attributesNbf'), createObject('value', parameters('keys')[copyIndex()].attributesNbf), createObject('value', -1))]",
                  "curveName": "[if(contains(parameters('keys')[copyIndex()], 'curveName'), createObject('value', parameters('keys')[copyIndex()].curveName), createObject('value', 'P-256'))]",
                  "keyOps": "[if(contains(parameters('keys')[copyIndex()], 'keyOps'), createObject('value', parameters('keys')[copyIndex()].keyOps), createObject('value', createArray()))]",
                  "keySize": "[if(contains(parameters('keys')[copyIndex()], 'keySize'), createObject('value', parameters('keys')[copyIndex()].keySize), createObject('value', -1))]",
                  "kty": "[if(contains(parameters('keys')[copyIndex()], 'kty'), createObject('value', parameters('keys')[copyIndex()].kty), createObject('value', 'EC'))]",
                  "tags": "[if(contains(parameters('keys')[copyIndex()], 'tags'), createObject('value', parameters('keys')[copyIndex()].tags), createObject('value', createObject()))]",
                  "roleAssignments": "[if(contains(parameters('keys')[copyIndex()], 'roleAssignments'), createObject('value', parameters('keys')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                  "enableDefaultTelemetry": {
                    "value": "[parameters('enableDefaultTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "12392393813335743864"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key vault"
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "curveName": {
                      "type": "string",
                      "defaultValue": "P-256",
                      "allowedValues": [
                        "P-256",
                        "P-256K",
                        "P-384",
                        "P-521"
                      ],
                      "metadata": {
                        "description": "Optional. The elliptic curve name."
                      }
                    },
                    "keyOps": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "decrypt",
                        "encrypt",
                        "import",
                        "sign",
                        "unwrapKey",
                        "verify",
                        "wrapKey"
                      ],
                      "metadata": {
                        "description": "Optional. Array of JsonWebKeyOperation"
                      }
                    },
                    "keySize": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                      }
                    },
                    "kty": {
                      "type": "string",
                      "defaultValue": "EC",
                      "allowedValues": [
                        "EC",
                        "EC-HSM",
                        "RSA",
                        "RSA-HSM"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the key."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2019-09-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                          "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                        },
                        "curveName": "[parameters('curveName')]",
                        "keyOps": "[parameters('keyOps')]",
                        "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                        "kty": "[parameters('kty')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "key_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "7521968378857953711"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                              "name": "[guid(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the key."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the key."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the key was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_privateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateEndpointResourceId": {
                    "value": "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
                  },
                  "privateEndpointVnetLocation": "[if(empty(parameters('privateEndpoints')), createObject('value', 'dummy'), createObject('value', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location))]",
                  "privateEndpointObj": {
                    "value": "[parameters('privateEndpoints')[copyIndex()]]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "7447668944611586064"
                    }
                  },
                  "parameters": {
                    "privateEndpointResourceId": {
                      "type": "string"
                    },
                    "privateEndpointVnetLocation": {
                      "type": "string"
                    },
                    "privateEndpointObj": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
                    "privateEndpoint_var": {
                      "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
                      "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
                      "service": [
                        "[parameters('privateEndpointObj').service]"
                      ],
                      "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), if(empty(parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray(), parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray())]",
                      "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), null(), parameters('privateEndpointObj').customDnsConfigs), null())]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2021-05-01",
                      "name": "[variables('privateEndpoint_var').name]",
                      "location": "[parameters('privateEndpointVnetLocation')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[format('nic-01-{0}', variables('privateEndpoint_var').name)]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateEndpoint_var').name]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                              "groupIds": "[variables('privateEndpoint_var').service]"
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": [],
                        "subnet": {
                          "id": "[variables('privateEndpoint_var').subnetResourceId]"
                        },
                        "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
                      }
                    },
                    {
                      "condition": "[not(empty(variables('privateEndpoint_var').privateDnsZoneResourceIds))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/default', variables('privateEndpoint_var').name)]",
                      "properties": {
                        "copy": [
                          {
                            "name": "privateDnsZoneConfigs",
                            "count": "[length(range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds)))]",
                            "input": {
                              "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds))[copyIndex('privateDnsZoneConfigs')]], '/'))]",
                              "properties": {
                                "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds))[copyIndex('privateDnsZoneConfigs')]]]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            },
            {
              "copy": {
                "name": "keyVault_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-KeyVault-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "4496681191112876263"
                    }
                  },
                  "parameters": {
                    "principalIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The IDs of the prinicpals to assign to role to"
                      }
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Description of role assignment"
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]"
              ]
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('name_var'))]",
              "metadata": {
                "description": "The resource ID of the key vault."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the resource group the key vault was created in."
              }
            },
            "name": {
              "type": "string",
              "value": "[variables('name_var')]",
              "metadata": {
                "description": "The name of the key vault."
              }
            },
            "uri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('name_var')), '2021-11-01-preview').vaultUri]",
              "metadata": {
                "description": "The URI of the key vault."
              }
            }
          }
        }
      },
      "dependsOn": [
        "avdBaselineResourceGroups",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[and(and(variables('varCreateAvdFslogixDeployment'), parameters('avdDeploySessionHosts')), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Storage-Fslogix-Azure-Files-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storagePurpose": {
            "value": "fslogix"
          },
          "fileShareCustomName": {
            "value": "[parameters('fslogixFileShareCustomName')]"
          },
          "identityServiceProvider": {
            "value": "[parameters('avdIdentityServiceProvider')]"
          },
          "dscAgentPackageLocation": {
            "value": "[variables('varDscAgentPackageLocation')]"
          },
          "domainJoinUserPassword": {
            "value": "[parameters('avdDomainJoinUserPassword')]"
          },
          "avdStorageCustomOuPath": {
            "value": "[variables('varStorageCustomOuPath')]"
          },
          "managementVmName": {
            "value": "[variables('varManagementVmName')]"
          },
          "avdOuStgPath": {
            "value": "[variables('varOuStgPath')]"
          },
          "avdCreateOuForStorageString": {
            "value": "[variables('varCreateOuForStorageString')]"
          },
          "managedIdentityClientId": "[if(variables('varCreateStorageDeployment'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time'))), '2020-10-01').outputs.managedIdentityClientId.value), createObject('value', ''))]",
          "storageToDomainScript": {
            "value": "[variables('varStorageToDomainScript')]"
          },
          "storageToDomainScriptUri": {
            "value": "[variables('varStorageToDomainScriptUri')]"
          },
          "timeZone": {
            "value": "[variables('varTimeZones')[parameters('avdSessionHostLocation')]]"
          },
          "applicationSecurityGroupResourceId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdApplicationSecurityGroupResourceId.value)), createObject('value', ''))]",
          "computeObjectsRgName": {
            "value": "[variables('varAvdComputeObjectsRgName')]"
          },
          "domainJoinUserName": {
            "value": "[parameters('avdDomainJoinUserName')]"
          },
          "wrklKvName": {
            "value": "[variables('varAvdWrklKvName')]"
          },
          "serviceObjectsRgName": {
            "value": "[variables('varAvdServiceObjectsRgName')]"
          },
          "fileShareQuotaSize": {
            "value": "[parameters('fslogixFileShareQuotaSize')]"
          },
          "identityDomainName": {
            "value": "[parameters('avdIdentityDomainName')]"
          },
          "imageTemplateDefinitionId": {
            "value": "[parameters('avdImageTemplateDefinitionId')]"
          },
          "sessionHostOuPath": {
            "value": "[parameters('avdOuPath')]"
          },
          "sessionHostDiskType": {
            "value": "[parameters('avdSessionHostDiskType')]"
          },
          "sessionHostLocation": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "sessionHostsSize": {
            "value": "[parameters('avdSessionHostsSize')]"
          },
          "storageObjectsRgName": {
            "value": "[variables('varAvdStorageObjectsRgName')]"
          },
          "subnetId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName'))), createObject('value', parameters('existingVnetSubnetResourceId')))]",
          "createAvdVnet": {
            "value": "[parameters('createAvdVnet')]"
          },
          "vmLocalUserName": {
            "value": "[parameters('avdVmLocalUserName')]"
          },
          "vnetPrivateDnsZone": {
            "value": "[parameters('avdVnetPrivateDnsZone')]"
          },
          "vnetPrivateDnsZoneFilesId": {
            "value": "[parameters('avdVnetPrivateDnsZoneFilesId')]"
          },
          "workloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "storageManagedIdentityResourceId": "[if(variables('varCreateStorageDeployment'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time'))), '2020-10-01').outputs.managedIdentityResourceId.value), createObject('value', ''))]",
          "fileShareMultichannel": "[if(equals(parameters('fslogixStoragePerformance'), 'Premium'), createObject('value', true()), createObject('value', false()))]",
          "storageSku": {
            "value": "[variables('varFslogixStorageSku')]"
          },
          "marketPlaceGalleryWindowsManagementVm": {
            "value": "[variables('varMarketPlaceGalleryWindows')[parameters('avdOsImage')]]"
          },
          "subnetResourceId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName'))), createObject('value', parameters('existingVnetSubnetResourceId')))]",
          "useSharedImage": {
            "value": "[parameters('useSharedImage')]"
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varAllResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]",
          "alaWorkspaceResourceId": "[if(parameters('avdDeployMonitoring'), if(parameters('deployAlaWorkspace'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceResourceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId'))), createObject('value', ''))]",
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('avdAlaWorkspaceDataRetention')]"
          },
          "useCustomNaming": {
            "value": "[parameters('avdUseCustomNaming')]"
          },
          "storageAccountPrefixCustomName": {
            "value": "[parameters('storageAccountPrefixCustomName')]"
          },
          "namingUniqueStringSixChar": {
            "value": "[variables('varAvdNamingUniqueStringSixChar')]"
          },
          "deploymentPrefixLowercase": {
            "value": "[variables('varDeploymentPrefixLowercase')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "3537102157819566449"
            }
          },
          "parameters": {
            "computeObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name for the session hosts."
              }
            },
            "workloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "timeZone": {
              "type": "string",
              "metadata": {
                "description": "Required. Virtual machine time zone."
              }
            },
            "storageObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for Azure Files."
              }
            },
            "identityServiceProvider": {
              "type": "string",
              "metadata": {
                "description": "Required, The service providing domain services for Azure Virtual Desktop."
              }
            },
            "serviceObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for Azure Files."
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "AVD subnet ID."
              }
            },
            "createAvdVnet": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Create new virtual network."
              }
            },
            "sessionHostLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy compute services."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "sessionHostsSize": {
              "type": "string",
              "metadata": {
                "description": "Session host VM size."
              }
            },
            "sessionHostDiskType": {
              "type": "string",
              "metadata": {
                "description": "OS disk type for session host."
              }
            },
            "marketPlaceGalleryWindowsManagementVm": {
              "type": "object",
              "metadata": {
                "description": "Market Place OS image"
              }
            },
            "useSharedImage": {
              "type": "bool",
              "metadata": {
                "description": "Set to deploy image from Azure. Compute Gallery"
              }
            },
            "imageTemplateDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Source custom image ID."
              }
            },
            "storageManagedIdentityResourceId": {
              "type": "string",
              "metadata": {
                "description": "Storage Managed Identity Resource ID."
              }
            },
            "fileShareMultichannel": {
              "type": "bool",
              "metadata": {
                "description": "File share SMB multichannel."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Subnet resource ID for the Azure Files private endpoint."
              }
            },
            "vmLocalUserName": {
              "type": "string",
              "metadata": {
                "description": "Local administrator username."
              }
            },
            "identityDomainName": {
              "type": "string",
              "metadata": {
                "description": "Required. AD domain name."
              }
            },
            "wrklKvName": {
              "type": "string",
              "metadata": {
                "description": "Required. Keyvault name to get credentials from."
              }
            },
            "domainJoinUserName": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD session host domain join credentials."
              }
            },
            "sessionHostOuPath": {
              "type": "string",
              "metadata": {
                "description": "Optional. OU path to join AVd VMs."
              }
            },
            "applicationSecurityGroupResourceId": {
              "type": "string",
              "metadata": {
                "description": "Application Security Group (ASG) for the session hosts."
              }
            },
            "storageSku": {
              "type": "string",
              "metadata": {
                "description": "*Azure Files storage account SKU."
              }
            },
            "fileShareQuotaSize": {
              "type": "int",
              "metadata": {
                "description": "*Azure File share quota"
              }
            },
            "vnetPrivateDnsZone": {
              "type": "bool",
              "metadata": {
                "description": "Use Azure private DNS zones for private endpoints."
              }
            },
            "vnetPrivateDnsZoneFilesId": {
              "type": "string",
              "metadata": {
                "description": "Use Azure private DNS zones for private endpoints."
              }
            },
            "storageToDomainScript": {
              "type": "string",
              "metadata": {
                "description": "Script name for adding storage account to Active Directory."
              }
            },
            "storageToDomainScriptUri": {
              "type": "string",
              "metadata": {
                "description": "URI for the script for adding the storage account to Active Directory."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "managementVmName": {
              "type": "string",
              "metadata": {
                "description": "Name for management virtual machine. for tools and to join Azure Files to domain."
              }
            },
            "alaWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Optional. Log analytics workspace for diagnostic logs."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "metadata": {
                "description": "Optional. Diagnostic logs retention."
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            },
            "storagePurpose": {
              "type": "string",
              "metadata": {
                "description": "Sets purpose of the storage account."
              }
            },
            "useCustomNaming": {
              "type": "bool",
              "metadata": {
                "description": "Required. AVD resources custom naming. (Default: false)"
              }
            },
            "storageAccountPrefixCustomName": {
              "type": "string",
              "metadata": {
                "description": "Sets purpose of the storage account."
              }
            },
            "deploymentPrefixLowercase": {
              "type": "string",
              "metadata": {
                "description": "Deployment Prefix set in main template, in lowercase."
              }
            },
            "namingUniqueStringSixChar": {
              "type": "string",
              "metadata": {
                "description": "Unique name truncated into 6 characters"
              }
            },
            "dscAgentPackageLocation": {
              "type": "string",
              "metadata": {
                "description": "Sets location of DSC Agent."
              }
            },
            "domainJoinUserPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Domain join user password."
              }
            },
            "avdStorageCustomOuPath": {
              "type": "string",
              "metadata": {
                "description": "Custom OU path for storage."
              }
            },
            "avdOuStgPath": {
              "type": "string",
              "metadata": {
                "description": "OU Storage Path"
              }
            },
            "avdCreateOuForStorageString": {
              "type": "string",
              "metadata": {
                "description": "Optional. If OU for Azure Storage needs to be created - set to true and ensure the domain join credentials have priviledge to create OU and create computer objects or join to domain. (Default: \"\")"
              }
            },
            "managedIdentityClientId": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity Client ID"
              }
            },
            "fileShareCustomName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Storage account profile container file share prefix custom name. (Default: storagePurpose-pc-app1-001)"
              },
              "maxLength": 64
            }
          },
          "variables": {
            "varStoragePurposeLower": "[toLower(parameters('storagePurpose'))]",
            "varAvdFileShareLogsDiagnostic": [
              "StorageRead",
              "StorageWrite",
              "StorageDelete"
            ],
            "varAvdFileShareMetricsDiagnostic": [
              "Transaction"
            ],
            "varFileShareName": "[if(parameters('useCustomNaming'), parameters('fileShareCustomName'), format('{0}-pc-{1}-001', variables('varStoragePurposeLower'), parameters('deploymentPrefixLowercase')))]",
            "varWrklStoragePrivateEndpointName": "[format('pe-{0}-file', variables('varStorageName'))]",
            "varStoragePurposeLowerPrefix": "[substring(variables('varStoragePurposeLower'), 0, 2)]",
            "varStorageName": "[if(parameters('useCustomNaming'), format('{0}{1}{2}{3}', parameters('storageAccountPrefixCustomName'), variables('varStoragePurposeLower'), parameters('deploymentPrefixLowercase'), parameters('namingUniqueStringSixChar')), format('stavd{0}{1}{2}', variables('varStoragePurposeLower'), parameters('deploymentPrefixLowercase'), parameters('namingUniqueStringSixChar')))]",
            "varStorageToDomainScriptArgs": "[format('-DscPath {0} -StorageAccountName {1} -StorageAccountRG {2} -StoragePurpose {3} -DomainName {4} -IdentityServiceProvider {5} -AzureCloudEnvironment AzureCloud -SubscriptionId {6} -DomainAdminUserName {7} -DomainAdminUserPassword {8} -CustomOuPath {9} -OUName {10} -CreateNewOU {11} -ShareName {12} -ClientId {13} -Verbose', parameters('dscAgentPackageLocation'), variables('varStorageName'), parameters('storageObjectsRgName'), parameters('storagePurpose'), parameters('identityDomainName'), parameters('identityServiceProvider'), parameters('workloadSubsId'), parameters('domainJoinUserName'), parameters('domainJoinUserPassword'), parameters('avdStorageCustomOuPath'), parameters('avdOuStgPath'), parameters('avdCreateOuForStorageString'), variables('varFileShareName'), parameters('managedIdentityClientId'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('storageObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varStorageName')]"
                  },
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "storageAccountSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "allowBlobPublicAccess": {
                    "value": false
                  },
                  "publicNetworkAccess": {
                    "value": "Disabled"
                  },
                  "storageAccountKind": "[if(or(equals(toLower(parameters('storageSku')), toLower('Premium_LRS')), equals(toLower(parameters('storageSku')), toLower('Premium_ZRS'))), createObject('value', 'FileStorage'), createObject('value', 'StorageV2'))]",
                  "azureFilesIdentityBasedAuthentication": "[if(equals(parameters('identityServiceProvider'), 'AADDS'), createObject('value', createObject('directoryServiceOptions', 'AADDS')), createObject('value', createObject('directoryServiceOptions', 'None')))]",
                  "storageAccountAccessTier": {
                    "value": "Hot"
                  },
                  "networkAcls": {
                    "value": {
                      "bypass": "AzureServices",
                      "defaultAction": "Deny",
                      "virtualNetworkRules": [],
                      "ipRules": []
                    }
                  },
                  "fileServices": {
                    "value": {
                      "shares": [
                        {
                          "name": "[variables('varFileShareName')]",
                          "sharedQuota": "[mul(parameters('fileShareQuotaSize'), 100)]"
                        }
                      ],
                      "protocolSettings": "[if(parameters('fileShareMultichannel'), createObject('smb', createObject('multichannel', createObject('enabled', parameters('fileShareMultichannel')))), createObject())]",
                      "diagnosticWorkspaceId": "[parameters('alaWorkspaceResourceId')]",
                      "diagnosticLogCategoriesToEnable": "[variables('varAvdFileShareLogsDiagnostic')]",
                      "diagnosticMetricsToEnable": "[variables('varAvdFileShareMetricsDiagnostic')]"
                    }
                  },
                  "privateEndpoints": "[if(parameters('vnetPrivateDnsZone'), createObject('value', createArray(createObject('name', variables('varWrklStoragePrivateEndpointName'), 'subnetResourceId', parameters('subnetResourceId'), 'service', 'file', 'privateDnsZoneResourceIds', createArray(parameters('vnetPrivateDnsZoneFilesId'))))), createObject('value', createArray(createObject('name', variables('varWrklStoragePrivateEndpointName'), 'subnetResourceId', parameters('subnetResourceId'), 'service', 'file'))))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('alaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "14539995202386924035"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Storage Account. Autogenerated with a unique string if not provided."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration Details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible"
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny"
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy"
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy"
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account"
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "basetime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Optional. Enable or disallow public network access to Storage Account.."
                      },
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ]
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "maxNameLength": 24,
                    "uniqueStorageNameUntrim": "[format('{0}', uniqueString(format('Storage Account{0}', parameters('basetime'))))]",
                    "uniqueStorageName": "[if(greater(length(variables('uniqueStorageNameUntrim')), variables('maxNameLength')), substring(variables('uniqueStorageNameUntrim'), 0, variables('maxNameLength')), variables('uniqueStorageNameUntrim'))]",
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-08-01",
                      "name": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]"
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(not(empty(parameters('networkAcls'))), parameters('networkAcls').bypass, null()), 'defaultAction', if(not(empty(parameters('networkAcls'))), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'virtualNetworkRules')), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'ipRules')), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "name": "[format('{0}-{1}-lock', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "15082996373537341891"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "condition": "[not(empty(parameters('privateEndpoints')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-PrivateEndpoints-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateEndpointResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                          },
                          "privateEndpointVnetLocation": "[if(not(empty(parameters('privateEndpoints'))), createObject('value', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location), createObject('value', 'dummy'))]",
                          "privateEndpointObj": {
                            "value": "[parameters('privateEndpoints')[copyIndex()]]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "1705366230414954278"
                            }
                          },
                          "parameters": {
                            "privateEndpointResourceId": {
                              "type": "string"
                            },
                            "privateEndpointVnetLocation": {
                              "type": "string"
                            },
                            "privateEndpointObj": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
                            "privateEndpoint_var": {
                              "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
                              "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
                              "service": [
                                "[parameters('privateEndpointObj').service]"
                              ],
                              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), if(empty(parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray(), parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray())]",
                              "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), null(), parameters('privateEndpointObj').customDnsConfigs), null())]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', variables('privateEndpoint_var').name, 'default')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "privateDnsZoneConfigs",
                                    "count": "[length(variables('privateEndpoint_var').privateDnsZoneResourceIds)]",
                                    "input": {
                                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                      "properties": {
                                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2021-05-01",
                              "name": "[variables('privateEndpoint_var').name]",
                              "location": "[parameters('privateEndpointVnetLocation')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "customNetworkInterfaceName": "[format('nic-01-{0}', variables('privateEndpoint_var').name)]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateEndpoint_var').name]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                      "groupIds": "[variables('privateEndpoint_var').service]"
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                                },
                                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6618821370984693546"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy"
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2019-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "10923244048734603948"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service"
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "16443708835266741837"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy"
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]",
                                          "enableDefaultTelemetry": {
                                            "value": "[parameters('enableDefaultTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "12109804807781251170"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the Storage Account."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the blob service."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the container to apply the policy to"
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API"
                                              }
                                            },
                                            "enableDefaultTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "condition": "[parameters('enableDefaultTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": []
                                                }
                                              }
                                            },
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2019-06-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "7829033958824014906"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "7589538583550800574"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service"
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service"
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "9089081737127810339"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the file service"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create"
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "569858758588246280"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "5158748013077101135"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service"
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "5428327242214663657"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the queue service"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy"
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "2081293323079275435"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "16581177078978772920"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service"
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "15932183617419777840"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the table service"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]",
                      "metadata": {
                        "description": "The name of the deployed storage account"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account"
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-08-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-08-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Management-VM-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('serviceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('managementVmName')]"
                  },
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "systemAssignedIdentity": {
                    "value": false
                  },
                  "userAssignedIdentities": {
                    "value": {
                      "[format('{0}', parameters('storageManagedIdentityResourceId'))]": {}
                    }
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('encryptionAtHost')]"
                  },
                  "availabilityZone": {
                    "value": []
                  },
                  "osType": {
                    "value": "Windows"
                  },
                  "vmSize": {
                    "value": "[parameters('sessionHostsSize')]"
                  },
                  "imageReference": "[if(parameters('useSharedImage'), createObject('value', json(format('{{''id'': ''{0}''}}', parameters('imageTemplateDefinitionId')))), createObject('value', parameters('marketPlaceGalleryWindowsManagementVm')))]",
                  "osDisk": {
                    "value": {
                      "createOption": "fromImage",
                      "deleteOption": "Delete",
                      "diskSizeGB": 128,
                      "managedDisk": {
                        "storageAccountType": "[parameters('sessionHostDiskType')]"
                      }
                    }
                  },
                  "adminUsername": {
                    "value": "[parameters('vmLocalUserName')]"
                  },
                  "adminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                      },
                      "secretName": "avdVmLocalUserPassword"
                    }
                  },
                  "nicConfigurations": {
                    "value": [
                      {
                        "nicSuffix": "nic-001-",
                        "deleteOption": "Delete",
                        "enableAcceleratedNetworking": false,
                        "ipConfigurations": "[if(parameters('createAvdVnet'), createArray(createObject('name', 'ipconfig01', 'subnetId', parameters('subnetId'), 'applicationSecurityGroups', parameters('applicationSecurityGroupResourceId'))), createArray(createObject('name', 'ipconfig01', 'subnetId', parameters('subnetId'))))]"
                      }
                    ]
                  },
                  "allowExtensionOperations": {
                    "value": true
                  },
                  "extensionDomainJoinPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                      },
                      "secretName": "avdDomainJoinUserPassword"
                    }
                  },
                  "extensionDomainJoinConfig": {
                    "value": {
                      "enabled": true,
                      "settings": {
                        "name": "[parameters('identityDomainName')]",
                        "ouPath": "[if(not(empty(parameters('sessionHostOuPath'))), parameters('sessionHostOuPath'), null())]",
                        "user": "[parameters('domainJoinUserName')]",
                        "restart": "true",
                        "options": "3"
                      }
                    }
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "4354075424594305961"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
                      "metadata": {
                        "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
                      }
                    },
                    "vmComputerNamesTransformation": {
                      "type": "string",
                      "defaultValue": "none",
                      "metadata": {
                        "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the size for the VMs"
                      }
                    },
                    "encryptionAtHost": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "securityType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "secureBootEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "vTpmEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "imageReference": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                      }
                    },
                    "plan": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                      }
                    },
                    "osDisk": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "dataDisks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "ultraSSDEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                      }
                    },
                    "adminUsername": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. Administrator username"
                      }
                    },
                    "adminPassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed"
                      }
                    },
                    "customData": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                      }
                    },
                    "certificatesToBeInstalled": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                      }
                    },
                    "vmPriority": {
                      "type": "string",
                      "defaultValue": "Regular",
                      "allowedValues": [
                        "Regular",
                        "Low",
                        "Spot"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the priority for the virtual machine."
                      }
                    },
                    "enableEvictionPolicy": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                      }
                    },
                    "maxPriceForLowPriorityVm": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                      }
                    },
                    "dedicatedHostId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Windows_Client",
                        "Windows_Server",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
                      }
                    },
                    "publicKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs"
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "bootDiagnosticStorageAccountName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Storage account used to store boot diagnostic information. Boot diagnostics will be disabled if no value is provided."
                      }
                    },
                    "bootDiagnosticStorageAccountUri": {
                      "type": "string",
                      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                      "metadata": {
                        "description": "Optional. Storage account boot diagnostic base URI."
                      }
                    },
                    "proximityPlacementGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource name of a proximity placement group."
                      }
                    },
                    "availabilitySetName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource name of an availability set. Cannot be used in combination with availability zone nor scale set."
                      }
                    },
                    "availabilityZone": {
                      "type": "array",
                      "metadata": {
                        "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                      }
                    },
                    "nicConfigurations": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Configures NICs and PIPs."
                      }
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "allowedValues": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    },
                    "nicdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "backupVaultName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Recovery service vault name to add VMs to backup."
                      }
                    },
                    "backupVaultResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                      }
                    },
                    "backupPolicyName": {
                      "type": "string",
                      "defaultValue": "DefaultPolicy",
                      "metadata": {
                        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                      }
                    },
                    "enableServerSideEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
                      }
                    },
                    "allowExtensionOperations": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                      }
                    },
                    "extensionDomainJoinPassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter"
                      }
                    },
                    "extensionDomainJoinConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionAadJoinConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the Azure AD Windows login extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionAntiMalwareConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionMonitoringAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionAzureMonitoringAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Azure Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "monitoringWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
                      }
                    },
                    "extensionDependencyAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionNetworkWatcherAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionDiskEncryptionConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionDSCConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionCustomScriptConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false,
                        "fileData": []
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionCustomScriptProtectedSetting": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                      }
                    },
                    "sasTokenValidityLength": {
                      "type": "string",
                      "defaultValue": "PT8H",
                      "metadata": {
                        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. The chosen OS type"
                      }
                    },
                    "disablePasswordAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether password authentication should be disabled."
                      }
                    },
                    "provisionVMAgent": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                      }
                    },
                    "enableAutomaticUpdates": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be TimeZoneInfo.id value from time zones returned by TimeZoneInfo.GetSystemTimeZones."
                      }
                    },
                    "additionalUnattendContent": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object"
                      }
                    },
                    "winRM": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                      }
                    },
                    "configurationProfileAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Any VM configuration profile assignments"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "publicKeysFormatted",
                        "count": "[length(parameters('publicKeys'))]",
                        "input": {
                          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                        }
                      }
                    ],
                    "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                      "ssh": {
                        "publicKeys": "[variables('publicKeysFormatted')]"
                      },
                      "provisionVMAgent": "[parameters('provisionVMAgent')]"
                    },
                    "windowsConfiguration": {
                      "provisionVMAgent": "[parameters('provisionVMAgent')]",
                      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                      "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                    },
                    "accountSasProperties": {
                      "signedServices": "b",
                      "signedPermission": "r",
                      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                      "signedResourceTypes": "o",
                      "signedProtocol": "https"
                    },
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "zones": "[if(equals(parameters('availabilityZone'), ''), null(), parameters('availabilityZone'))]",
                      "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "securityProfile": {
                          "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                          "securityType": "[parameters('securityType')]",
                          "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                        },
                        "storageProfile": {
                          "copy": [
                            {
                              "name": "dataDisks",
                              "count": "[length(parameters('dataDisks'))]",
                              "input": {
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[format('disk-{0}-{1}', padLeft(add(copyIndex('dataDisks'), 1), 3, '0'), parameters('name'))]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                                "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                                "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                                "managedDisk": {
                                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                  "diskEncryptionSet": {
                                    "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, null())]"
                                  }
                                }
                              }
                            }
                          ],
                          "imageReference": "[parameters('imageReference')]",
                          "osDisk": {
                            "name": "[format('osdisk-001-{0}', parameters('name'))]",
                            "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                            "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                            "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                            "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                            "managedDisk": {
                              "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                              "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), parameters('osDisk').managedDisk.diskEncryptionSet, null())]"
                            }
                          }
                        },
                        "additionalCapabilities": {
                          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                        },
                        "osProfile": {
                          "computerName": "[variables('vmComputerNameTransformed')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                          "secrets": "[parameters('certificatesToBeInstalled')]",
                          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('nicConfigurations'))]",
                              "input": {
                                "properties": {
                                  "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                },
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix, parameters('name')))]"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": "[not(empty(parameters('bootDiagnosticStorageAccountName')))]",
                            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                          }
                        },
                        "availabilitySet": "[if(not(empty(parameters('availabilitySetName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')))), null())]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')))), null())]",
                        "priority": "[parameters('vmPriority')]",
                        "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                        "billingProfile": "[if(and(not(empty(parameters('vmPriority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), json(format('{{\"maxPrice\":\"{0}\"}}', parameters('maxPriceForLowPriorityVm'))), null())]",
                        "host": "[if(not(empty(parameters('dedicatedHostId'))), json(format('{{\"id\":\"{0}\"}}', parameters('dedicatedHostId'))), null())]",
                        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                      },
                      "dependsOn": [
                        "virtualMachine_nic"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualMachine_nic",
                        "count": "[length(parameters('nicConfigurations'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "networkInterfaceName": {
                            "value": "[format('{0}{1}', parameters('nicConfigurations')[copyIndex()].nicSuffix, parameters('name'))]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                          "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                          "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                          "networkSecurityGroupId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'nsgId'), if(not(empty(parameters('nicConfigurations')[copyIndex()].nsgId)), createObject('value', parameters('nicConfigurations')[copyIndex()].nsgId), createObject('value', '')), createObject('value', ''))]",
                          "ipConfigurationArray": {
                            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                          },
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "pipDiagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "nicDiagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "pipdiagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "pipdiagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "nicDiagnosticMetricsToEnable": {
                            "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                          },
                          "roleAssignments": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), createObject('value', parameters('nicConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "1311240889984469923"
                            }
                          },
                          "parameters": {
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "networkSecurityGroupId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "ipConfigurationArray": {
                              "type": "array"
                            },
                            "lock": {
                              "type": "string"
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string"
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int"
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string"
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string"
                            },
                            "diagnosticEventHubName": {
                              "type": "string"
                            },
                            "pipdiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "pipdiagnosticLogCategoriesToEnable": {
                              "type": "array"
                            },
                            "nicDiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "roleAssignments": {
                              "type": "array"
                            },
                            "pipDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                              }
                            },
                            "nicDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "nicDiagnosticsMetrics",
                                "count": "[length(parameters('nicDiagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('nicDiagnosticMetricsToEnable')[copyIndex('nicDiagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('networkInterfaceName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "ipConfigurations",
                                    "count": "[length(parameters('ipConfigurationArray'))]",
                                    "input": {
                                      "name": "[if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name, null())]",
                                      "properties": {
                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                        "privateIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'vmIPAddress'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress, null()), null())]",
                                        "publicIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'pipconfiguration'), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].pipconfiguration.publicIpNameSuffix)))), null())]",
                                        "subnet": {
                                          "id": "[parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].subnetId]"
                                        },
                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), createArray(createObject('id', parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].applicationSecurityGroups)), null())]"
                                      }
                                    }
                                  }
                                ],
                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]"
                              },
                              "dependsOn": [
                                "networkInterface_publicIPConfigurations"
                              ]
                            },
                            {
                              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2017-04-01",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
                              "name": "[format('{0}-{1}-lock', parameters('networkInterfaceName'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                              ]
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
                              "name": "[parameters('nicDiagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('nicDiagnosticsMetrics')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "networkInterface_publicIPConfigurations",
                                "count": "[length(parameters('ipConfigurationArray'))]"
                              },
                              "condition": "[contains(parameters('ipConfigurationArray')[copyIndex()], 'pipconfiguration')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PIP-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "publicIPAddressName": {
                                    "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                                  },
                                  "publicIPPrefixId": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPPrefixId'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId), createObject('value', '')), createObject('value', ''))]",
                                  "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                                  "skuName": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuName'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                                  "skuTier": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuTier'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "diagnosticSettingsName": {
                                    "value": "[parameters('pipDiagnosticSettingsName')]"
                                  },
                                  "diagnosticMetricsToEnable": {
                                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                                  },
                                  "diagnosticLogCategoriesToEnable": {
                                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "roleAssignments": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'roleAssignments'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "13524796998069329748"
                                    }
                                  },
                                  "parameters": {
                                    "publicIPAddressName": {
                                      "type": "string"
                                    },
                                    "publicIPPrefixId": {
                                      "type": "string"
                                    },
                                    "publicIPAllocationMethod": {
                                      "type": "string"
                                    },
                                    "skuName": {
                                      "type": "string"
                                    },
                                    "skuTier": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string"
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int"
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string"
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string"
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string"
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array"
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array"
                                    },
                                    "lock": {
                                      "type": "string"
                                    },
                                    "roleAssignments": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('publicIPAddressName'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogs",
                                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2021-05-01",
                                      "name": "[parameters('publicIPAddressName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]",
                                        "tier": "[parameters('skuTier')]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixId'))), createObject('id', parameters('publicIPPrefixId')), null())]"
                                      }
                                    },
                                    {
                                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2017-04-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('publicIPAddressName'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "publicIpAddress_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "9188927501762835850"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the resource group the public IP address was deployed."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('publicIPAddressName')]",
                                      "metadata": {
                                        "description": "The name of the public IP address."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]",
                                      "metadata": {
                                        "description": "The resource ID of the public IP address."
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "networkInterface_rbac",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "17676457614801942286"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the prinicpals to assign to role to"
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Description of role assignment"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2021-04-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "vm_configurationProfileAssignment",
                        "count": "[length(parameters('configurationProfileAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-ConfigurationProfileAssignment-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "configurationProfile": {
                            "value": "[parameters('configurationProfileAssignments')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "15662528306426569422"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the configuration profile assignment"
                              }
                            },
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the VM to be associated"
                              }
                            },
                            "configurationProfile": {
                              "type": "string",
                              "allowedValues": [
                                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"
                              ],
                              "metadata": {
                                "description": "Required. The configuration profile of automanage"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Automanage/configurationProfileAssignments",
                              "apiVersion": "2021-04-30-preview",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('virtualMachineName'))]",
                              "name": "[parameters('name')]",
                              "properties": {
                                "configurationProfile": "[parameters('configurationProfile')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), 'Microsoft.Automanage/configurationProfileAssignments', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the configuration profile assignment"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the configuration profile assignment"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the configuration profile assignment was deployed into"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDomainJoinConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DomainJoin"
                          },
                          "publisher": {
                            "value": "Microsoft.Compute"
                          },
                          "type": {
                            "value": "JsonADDomainExtension"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionDomainJoinConfig').settings]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "protectedSettings": {
                            "value": {
                              "Password": "[parameters('extensionDomainJoinPassword')]"
                            }
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAadJoinConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-AADJoin', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "AADLoginForWindows"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.ActiveDirectory"
                          },
                          "type": {
                            "value": "AADLoginForWindows"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), createObject('value', '1.0'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionAadJoinConfig').settings]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "MicrosoftAntiMalware"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": {
                            "value": "IaaSAntimalware"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionAntiMalwareConfig').settings]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "MicrosoftMonitoringAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.EnterpriseCloud.Monitoring"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.7')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                            }
                          },
                          "protectedSettings": {
                            "value": {
                              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                            }
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAzureMonitoringAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-AzureMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "AzureMonitoringAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                          },
                          "type": {
                            "value": "DependencyAgentWindows"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                          "settings": {
                            "value": {
                              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                            }
                          },
                          "protectedSettings": {
                            "value": {
                              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                            }
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DependencyAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "NetworkWatcherAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.NetworkWatcher"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDSCConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DesiredStateConfiguration"
                          },
                          "publisher": {
                            "value": "Microsoft.Powershell"
                          },
                          "type": {
                            "value": "DSC"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                          "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "CustomScriptExtension"
                          },
                          "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "copy": [
                                {
                                  "name": "fileUris",
                                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                }
                              ]
                            }
                          },
                          "protectedSettings": {
                            "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDiskEncryptionConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DiskEncryption"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "forceUpdateTag": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                          "settings": {
                            "value": "[parameters('extensionDiskEncryptionConfig').settings]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('backupVaultName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "backupResourceName": {
                            "value": "[format('{0}/Azure/iaasvmcontainer;iaasvmcontainerv2;{1};{2}/vm;iaasvmcontainerv2;{3};{4}', parameters('backupVaultName'), resourceGroup().name, parameters('name'), resourceGroup().name, parameters('name'))]"
                          },
                          "protectedItemType": {
                            "value": "Microsoft.Compute/virtualMachines"
                          },
                          "backupPolicyId": {
                            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                          },
                          "sourceResourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "8945936083607713311"
                            }
                          },
                          "parameters": {
                            "backupResourceName": {
                              "type": "string"
                            },
                            "protectedItemType": {
                              "type": "string",
                              "allowedValues": [
                                "AzureFileShareProtectedItem",
                                "AzureVmWorkloadSAPAseDatabase",
                                "AzureVmWorkloadSAPHanaDatabase",
                                "AzureVmWorkloadSQLDatabase",
                                "DPMProtectedItem",
                                "GenericProtectedItem",
                                "MabFileFolderProtectedItem",
                                "Microsoft.ClassicCompute/virtualMachines",
                                "Microsoft.Compute/virtualMachines",
                                "Microsoft.Sql/servers/databases"
                              ]
                            },
                            "backupPolicyId": {
                              "type": "string"
                            },
                            "sourceResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('backupResourceName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "protectedItemType": "[parameters('protectedItemType')]",
                                "policyId": "[parameters('backupPolicyId')]",
                                "sourceResourceId": "[parameters('sourceResourceId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualMachine_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "16119009747037808190"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the VM."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the VM."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the VM was created in."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('storageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Management-VM-Wait-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('serviceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('AVD-managementVmWait-{0}', parameters('time'))]"
                  },
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "azPowerShellVersion": {
                    "value": "6.2"
                  },
                  "cleanupPreference": {
                    "value": "Always"
                  },
                  "timeout": {
                    "value": "PT10M"
                  },
                  "scriptContent": {
                    "value": "        Write-Host \"Start\"\n        Get-Date\n        Start-Sleep -Seconds 120\n        Write-Host \"Stop\"\n        Get-Date\n        "
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "9712062199062057663"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name of the script to be run."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzurePowerShell",
                      "allowedValues": [
                        "AzurePowerShell",
                        "AzureCLI"
                      ],
                      "metadata": {
                        "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                      }
                    },
                    "azPowerShellVersion": {
                      "type": "string",
                      "defaultValue": "3.0",
                      "metadata": {
                        "description": "Optional. Azure PowerShell module version to be used."
                      }
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure CLI module version to be used."
                      }
                    },
                    "scriptContent": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                      }
                    },
                    "primaryScriptUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                      }
                    },
                    "environmentVariables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The environment variables to pass over to the script. Must have a 'name' and a 'value' or a 'secretValue' property."
                      }
                    },
                    "supportingScriptUris": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                      }
                    },
                    "arguments": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                      }
                    },
                    "retentionInterval": {
                      "type": "string",
                      "defaultValue": "P1D",
                      "metadata": {
                        "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                      }
                    },
                    "runOnce": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                      }
                    },
                    "cleanupPreference": {
                      "type": "string",
                      "defaultValue": "Always",
                      "allowedValues": [
                        "Always",
                        "OnSuccess",
                        "OnExpiration"
                      ],
                      "metadata": {
                        "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                      }
                    },
                    "containerGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                      }
                    },
                    "timeout": {
                      "type": "string",
                      "defaultValue": "PT6H",
                      "metadata": {
                        "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "variables": {
                    "containerSettings": {
                      "containerGroupName": "[parameters('containerGroupName')]"
                    },
                    "identityType": "[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "azPowerShellVersion": "[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                        "azCliVersion": "[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                        "containerSettings": "[if(empty(parameters('containerGroupName')), null(), variables('containerSettings'))]",
                        "arguments": "[parameters('arguments')]",
                        "environmentVariables": "[if(empty(parameters('environmentVariables')), null(), parameters('environmentVariables'))]",
                        "scriptContent": "[if(empty(parameters('scriptContent')), null(), parameters('scriptContent'))]",
                        "primaryScriptUri": "[if(empty(parameters('primaryScriptUri')), null(), parameters('primaryScriptUri'))]",
                        "supportingScriptUris": "[if(empty(parameters('supportingScriptUris')), null(), parameters('supportingScriptUris'))]",
                        "cleanupPreference": "[parameters('cleanupPreference')]",
                        "forceUpdateTag": "[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                        "retentionInterval": "[parameters('retentionInterval')]",
                        "timeout": "[parameters('timeout')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "17750672647523699609"
                            }
                          },
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployment script"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the deployment script was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployment script"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[or(equals(parameters('identityServiceProvider'), 'ADDS'), equals(parameters('identityServiceProvider'), 'AADDS'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Add-{0}-Storage-Setup-{1}', parameters('storagePurpose'), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('serviceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-{0}', parameters('time'))), '2020-10-01').outputs.name.value]"
                  },
                  "file": {
                    "value": "[parameters('storageToDomainScript')]"
                  },
                  "ScriptArguments": {
                    "value": "[variables('varStorageToDomainScriptArgs')]"
                  },
                  "baseScriptUri": {
                    "value": "[parameters('storageToDomainScriptUri')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "16383851592019099775"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "baseScriptUri": {
                      "type": "string"
                    },
                    "file": {
                      "type": "string"
                    },
                    "ScriptArguments": {
                      "type": "securestring"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-08-01",
                      "name": "[format('{0}/dscStorageScript', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {},
                        "protectedSettings": {
                          "fileUris": "[array(parameters('baseScriptUri'))]",
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('file'), parameters('ScriptArguments'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-Wait-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('storageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time')))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('storageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time'))), '2020-10-01').outputs.name.value]"
            },
            "fileShareName": {
              "type": "string",
              "value": "[variables('varFileShareName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('avdWorkloadSubsId'), 'Microsoft.Resources/deployments', format('Deploy-{0}-{1}', variables('varAvdStorageObjectsRgName'), parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', variables('varAvdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Workload-KeyVault-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[and(and(variables('varCreateMsixDeployment'), parameters('avdDeploySessionHosts')), not(equals(parameters('avdIdentityServiceProvider'), 'AAD')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Storage-Msix-AzureFiles-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storagePurpose": {
            "value": "msix"
          },
          "fileShareCustomName": {
            "value": "[parameters('msixFileShareCustomName')]"
          },
          "identityServiceProvider": {
            "value": "[parameters('avdIdentityServiceProvider')]"
          },
          "dscAgentPackageLocation": {
            "value": "[variables('varDscAgentPackageLocation')]"
          },
          "domainJoinUserPassword": {
            "value": "[parameters('avdDomainJoinUserPassword')]"
          },
          "avdStorageCustomOuPath": {
            "value": "[variables('varStorageCustomOuPath')]"
          },
          "managementVmName": {
            "value": "[variables('varManagementVmName')]"
          },
          "avdOuStgPath": {
            "value": "[variables('varOuStgPath')]"
          },
          "avdCreateOuForStorageString": {
            "value": "[variables('varCreateOuForStorageString')]"
          },
          "managedIdentityClientId": "[if(variables('varCreateStorageDeployment'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time'))), '2020-10-01').outputs.managedIdentityClientId.value), createObject('value', ''))]",
          "storageToDomainScript": {
            "value": "[variables('varStorageToDomainScript')]"
          },
          "storageToDomainScriptUri": {
            "value": "[variables('varStorageToDomainScriptUri')]"
          },
          "timeZone": {
            "value": "[variables('varTimeZones')[parameters('avdSessionHostLocation')]]"
          },
          "applicationSecurityGroupResourceId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdApplicationSecurityGroupResourceId.value)), createObject('value', ''))]",
          "computeObjectsRgName": {
            "value": "[variables('varAvdComputeObjectsRgName')]"
          },
          "domainJoinUserName": {
            "value": "[parameters('avdDomainJoinUserName')]"
          },
          "wrklKvName": {
            "value": "[variables('varAvdWrklKvName')]"
          },
          "serviceObjectsRgName": {
            "value": "[variables('varAvdServiceObjectsRgName')]"
          },
          "fileShareQuotaSize": {
            "value": "[parameters('msixFileShareQuotaSize')]"
          },
          "identityDomainName": {
            "value": "[parameters('avdIdentityDomainName')]"
          },
          "imageTemplateDefinitionId": {
            "value": "[parameters('avdImageTemplateDefinitionId')]"
          },
          "sessionHostOuPath": {
            "value": "[parameters('avdOuPath')]"
          },
          "sessionHostDiskType": {
            "value": "[parameters('avdSessionHostDiskType')]"
          },
          "sessionHostLocation": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "sessionHostsSize": {
            "value": "[parameters('avdSessionHostsSize')]"
          },
          "storageObjectsRgName": {
            "value": "[variables('varAvdStorageObjectsRgName')]"
          },
          "subnetId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName'))), createObject('value', parameters('existingVnetSubnetResourceId')))]",
          "createAvdVnet": {
            "value": "[parameters('createAvdVnet')]"
          },
          "vmLocalUserName": {
            "value": "[parameters('avdVmLocalUserName')]"
          },
          "vnetPrivateDnsZone": {
            "value": "[parameters('avdVnetPrivateDnsZone')]"
          },
          "vnetPrivateDnsZoneFilesId": {
            "value": "[parameters('avdVnetPrivateDnsZoneFilesId')]"
          },
          "workloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "storageManagedIdentityResourceId": "[if(variables('varCreateStorageDeployment'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time'))), '2020-10-01').outputs.managedIdentityResourceId.value), createObject('value', ''))]",
          "fileShareMultichannel": "[if(equals(parameters('msixStoragePerformance'), 'Premium'), createObject('value', true()), createObject('value', false()))]",
          "storageSku": {
            "value": "[variables('varMsixStorageSku')]"
          },
          "marketPlaceGalleryWindowsManagementVm": {
            "value": "[variables('varMarketPlaceGalleryWindows')[parameters('avdOsImage')]]"
          },
          "subnetResourceId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName'))), createObject('value', parameters('existingVnetSubnetResourceId')))]",
          "useSharedImage": {
            "value": "[parameters('useSharedImage')]"
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varAllResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]",
          "alaWorkspaceResourceId": "[if(parameters('avdDeployMonitoring'), if(parameters('deployAlaWorkspace'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceResourceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId'))), createObject('value', ''))]",
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('avdAlaWorkspaceDataRetention')]"
          },
          "useCustomNaming": {
            "value": "[parameters('avdUseCustomNaming')]"
          },
          "storageAccountPrefixCustomName": {
            "value": "[parameters('storageAccountPrefixCustomName')]"
          },
          "namingUniqueStringSixChar": {
            "value": "[variables('varAvdNamingUniqueStringSixChar')]"
          },
          "deploymentPrefixLowercase": {
            "value": "[variables('varDeploymentPrefixLowercase')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "3537102157819566449"
            }
          },
          "parameters": {
            "computeObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name for the session hosts."
              }
            },
            "workloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "timeZone": {
              "type": "string",
              "metadata": {
                "description": "Required. Virtual machine time zone."
              }
            },
            "storageObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for Azure Files."
              }
            },
            "identityServiceProvider": {
              "type": "string",
              "metadata": {
                "description": "Required, The service providing domain services for Azure Virtual Desktop."
              }
            },
            "serviceObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group Name for Azure Files."
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "AVD subnet ID."
              }
            },
            "createAvdVnet": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Create new virtual network."
              }
            },
            "sessionHostLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy compute services."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "sessionHostsSize": {
              "type": "string",
              "metadata": {
                "description": "Session host VM size."
              }
            },
            "sessionHostDiskType": {
              "type": "string",
              "metadata": {
                "description": "OS disk type for session host."
              }
            },
            "marketPlaceGalleryWindowsManagementVm": {
              "type": "object",
              "metadata": {
                "description": "Market Place OS image"
              }
            },
            "useSharedImage": {
              "type": "bool",
              "metadata": {
                "description": "Set to deploy image from Azure. Compute Gallery"
              }
            },
            "imageTemplateDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Source custom image ID."
              }
            },
            "storageManagedIdentityResourceId": {
              "type": "string",
              "metadata": {
                "description": "Storage Managed Identity Resource ID."
              }
            },
            "fileShareMultichannel": {
              "type": "bool",
              "metadata": {
                "description": "File share SMB multichannel."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Subnet resource ID for the Azure Files private endpoint."
              }
            },
            "vmLocalUserName": {
              "type": "string",
              "metadata": {
                "description": "Local administrator username."
              }
            },
            "identityDomainName": {
              "type": "string",
              "metadata": {
                "description": "Required. AD domain name."
              }
            },
            "wrklKvName": {
              "type": "string",
              "metadata": {
                "description": "Required. Keyvault name to get credentials from."
              }
            },
            "domainJoinUserName": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD session host domain join credentials."
              }
            },
            "sessionHostOuPath": {
              "type": "string",
              "metadata": {
                "description": "Optional. OU path to join AVd VMs."
              }
            },
            "applicationSecurityGroupResourceId": {
              "type": "string",
              "metadata": {
                "description": "Application Security Group (ASG) for the session hosts."
              }
            },
            "storageSku": {
              "type": "string",
              "metadata": {
                "description": "*Azure Files storage account SKU."
              }
            },
            "fileShareQuotaSize": {
              "type": "int",
              "metadata": {
                "description": "*Azure File share quota"
              }
            },
            "vnetPrivateDnsZone": {
              "type": "bool",
              "metadata": {
                "description": "Use Azure private DNS zones for private endpoints."
              }
            },
            "vnetPrivateDnsZoneFilesId": {
              "type": "string",
              "metadata": {
                "description": "Use Azure private DNS zones for private endpoints."
              }
            },
            "storageToDomainScript": {
              "type": "string",
              "metadata": {
                "description": "Script name for adding storage account to Active Directory."
              }
            },
            "storageToDomainScriptUri": {
              "type": "string",
              "metadata": {
                "description": "URI for the script for adding the storage account to Active Directory."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "managementVmName": {
              "type": "string",
              "metadata": {
                "description": "Name for management virtual machine. for tools and to join Azure Files to domain."
              }
            },
            "alaWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Optional. Log analytics workspace for diagnostic logs."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "metadata": {
                "description": "Optional. Diagnostic logs retention."
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            },
            "storagePurpose": {
              "type": "string",
              "metadata": {
                "description": "Sets purpose of the storage account."
              }
            },
            "useCustomNaming": {
              "type": "bool",
              "metadata": {
                "description": "Required. AVD resources custom naming. (Default: false)"
              }
            },
            "storageAccountPrefixCustomName": {
              "type": "string",
              "metadata": {
                "description": "Sets purpose of the storage account."
              }
            },
            "deploymentPrefixLowercase": {
              "type": "string",
              "metadata": {
                "description": "Deployment Prefix set in main template, in lowercase."
              }
            },
            "namingUniqueStringSixChar": {
              "type": "string",
              "metadata": {
                "description": "Unique name truncated into 6 characters"
              }
            },
            "dscAgentPackageLocation": {
              "type": "string",
              "metadata": {
                "description": "Sets location of DSC Agent."
              }
            },
            "domainJoinUserPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Domain join user password."
              }
            },
            "avdStorageCustomOuPath": {
              "type": "string",
              "metadata": {
                "description": "Custom OU path for storage."
              }
            },
            "avdOuStgPath": {
              "type": "string",
              "metadata": {
                "description": "OU Storage Path"
              }
            },
            "avdCreateOuForStorageString": {
              "type": "string",
              "metadata": {
                "description": "Optional. If OU for Azure Storage needs to be created - set to true and ensure the domain join credentials have priviledge to create OU and create computer objects or join to domain. (Default: \"\")"
              }
            },
            "managedIdentityClientId": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity Client ID"
              }
            },
            "fileShareCustomName": {
              "type": "string",
              "metadata": {
                "description": "Optional. Storage account profile container file share prefix custom name. (Default: storagePurpose-pc-app1-001)"
              },
              "maxLength": 64
            }
          },
          "variables": {
            "varStoragePurposeLower": "[toLower(parameters('storagePurpose'))]",
            "varAvdFileShareLogsDiagnostic": [
              "StorageRead",
              "StorageWrite",
              "StorageDelete"
            ],
            "varAvdFileShareMetricsDiagnostic": [
              "Transaction"
            ],
            "varFileShareName": "[if(parameters('useCustomNaming'), parameters('fileShareCustomName'), format('{0}-pc-{1}-001', variables('varStoragePurposeLower'), parameters('deploymentPrefixLowercase')))]",
            "varWrklStoragePrivateEndpointName": "[format('pe-{0}-file', variables('varStorageName'))]",
            "varStoragePurposeLowerPrefix": "[substring(variables('varStoragePurposeLower'), 0, 2)]",
            "varStorageName": "[if(parameters('useCustomNaming'), format('{0}{1}{2}{3}', parameters('storageAccountPrefixCustomName'), variables('varStoragePurposeLower'), parameters('deploymentPrefixLowercase'), parameters('namingUniqueStringSixChar')), format('stavd{0}{1}{2}', variables('varStoragePurposeLower'), parameters('deploymentPrefixLowercase'), parameters('namingUniqueStringSixChar')))]",
            "varStorageToDomainScriptArgs": "[format('-DscPath {0} -StorageAccountName {1} -StorageAccountRG {2} -StoragePurpose {3} -DomainName {4} -IdentityServiceProvider {5} -AzureCloudEnvironment AzureCloud -SubscriptionId {6} -DomainAdminUserName {7} -DomainAdminUserPassword {8} -CustomOuPath {9} -OUName {10} -CreateNewOU {11} -ShareName {12} -ClientId {13} -Verbose', parameters('dscAgentPackageLocation'), variables('varStorageName'), parameters('storageObjectsRgName'), parameters('storagePurpose'), parameters('identityDomainName'), parameters('identityServiceProvider'), parameters('workloadSubsId'), parameters('domainJoinUserName'), parameters('domainJoinUserPassword'), parameters('avdStorageCustomOuPath'), parameters('avdOuStgPath'), parameters('avdCreateOuForStorageString'), variables('varFileShareName'), parameters('managedIdentityClientId'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('storageObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varStorageName')]"
                  },
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "storageAccountSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "allowBlobPublicAccess": {
                    "value": false
                  },
                  "publicNetworkAccess": {
                    "value": "Disabled"
                  },
                  "storageAccountKind": "[if(or(equals(toLower(parameters('storageSku')), toLower('Premium_LRS')), equals(toLower(parameters('storageSku')), toLower('Premium_ZRS'))), createObject('value', 'FileStorage'), createObject('value', 'StorageV2'))]",
                  "azureFilesIdentityBasedAuthentication": "[if(equals(parameters('identityServiceProvider'), 'AADDS'), createObject('value', createObject('directoryServiceOptions', 'AADDS')), createObject('value', createObject('directoryServiceOptions', 'None')))]",
                  "storageAccountAccessTier": {
                    "value": "Hot"
                  },
                  "networkAcls": {
                    "value": {
                      "bypass": "AzureServices",
                      "defaultAction": "Deny",
                      "virtualNetworkRules": [],
                      "ipRules": []
                    }
                  },
                  "fileServices": {
                    "value": {
                      "shares": [
                        {
                          "name": "[variables('varFileShareName')]",
                          "sharedQuota": "[mul(parameters('fileShareQuotaSize'), 100)]"
                        }
                      ],
                      "protocolSettings": "[if(parameters('fileShareMultichannel'), createObject('smb', createObject('multichannel', createObject('enabled', parameters('fileShareMultichannel')))), createObject())]",
                      "diagnosticWorkspaceId": "[parameters('alaWorkspaceResourceId')]",
                      "diagnosticLogCategoriesToEnable": "[variables('varAvdFileShareLogsDiagnostic')]",
                      "diagnosticMetricsToEnable": "[variables('varAvdFileShareMetricsDiagnostic')]"
                    }
                  },
                  "privateEndpoints": "[if(parameters('vnetPrivateDnsZone'), createObject('value', createArray(createObject('name', variables('varWrklStoragePrivateEndpointName'), 'subnetResourceId', parameters('subnetResourceId'), 'service', 'file', 'privateDnsZoneResourceIds', createArray(parameters('vnetPrivateDnsZoneFilesId'))))), createObject('value', createArray(createObject('name', variables('varWrklStoragePrivateEndpointName'), 'subnetResourceId', parameters('subnetResourceId'), 'service', 'file'))))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('alaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "14539995202386924035"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Storage Account. Autogenerated with a unique string if not provided."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration Details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible"
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny"
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy"
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy"
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account"
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "basetime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Optional. Enable or disallow public network access to Storage Account.."
                      },
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ]
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "maxNameLength": 24,
                    "uniqueStorageNameUntrim": "[format('{0}', uniqueString(format('Storage Account{0}', parameters('basetime'))))]",
                    "uniqueStorageName": "[if(greater(length(variables('uniqueStorageNameUntrim')), variables('maxNameLength')), substring(variables('uniqueStorageNameUntrim'), 0, variables('maxNameLength')), variables('uniqueStorageNameUntrim'))]",
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-08-01",
                      "name": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]"
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(not(empty(parameters('networkAcls'))), parameters('networkAcls').bypass, null()), 'defaultAction', if(not(empty(parameters('networkAcls'))), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'virtualNetworkRules')), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'ipRules')), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "name": "[format('{0}-{1}-lock', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "15082996373537341891"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "condition": "[not(empty(parameters('privateEndpoints')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-PrivateEndpoints-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateEndpointResourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                          },
                          "privateEndpointVnetLocation": "[if(not(empty(parameters('privateEndpoints'))), createObject('value', reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location), createObject('value', 'dummy'))]",
                          "privateEndpointObj": {
                            "value": "[parameters('privateEndpoints')[copyIndex()]]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "1705366230414954278"
                            }
                          },
                          "parameters": {
                            "privateEndpointResourceId": {
                              "type": "string"
                            },
                            "privateEndpointVnetLocation": {
                              "type": "string"
                            },
                            "privateEndpointObj": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
                            "privateEndpoint_var": {
                              "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
                              "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
                              "service": [
                                "[parameters('privateEndpointObj').service]"
                              ],
                              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), if(empty(parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray(), parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray())]",
                              "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), null(), parameters('privateEndpointObj').customDnsConfigs), null())]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', variables('privateEndpoint_var').name, 'default')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "privateDnsZoneConfigs",
                                    "count": "[length(variables('privateEndpoint_var').privateDnsZoneResourceIds)]",
                                    "input": {
                                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                      "properties": {
                                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2021-05-01",
                              "name": "[variables('privateEndpoint_var').name]",
                              "location": "[parameters('privateEndpointVnetLocation')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "customNetworkInterfaceName": "[format('nic-01-{0}', variables('privateEndpoint_var').name)]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateEndpoint_var').name]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                      "groupIds": "[variables('privateEndpoint_var').service]"
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                                },
                                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6618821370984693546"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy"
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2019-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "10923244048734603948"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service"
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "16443708835266741837"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy"
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]",
                                          "enableDefaultTelemetry": {
                                            "value": "[parameters('enableDefaultTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "12109804807781251170"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the Storage Account."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the blob service."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the container to apply the policy to"
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API"
                                              }
                                            },
                                            "enableDefaultTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "condition": "[parameters('enableDefaultTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": []
                                                }
                                              }
                                            },
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2019-06-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "7829033958824014906"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "7589538583550800574"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service"
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service"
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "9089081737127810339"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the file service"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create"
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "569858758588246280"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "5158748013077101135"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service"
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "5428327242214663657"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the queue service"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy"
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "2081293323079275435"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "16581177078978772920"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Storage Account."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service"
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "15932183617419777840"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Storage Account."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the table service"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName')))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))]",
                      "metadata": {
                        "description": "The name of the deployed storage account"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account"
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-08-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueStorageName'))), '2021-08-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Management-VM-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('serviceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('managementVmName')]"
                  },
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "systemAssignedIdentity": {
                    "value": false
                  },
                  "userAssignedIdentities": {
                    "value": {
                      "[format('{0}', parameters('storageManagedIdentityResourceId'))]": {}
                    }
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('encryptionAtHost')]"
                  },
                  "availabilityZone": {
                    "value": []
                  },
                  "osType": {
                    "value": "Windows"
                  },
                  "vmSize": {
                    "value": "[parameters('sessionHostsSize')]"
                  },
                  "imageReference": "[if(parameters('useSharedImage'), createObject('value', json(format('{{''id'': ''{0}''}}', parameters('imageTemplateDefinitionId')))), createObject('value', parameters('marketPlaceGalleryWindowsManagementVm')))]",
                  "osDisk": {
                    "value": {
                      "createOption": "fromImage",
                      "deleteOption": "Delete",
                      "diskSizeGB": 128,
                      "managedDisk": {
                        "storageAccountType": "[parameters('sessionHostDiskType')]"
                      }
                    }
                  },
                  "adminUsername": {
                    "value": "[parameters('vmLocalUserName')]"
                  },
                  "adminPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                      },
                      "secretName": "avdVmLocalUserPassword"
                    }
                  },
                  "nicConfigurations": {
                    "value": [
                      {
                        "nicSuffix": "nic-001-",
                        "deleteOption": "Delete",
                        "enableAcceleratedNetworking": false,
                        "ipConfigurations": "[if(parameters('createAvdVnet'), createArray(createObject('name', 'ipconfig01', 'subnetId', parameters('subnetId'), 'applicationSecurityGroups', parameters('applicationSecurityGroupResourceId'))), createArray(createObject('name', 'ipconfig01', 'subnetId', parameters('subnetId'))))]"
                      }
                    ]
                  },
                  "allowExtensionOperations": {
                    "value": true
                  },
                  "extensionDomainJoinPassword": {
                    "reference": {
                      "keyVault": {
                        "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                      },
                      "secretName": "avdDomainJoinUserPassword"
                    }
                  },
                  "extensionDomainJoinConfig": {
                    "value": {
                      "enabled": true,
                      "settings": {
                        "name": "[parameters('identityDomainName')]",
                        "ouPath": "[if(not(empty(parameters('sessionHostOuPath'))), parameters('sessionHostOuPath'), null())]",
                        "user": "[parameters('domainJoinUserName')]",
                        "restart": "true",
                        "options": "3"
                      }
                    }
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "4354075424594305961"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
                      "metadata": {
                        "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
                      }
                    },
                    "vmComputerNamesTransformation": {
                      "type": "string",
                      "defaultValue": "none",
                      "metadata": {
                        "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the size for the VMs"
                      }
                    },
                    "encryptionAtHost": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "securityType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "secureBootEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "vTpmEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "imageReference": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                      }
                    },
                    "plan": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                      }
                    },
                    "osDisk": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "dataDisks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "ultraSSDEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                      }
                    },
                    "adminUsername": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. Administrator username"
                      }
                    },
                    "adminPassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed"
                      }
                    },
                    "customData": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                      }
                    },
                    "certificatesToBeInstalled": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                      }
                    },
                    "vmPriority": {
                      "type": "string",
                      "defaultValue": "Regular",
                      "allowedValues": [
                        "Regular",
                        "Low",
                        "Spot"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the priority for the virtual machine."
                      }
                    },
                    "enableEvictionPolicy": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                      }
                    },
                    "maxPriceForLowPriorityVm": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                      }
                    },
                    "dedicatedHostId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Windows_Client",
                        "Windows_Server",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
                      }
                    },
                    "publicKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs"
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "bootDiagnosticStorageAccountName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Storage account used to store boot diagnostic information. Boot diagnostics will be disabled if no value is provided."
                      }
                    },
                    "bootDiagnosticStorageAccountUri": {
                      "type": "string",
                      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                      "metadata": {
                        "description": "Optional. Storage account boot diagnostic base URI."
                      }
                    },
                    "proximityPlacementGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource name of a proximity placement group."
                      }
                    },
                    "availabilitySetName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource name of an availability set. Cannot be used in combination with availability zone nor scale set."
                      }
                    },
                    "availabilityZone": {
                      "type": "array",
                      "metadata": {
                        "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                      }
                    },
                    "nicConfigurations": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Configures NICs and PIPs."
                      }
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "allowedValues": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    },
                    "nicdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "backupVaultName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Recovery service vault name to add VMs to backup."
                      }
                    },
                    "backupVaultResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                      }
                    },
                    "backupPolicyName": {
                      "type": "string",
                      "defaultValue": "DefaultPolicy",
                      "metadata": {
                        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                      }
                    },
                    "enableServerSideEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
                      }
                    },
                    "allowExtensionOperations": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                      }
                    },
                    "extensionDomainJoinPassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter"
                      }
                    },
                    "extensionDomainJoinConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionAadJoinConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the Azure AD Windows login extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionAntiMalwareConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionMonitoringAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionAzureMonitoringAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Azure Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "monitoringWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
                      }
                    },
                    "extensionDependencyAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionNetworkWatcherAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionDiskEncryptionConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionDSCConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionCustomScriptConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false,
                        "fileData": []
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed"
                      }
                    },
                    "extensionCustomScriptProtectedSetting": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableDefaultTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                      }
                    },
                    "sasTokenValidityLength": {
                      "type": "string",
                      "defaultValue": "PT8H",
                      "metadata": {
                        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. The chosen OS type"
                      }
                    },
                    "disablePasswordAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether password authentication should be disabled."
                      }
                    },
                    "provisionVMAgent": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                      }
                    },
                    "enableAutomaticUpdates": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be TimeZoneInfo.id value from time zones returned by TimeZoneInfo.GetSystemTimeZones."
                      }
                    },
                    "additionalUnattendContent": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object"
                      }
                    },
                    "winRM": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                      }
                    },
                    "configurationProfileAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Any VM configuration profile assignments"
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "publicKeysFormatted",
                        "count": "[length(parameters('publicKeys'))]",
                        "input": {
                          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                        }
                      }
                    ],
                    "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                      "ssh": {
                        "publicKeys": "[variables('publicKeysFormatted')]"
                      },
                      "provisionVMAgent": "[parameters('provisionVMAgent')]"
                    },
                    "windowsConfiguration": {
                      "provisionVMAgent": "[parameters('provisionVMAgent')]",
                      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                      "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                    },
                    "accountSasProperties": {
                      "signedServices": "b",
                      "signedPermission": "r",
                      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                      "signedResourceTypes": "o",
                      "signedProtocol": "https"
                    },
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableDefaultTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "zones": "[if(equals(parameters('availabilityZone'), ''), null(), parameters('availabilityZone'))]",
                      "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "securityProfile": {
                          "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                          "securityType": "[parameters('securityType')]",
                          "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                        },
                        "storageProfile": {
                          "copy": [
                            {
                              "name": "dataDisks",
                              "count": "[length(parameters('dataDisks'))]",
                              "input": {
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[format('disk-{0}-{1}', padLeft(add(copyIndex('dataDisks'), 1), 3, '0'), parameters('name'))]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                                "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                                "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                                "managedDisk": {
                                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                  "diskEncryptionSet": {
                                    "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, null())]"
                                  }
                                }
                              }
                            }
                          ],
                          "imageReference": "[parameters('imageReference')]",
                          "osDisk": {
                            "name": "[format('osdisk-001-{0}', parameters('name'))]",
                            "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                            "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                            "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                            "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                            "managedDisk": {
                              "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                              "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), parameters('osDisk').managedDisk.diskEncryptionSet, null())]"
                            }
                          }
                        },
                        "additionalCapabilities": {
                          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                        },
                        "osProfile": {
                          "computerName": "[variables('vmComputerNameTransformed')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                          "secrets": "[parameters('certificatesToBeInstalled')]",
                          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('nicConfigurations'))]",
                              "input": {
                                "properties": {
                                  "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                },
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix, parameters('name')))]"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": "[not(empty(parameters('bootDiagnosticStorageAccountName')))]",
                            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                          }
                        },
                        "availabilitySet": "[if(not(empty(parameters('availabilitySetName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')))), null())]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')))), null())]",
                        "priority": "[parameters('vmPriority')]",
                        "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                        "billingProfile": "[if(and(not(empty(parameters('vmPriority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), json(format('{{\"maxPrice\":\"{0}\"}}', parameters('maxPriceForLowPriorityVm'))), null())]",
                        "host": "[if(not(empty(parameters('dedicatedHostId'))), json(format('{{\"id\":\"{0}\"}}', parameters('dedicatedHostId'))), null())]",
                        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                      },
                      "dependsOn": [
                        "virtualMachine_nic"
                      ]
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualMachine_nic",
                        "count": "[length(parameters('nicConfigurations'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "networkInterfaceName": {
                            "value": "[format('{0}{1}', parameters('nicConfigurations')[copyIndex()].nicSuffix, parameters('name'))]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                          "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                          "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                          "networkSecurityGroupId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'nsgId'), if(not(empty(parameters('nicConfigurations')[copyIndex()].nsgId)), createObject('value', parameters('nicConfigurations')[copyIndex()].nsgId), createObject('value', '')), createObject('value', ''))]",
                          "ipConfigurationArray": {
                            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                          },
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "pipDiagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "nicDiagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "pipdiagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "pipdiagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "nicDiagnosticMetricsToEnable": {
                            "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                          },
                          "roleAssignments": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), createObject('value', parameters('nicConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "1311240889984469923"
                            }
                          },
                          "parameters": {
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "networkSecurityGroupId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "ipConfigurationArray": {
                              "type": "array"
                            },
                            "lock": {
                              "type": "string"
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string"
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int"
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string"
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string"
                            },
                            "diagnosticEventHubName": {
                              "type": "string"
                            },
                            "pipdiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "pipdiagnosticLogCategoriesToEnable": {
                              "type": "array"
                            },
                            "nicDiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "roleAssignments": {
                              "type": "array"
                            },
                            "pipDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                              }
                            },
                            "nicDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "nicDiagnosticsMetrics",
                                "count": "[length(parameters('nicDiagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('nicDiagnosticMetricsToEnable')[copyIndex('nicDiagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('networkInterfaceName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "ipConfigurations",
                                    "count": "[length(parameters('ipConfigurationArray'))]",
                                    "input": {
                                      "name": "[if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name, null())]",
                                      "properties": {
                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                        "privateIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'vmIPAddress'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress, null()), null())]",
                                        "publicIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'pipconfiguration'), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].pipconfiguration.publicIpNameSuffix)))), null())]",
                                        "subnet": {
                                          "id": "[parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].subnetId]"
                                        },
                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), createArray(createObject('id', parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].applicationSecurityGroups)), null())]"
                                      }
                                    }
                                  }
                                ],
                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]"
                              },
                              "dependsOn": [
                                "networkInterface_publicIPConfigurations"
                              ]
                            },
                            {
                              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2017-04-01",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
                              "name": "[format('{0}-{1}-lock', parameters('networkInterfaceName'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                              ]
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
                              "name": "[parameters('nicDiagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('nicDiagnosticsMetrics')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "networkInterface_publicIPConfigurations",
                                "count": "[length(parameters('ipConfigurationArray'))]"
                              },
                              "condition": "[contains(parameters('ipConfigurationArray')[copyIndex()], 'pipconfiguration')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PIP-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "publicIPAddressName": {
                                    "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                                  },
                                  "publicIPPrefixId": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPPrefixId'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId), createObject('value', '')), createObject('value', ''))]",
                                  "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                                  "skuName": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuName'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                                  "skuTier": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuTier'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "diagnosticSettingsName": {
                                    "value": "[parameters('pipDiagnosticSettingsName')]"
                                  },
                                  "diagnosticMetricsToEnable": {
                                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                                  },
                                  "diagnosticLogCategoriesToEnable": {
                                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "roleAssignments": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'roleAssignments'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "13524796998069329748"
                                    }
                                  },
                                  "parameters": {
                                    "publicIPAddressName": {
                                      "type": "string"
                                    },
                                    "publicIPPrefixId": {
                                      "type": "string"
                                    },
                                    "publicIPAllocationMethod": {
                                      "type": "string"
                                    },
                                    "skuName": {
                                      "type": "string"
                                    },
                                    "skuTier": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string"
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int"
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string"
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string"
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string"
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array"
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array"
                                    },
                                    "lock": {
                                      "type": "string"
                                    },
                                    "roleAssignments": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('publicIPAddressName'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogs",
                                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2021-05-01",
                                      "name": "[parameters('publicIPAddressName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]",
                                        "tier": "[parameters('skuTier')]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixId'))), createObject('id', parameters('publicIPPrefixId')), null())]"
                                      }
                                    },
                                    {
                                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2017-04-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('publicIPAddressName'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "publicIpAddress_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "9188927501762835850"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the resource group the public IP address was deployed."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('publicIPAddressName')]",
                                      "metadata": {
                                        "description": "The name of the public IP address."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]",
                                      "metadata": {
                                        "description": "The resource ID of the public IP address."
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "networkInterface_rbac",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "17676457614801942286"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the prinicpals to assign to role to"
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Description of role assignment"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2021-04-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "vm_configurationProfileAssignment",
                        "count": "[length(parameters('configurationProfileAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-ConfigurationProfileAssignment-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "configurationProfile": {
                            "value": "[parameters('configurationProfileAssignments')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "15662528306426569422"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the configuration profile assignment"
                              }
                            },
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the VM to be associated"
                              }
                            },
                            "configurationProfile": {
                              "type": "string",
                              "allowedValues": [
                                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"
                              ],
                              "metadata": {
                                "description": "Required. The configuration profile of automanage"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Automanage/configurationProfileAssignments",
                              "apiVersion": "2021-04-30-preview",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('virtualMachineName'))]",
                              "name": "[parameters('name')]",
                              "properties": {
                                "configurationProfile": "[parameters('configurationProfile')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), 'Microsoft.Automanage/configurationProfileAssignments', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the configuration profile assignment"
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the configuration profile assignment"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the configuration profile assignment was deployed into"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDomainJoinConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DomainJoin"
                          },
                          "publisher": {
                            "value": "Microsoft.Compute"
                          },
                          "type": {
                            "value": "JsonADDomainExtension"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionDomainJoinConfig').settings]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "protectedSettings": {
                            "value": {
                              "Password": "[parameters('extensionDomainJoinPassword')]"
                            }
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAadJoinConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-AADJoin', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "AADLoginForWindows"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.ActiveDirectory"
                          },
                          "type": {
                            "value": "AADLoginForWindows"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), createObject('value', '1.0'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionAadJoinConfig').settings]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "MicrosoftAntiMalware"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": {
                            "value": "IaaSAntimalware"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionAntiMalwareConfig').settings]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "MicrosoftMonitoringAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.EnterpriseCloud.Monitoring"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.7')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                            }
                          },
                          "protectedSettings": {
                            "value": {
                              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                            }
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAzureMonitoringAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-AzureMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "AzureMonitoringAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                          },
                          "type": {
                            "value": "DependencyAgentWindows"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                          "settings": {
                            "value": {
                              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                            }
                          },
                          "protectedSettings": {
                            "value": {
                              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                            }
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DependencyAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "NetworkWatcherAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.NetworkWatcher"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDSCConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DesiredStateConfiguration"
                          },
                          "publisher": {
                            "value": "Microsoft.Powershell"
                          },
                          "type": {
                            "value": "DSC"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                          "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]",
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "CustomScriptExtension"
                          },
                          "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "copy": [
                                {
                                  "name": "fileUris",
                                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                }
                              ]
                            }
                          },
                          "protectedSettings": {
                            "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDiskEncryptionConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "DiskEncryption"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "forceUpdateTag": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                          "settings": {
                            "value": "[parameters('extensionDiskEncryptionConfig').settings]"
                          },
                          "enableDefaultTelemetry": {
                            "value": "[parameters('enableDefaultTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6607752740889473601"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine that extension is provisioned for"
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to"
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher"
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler"
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings"
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('backupVaultName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "backupResourceName": {
                            "value": "[format('{0}/Azure/iaasvmcontainer;iaasvmcontainerv2;{1};{2}/vm;iaasvmcontainerv2;{3};{4}', parameters('backupVaultName'), resourceGroup().name, parameters('name'), resourceGroup().name, parameters('name'))]"
                          },
                          "protectedItemType": {
                            "value": "Microsoft.Compute/virtualMachines"
                          },
                          "backupPolicyId": {
                            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                          },
                          "sourceResourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "8945936083607713311"
                            }
                          },
                          "parameters": {
                            "backupResourceName": {
                              "type": "string"
                            },
                            "protectedItemType": {
                              "type": "string",
                              "allowedValues": [
                                "AzureFileShareProtectedItem",
                                "AzureVmWorkloadSAPAseDatabase",
                                "AzureVmWorkloadSAPHanaDatabase",
                                "AzureVmWorkloadSQLDatabase",
                                "DPMProtectedItem",
                                "GenericProtectedItem",
                                "MabFileFolderProtectedItem",
                                "Microsoft.ClassicCompute/virtualMachines",
                                "Microsoft.Compute/virtualMachines",
                                "Microsoft.Sql/servers/databases"
                              ]
                            },
                            "backupPolicyId": {
                              "type": "string"
                            },
                            "sourceResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('backupResourceName')]",
                              "location": "[resourceGroup().location]",
                              "properties": {
                                "protectedItemType": "[parameters('protectedItemType')]",
                                "policyId": "[parameters('backupPolicyId')]",
                                "sourceResourceId": "[parameters('sourceResourceId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualMachine_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "16119009747037808190"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the prinicpals to assign to role to"
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Description of role assignment"
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the VM."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the VM."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the VM was created in."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('storageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Management-VM-Wait-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('serviceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('AVD-managementVmWait-{0}', parameters('time'))]"
                  },
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "azPowerShellVersion": {
                    "value": "6.2"
                  },
                  "cleanupPreference": {
                    "value": "Always"
                  },
                  "timeout": {
                    "value": "PT10M"
                  },
                  "scriptContent": {
                    "value": "        Write-Host \"Start\"\n        Get-Date\n        Start-Sleep -Seconds 120\n        Write-Host \"Stop\"\n        Get-Date\n        "
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "9712062199062057663"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name of the script to be run."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzurePowerShell",
                      "allowedValues": [
                        "AzurePowerShell",
                        "AzureCLI"
                      ],
                      "metadata": {
                        "description": "Optional. Type of the script. AzurePowerShell, AzureCLI."
                      }
                    },
                    "azPowerShellVersion": {
                      "type": "string",
                      "defaultValue": "3.0",
                      "metadata": {
                        "description": "Optional. Azure PowerShell module version to be used."
                      }
                    },
                    "azCliVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure CLI module version to be used."
                      }
                    },
                    "scriptContent": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                      }
                    },
                    "primaryScriptUri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent instead."
                      }
                    },
                    "environmentVariables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The environment variables to pass over to the script. Must have a 'name' and a 'value' or a 'secretValue' property."
                      }
                    },
                    "supportingScriptUris": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                      }
                    },
                    "arguments": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                      }
                    },
                    "retentionInterval": {
                      "type": "string",
                      "defaultValue": "P1D",
                      "metadata": {
                        "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                      }
                    },
                    "runOnce": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                      }
                    },
                    "cleanupPreference": {
                      "type": "string",
                      "defaultValue": "Always",
                      "allowedValues": [
                        "Always",
                        "OnSuccess",
                        "OnExpiration"
                      ],
                      "metadata": {
                        "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                      }
                    },
                    "containerGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                      }
                    },
                    "timeout": {
                      "type": "string",
                      "defaultValue": "PT6H",
                      "metadata": {
                        "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "NotSpecified",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "CanNotDelete",
                        "NotSpecified",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "variables": {
                    "containerSettings": {
                      "containerGroupName": "[parameters('containerGroupName')]"
                    },
                    "identityType": "[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "azPowerShellVersion": "[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                        "azCliVersion": "[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                        "containerSettings": "[if(empty(parameters('containerGroupName')), null(), variables('containerSettings'))]",
                        "arguments": "[parameters('arguments')]",
                        "environmentVariables": "[if(empty(parameters('environmentVariables')), null(), parameters('environmentVariables'))]",
                        "scriptContent": "[if(empty(parameters('scriptContent')), null(), parameters('scriptContent'))]",
                        "primaryScriptUri": "[if(empty(parameters('primaryScriptUri')), null(), parameters('primaryScriptUri'))]",
                        "supportingScriptUris": "[if(empty(parameters('supportingScriptUris')), null(), parameters('supportingScriptUris'))]",
                        "cleanupPreference": "[parameters('cleanupPreference')]",
                        "forceUpdateTag": "[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                        "retentionInterval": "[parameters('retentionInterval')]",
                        "timeout": "[parameters('timeout')]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "17750672647523699609"
                            }
                          },
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployment script"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the deployment script was deployed into"
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployment script"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-{0}', parameters('time')))]"
              ]
            },
            {
              "condition": "[or(equals(parameters('identityServiceProvider'), 'ADDS'), equals(parameters('identityServiceProvider'), 'AADDS'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Add-{0}-Storage-Setup-{1}', parameters('storagePurpose'), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('serviceObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-{0}', parameters('time'))), '2020-10-01').outputs.name.value]"
                  },
                  "file": {
                    "value": "[parameters('storageToDomainScript')]"
                  },
                  "ScriptArguments": {
                    "value": "[variables('varStorageToDomainScriptArgs')]"
                  },
                  "baseScriptUri": {
                    "value": "[parameters('storageToDomainScriptUri')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "16383851592019099775"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "baseScriptUri": {
                      "type": "string"
                    },
                    "file": {
                      "type": "string"
                    },
                    "ScriptArguments": {
                      "type": "securestring"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-08-01",
                      "name": "[format('{0}/dscStorageScript', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {},
                        "protectedSettings": {
                          "fileUris": "[array(parameters('baseScriptUri'))]",
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('file'), parameters('ScriptArguments'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Management-VM-Wait-{0}', parameters('time')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('storageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time')))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('storageObjectsRgName'))), 'Microsoft.Resources/deployments', format('Storage-{0}-{1}', parameters('storagePurpose'), parameters('time'))), '2020-10-01').outputs.name.value]"
            },
            "fileShareName": {
              "type": "string",
              "value": "[variables('varFileShareName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('avdWorkloadSubsId'), 'Microsoft.Resources/deployments', format('Deploy-{0}-{1}', variables('varAvdStorageObjectsRgName'), parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', variables('varAvdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Workload-KeyVault-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Storage-Fslogix-Azure-Files-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[parameters('avdDeploySessionHosts')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('Session-Hosts-{0}', parameters('time'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "agentPackageLocation": {
            "value": "[variables('varAvdAgentPackageLocation')]"
          },
          "timeZone": {
            "value": "[variables('varTimeZones')[parameters('avdSessionHostLocation')]]"
          },
          "applicationSecurityGroupResourceId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdApplicationSecurityGroupResourceId.value)), createObject('value', ''))]",
          "avsetFaultDomainCount": {
            "value": "[parameters('avdAsFaultDomainCount')]"
          },
          "avsetUpdateDomainCount": {
            "value": "[parameters('avdAsUpdateDomainCount')]"
          },
          "identityServiceProvider": {
            "value": "[parameters('avdIdentityServiceProvider')]"
          },
          "createIntuneEnrollment": {
            "value": "[parameters('createIntuneEnrollment')]"
          },
          "availabilitySetNamePrefix": {
            "value": "[variables('varAvdAvailabilitySetNamePrefix')]"
          },
          "computeObjectsRgName": {
            "value": "[variables('varAvdComputeObjectsRgName')]"
          },
          "deploySessionHostsCount": {
            "value": "[parameters('avdDeploySessionHostsCount')]"
          },
          "sessionHostCountIndex": {
            "value": "[parameters('avdSessionHostCountIndex')]"
          },
          "domainJoinUserName": {
            "value": "[parameters('avdDomainJoinUserName')]"
          },
          "wrklKvName": {
            "value": "[variables('varAvdWrklKvName')]"
          },
          "serviceObjectsRgName": {
            "value": "[variables('varAvdServiceObjectsRgName')]"
          },
          "hostPoolName": {
            "value": "[variables('varAvdHostPoolName')]"
          },
          "identityDomainName": {
            "value": "[parameters('avdIdentityDomainName')]"
          },
          "avdImageTemplateDefinitionId": {
            "value": "[parameters('avdImageTemplateDefinitionId')]"
          },
          "sessionHostOuPath": {
            "value": "[parameters('avdOuPath')]"
          },
          "sessionHostDiskType": {
            "value": "[parameters('avdSessionHostDiskType')]"
          },
          "sessionHostLocation": {
            "value": "[parameters('avdSessionHostLocation')]"
          },
          "sessionHostNamePrefix": {
            "value": "[variables('varAvdSessionHostNamePrefix')]"
          },
          "sessionHostsSize": {
            "value": "[parameters('avdSessionHostsSize')]"
          },
          "enableAcceleratedNetworking": {
            "value": "[parameters('enableAcceleratedNetworking')]"
          },
          "securityType": "[if(equals(parameters('securityType'), 'Standard'), createObject('value', ''), createObject('value', parameters('securityType')))]",
          "secureBootEnabled": {
            "value": "[parameters('secureBootEnabled')]"
          },
          "vTpmEnabled": {
            "value": "[parameters('vTpmEnabled')]"
          },
          "subnetId": "[if(parameters('createAvdVnet'), createObject('value', format('{0}/subnets/{1}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time'))), '2020-10-01').outputs.avdVirtualNetworkResourceId.value, variables('varAvdVnetworkSubnetName'))), createObject('value', parameters('existingVnetSubnetResourceId')))]",
          "createAvdVnet": {
            "value": "[parameters('createAvdVnet')]"
          },
          "useAvailabilityZones": {
            "value": "[parameters('avdUseAvailabilityZones')]"
          },
          "vmLocalUserName": {
            "value": "[parameters('avdVmLocalUserName')]"
          },
          "workloadSubsId": {
            "value": "[parameters('avdWorkloadSubsId')]"
          },
          "encryptionAtHost": {
            "value": "[parameters('encryptionAtHost')]"
          },
          "createAvdFslogixDeployment": "[if(not(equals(parameters('avdIdentityServiceProvider'), 'AAD')), createObject('value', variables('varCreateAvdFslogixDeployment')), createObject('value', false()))]",
          "storageManagedIdentityResourceId": "[if(and(variables('varCreateStorageDeployment'), not(equals(parameters('avdIdentityServiceProvider'), 'AAD'))), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time'))), '2020-10-01').outputs.managedIdentityResourceId.value), createObject('value', ''))]",
          "fsLogixScript": "[if(not(equals(parameters('avdIdentityServiceProvider'), 'AAD')), createObject('value', variables('varFsLogixScript')), createObject('value', ''))]",
          "fsLogixScriptArguments": "[if(not(equals(parameters('avdIdentityServiceProvider'), 'AAD')), createObject('value', format('-volumeshare {0}', format('\\\\{0}.file.{1}\\{2}', if(parameters('createAvdFslogixDeployment'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Storage-Fslogix-Azure-Files-{0}', parameters('time'))), '2020-10-01').outputs.storageAccountName.value, ''), environment().suffixes.storage, if(parameters('createAvdFslogixDeployment'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Storage-Fslogix-Azure-Files-{0}', parameters('time'))), '2020-10-01').outputs.fileShareName.value, '')))), createObject('value', ''))]",
          "fslogixScriptUri": "[if(not(equals(parameters('avdIdentityServiceProvider'), 'AAD')), createObject('value', variables('varFslogixScriptUri')), createObject('value', ''))]",
          "fslogixSharePath": "[if(not(equals(parameters('avdIdentityServiceProvider'), 'AAD')), createObject('value', format('\\\\{0}.file.{1}\\{2}', if(parameters('createAvdFslogixDeployment'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Storage-Fslogix-Azure-Files-{0}', parameters('time'))), '2020-10-01').outputs.storageAccountName.value, ''), environment().suffixes.storage, if(parameters('createAvdFslogixDeployment'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Storage-Fslogix-Azure-Files-{0}', parameters('time'))), '2020-10-01').outputs.fileShareName.value, ''))), createObject('value', ''))]",
          "hostPoolToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('HostPool-AppGroups-{0}', parameters('time'))), '2020-10-01').outputs.hostPooltoken.value]"
          },
          "marketPlaceGalleryWindows": {
            "value": "[variables('varMarketPlaceGalleryWindows')[parameters('avdOsImage')]]"
          },
          "useSharedImage": {
            "value": "[parameters('useSharedImage')]"
          },
          "tags": "[if(parameters('createResourceTags'), createObject('value', union(variables('varAllResourceTags'), variables('varAvdCostManagementParentResourceTag'))), createObject('value', variables('varAvdCostManagementParentResourceTag')))]",
          "deployMonitoring": {
            "value": "[parameters('avdDeployMonitoring')]"
          },
          "alaWorkspaceResourceId": "[if(parameters('avdDeployMonitoring'), if(parameters('deployAlaWorkspace'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time'))), '2020-10-01').outputs.avdAlaWorkspaceResourceId.value), createObject('value', parameters('alaExistingWorkspaceResourceId'))), createObject('value', ''))]",
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('avdAlaWorkspaceDataRetention')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "7237156827482076284"
            }
          },
          "parameters": {
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "AVD subnet ID."
              }
            },
            "sessionHostLocation": {
              "type": "string",
              "metadata": {
                "description": "Required. Location where to deploy compute services."
              }
            },
            "timeZone": {
              "type": "string",
              "metadata": {
                "description": "Required. Virtual machine time zone."
              }
            },
            "sessionHostNamePrefix": {
              "type": "string",
              "metadata": {
                "description": "AVD Session Host prefix."
              }
            },
            "computeObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Resource Group name for the session hosts."
              }
            },
            "serviceObjectsRgName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of AVD service objects RG."
              }
            },
            "workloadSubsId": {
              "type": "string",
              "metadata": {
                "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
              }
            },
            "deploySessionHostsCount": {
              "type": "int",
              "metadata": {
                "description": "Quantity of session hosts to deploy."
              }
            },
            "sessionHostCountIndex": {
              "type": "int",
              "metadata": {
                "description": "The session host number to begin with for the deployment."
              }
            },
            "useAvailabilityZones": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
              }
            },
            "availabilitySetNamePrefix": {
              "type": "string",
              "metadata": {
                "description": "Optional. Availablity Set name."
              }
            },
            "avsetFaultDomainCount": {
              "type": "int",
              "metadata": {
                "description": "Optional. Sets the number of fault domains for the availability set."
              }
            },
            "avsetUpdateDomainCount": {
              "type": "int",
              "metadata": {
                "description": "Optional. Sets the number of update domains for the availability set."
              }
            },
            "createAvdVnet": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Create new virtual network."
              }
            },
            "identityServiceProvider": {
              "type": "string",
              "metadata": {
                "description": "Required, The service providing domain services for Azure Virtual Desktop."
              }
            },
            "createIntuneEnrollment": {
              "type": "bool",
              "metadata": {
                "description": "Required, Eronll session hosts on Intune."
              }
            },
            "encryptionAtHost": {
              "type": "bool",
              "metadata": {
                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
              }
            },
            "sessionHostsSize": {
              "type": "string",
              "metadata": {
                "description": "Session host VM size."
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Enables accelerated Networking on the session hosts."
              }
            },
            "securityType": {
              "type": "string",
              "metadata": {
                "description": "Optional. Specifies the securityType of the virtual machine. Must be TrustedLaunch or ConfidentialVM enable UefiSettings."
              }
            },
            "secureBootEnabled": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. securityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "vTpmEnabled": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Specifies whether virtual TPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  securityType should be set to TrustedLaunch to enable UefiSettings."
              }
            },
            "sessionHostDiskType": {
              "type": "string",
              "metadata": {
                "description": "OS disk type for session host."
              }
            },
            "marketPlaceGalleryWindows": {
              "type": "object",
              "metadata": {
                "description": "Market Place OS image."
              }
            },
            "useSharedImage": {
              "type": "bool",
              "metadata": {
                "description": "Set to deploy image from Azure Compute Gallery."
              }
            },
            "avdImageTemplateDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Source custom image ID."
              }
            },
            "storageManagedIdentityResourceId": {
              "type": "string",
              "metadata": {
                "description": "Storage Managed Identity Resource ID."
              }
            },
            "vmLocalUserName": {
              "type": "string",
              "metadata": {
                "description": "Local administrator username."
              }
            },
            "wrklKvName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of keyvault that contains credentials."
              }
            },
            "identityDomainName": {
              "type": "string",
              "metadata": {
                "description": "Required. AD domain name."
              }
            },
            "domainJoinUserName": {
              "type": "string",
              "metadata": {
                "description": "Required. AVD session host domain join credentials."
              }
            },
            "sessionHostOuPath": {
              "type": "string",
              "metadata": {
                "description": "Optional. OU path to join AVd VMs."
              }
            },
            "applicationSecurityGroupResourceId": {
              "type": "string",
              "metadata": {
                "description": "Application Security Group (ASG) for the session hosts."
              }
            },
            "hostPoolToken": {
              "type": "string",
              "metadata": {
                "description": "AVD host pool token."
              }
            },
            "hostPoolName": {
              "type": "string",
              "metadata": {
                "description": "AVD Host Pool name."
              }
            },
            "agentPackageLocation": {
              "type": "string",
              "metadata": {
                "description": "Location for the AVD agent installation package."
              }
            },
            "createAvdFslogixDeployment": {
              "type": "bool",
              "metadata": {
                "description": "Deploy Fslogix setup."
              }
            },
            "fsLogixScript": {
              "type": "string",
              "metadata": {
                "description": "FSlogix configuration script file name."
              }
            },
            "fsLogixScriptArguments": {
              "type": "string",
              "metadata": {
                "description": "Configuration arguments for FSlogix."
              }
            },
            "fslogixSharePath": {
              "type": "string",
              "metadata": {
                "description": "Path for the FSlogix share."
              }
            },
            "fslogixScriptUri": {
              "type": "string",
              "metadata": {
                "description": "URI for FSlogix configuration script."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Required. Tags to be applied to resources"
              }
            },
            "alaWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Optional. Log analytics workspace for diagnostic logs."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "metadata": {
                "description": "Optional. Diagnostic logs retention."
              }
            },
            "deployMonitoring": {
              "type": "bool",
              "metadata": {
                "description": "Optional. Deploy AVD monitoring resources and setings. (Default: true)"
              }
            },
            "time": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "Do not modify, used to set unique value for resource deployment."
              }
            }
          },
          "variables": {
            "varAvdMaxSessionHostsPerTemplateDeployment": 30,
            "varDivisionValue": "[div(parameters('deploySessionHostsCount'), variables('varAvdMaxSessionHostsPerTemplateDeployment'))]",
            "varDivisionRemainderValue": "[mod(parameters('deploySessionHostsCount'), variables('varAvdMaxSessionHostsPerTemplateDeployment'))]",
            "varAvdSessionHostBatchCount": "[if(greater(variables('varDivisionRemainderValue'), 0), add(variables('varDivisionValue'), 1), variables('varDivisionValue'))]",
            "maxAvailabilitySetMembersCount": 199,
            "divisionAvSetValue": "[div(parameters('deploySessionHostsCount'), variables('maxAvailabilitySetMembersCount'))]",
            "divisionAvSetRemainderValue": "[mod(parameters('deploySessionHostsCount'), variables('maxAvailabilitySetMembersCount'))]",
            "availabilitySetCount": "[if(greater(variables('divisionAvSetRemainderValue'), 0), add(variables('divisionAvSetValue'), 1), variables('divisionAvSetValue'))]"
          },
          "resources": [
            {
              "condition": "[not(parameters('useAvailabilityZones'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('AVD-Availability-Set-{0}', parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('computeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "avdWorkloadSubsId": {
                    "value": "[parameters('workloadSubsId')]"
                  },
                  "avdComputeObjectsRgName": {
                    "value": "[parameters('computeObjectsRgName')]"
                  },
                  "avdAvailabilitySetNamePrefix": {
                    "value": "[parameters('availabilitySetNamePrefix')]"
                  },
                  "avdSessionHostLocation": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "availabilitySetCount": {
                    "value": "[variables('availabilitySetCount')]"
                  },
                  "avdAsFaultDomainCount": {
                    "value": "[parameters('avsetFaultDomainCount')]"
                  },
                  "avdAsUpdateDomainCount": {
                    "value": "[parameters('avsetUpdateDomainCount')]"
                  },
                  "avdTags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "2738650626523956898"
                    }
                  },
                  "parameters": {
                    "avdSessionHostLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location where to deploy compute services."
                      }
                    },
                    "avdAvailabilitySetNamePrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Availablity Set name."
                      }
                    },
                    "availabilitySetCount": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. Availablity Set count."
                      }
                    },
                    "avdAsFaultDomainCount": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. Sets the number of fault domains for the availability set."
                      }
                    },
                    "avdAsUpdateDomainCount": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. Sets the number of update domains for the availability set."
                      }
                    },
                    "avdComputeObjectsRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group name for the session hosts."
                      }
                    },
                    "avdWorkloadSubsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
                      }
                    },
                    "avdTags": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Tags to be applied to resources"
                      }
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Do not modify, used to set unique value for resource deployment."
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "avdAvailabilitySet",
                        "count": "[length(range(1, parameters('availabilitySetCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Availability-Set-{0}-{1}', range(1, parameters('availabilitySetCount'))[copyIndex()], parameters('time'))]",
                      "subscriptionId": "[format('{0}', parameters('avdWorkloadSubsId'))]",
                      "resourceGroup": "[format('{0}', parameters('avdComputeObjectsRgName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-{1}', parameters('avdAvailabilitySetNamePrefix'), padLeft(range(1, parameters('availabilitySetCount'))[copyIndex()], 3, '0'))]"
                          },
                          "location": {
                            "value": "[parameters('avdSessionHostLocation')]"
                          },
                          "availabilitySetFaultDomain": {
                            "value": "[parameters('avdAsFaultDomainCount')]"
                          },
                          "availabilitySetUpdateDomain": {
                            "value": "[parameters('avdAsUpdateDomainCount')]"
                          },
                          "tags": {
                            "value": "[parameters('avdTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "8341917111187177741"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the availability set that is being created."
                              }
                            },
                            "availabilitySetFaultDomain": {
                              "type": "int",
                              "defaultValue": 2,
                              "metadata": {
                                "description": "Optional. The number of fault domains to use."
                              }
                            },
                            "availabilitySetUpdateDomain": {
                              "type": "int",
                              "defaultValue": 5,
                              "metadata": {
                                "description": "Optional. The number of update domains to use."
                              }
                            },
                            "availabilitySetSku": {
                              "type": "string",
                              "defaultValue": "Aligned",
                              "metadata": {
                                "description": "Optional. SKU of the availability set.\n- Use \\'Aligned\\' for virtual machines with managed disks\n- Use \\'Classic\\' for virtual machines with unmanaged disks.\n"
                              }
                            },
                            "proximityPlacementGroupId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a proximity placement group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Resource location."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "NotSpecified",
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "NotSpecified",
                                "ReadOnly"
                              ]
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the availability set resource."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/availabilitySets",
                              "apiVersion": "2021-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "platformFaultDomainCount": "[parameters('availabilitySetFaultDomain')]",
                                "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomain')]",
                                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupId'))), createObject('id', parameters('proximityPlacementGroupId')), null())]"
                              },
                              "sku": {
                                "name": "[parameters('availabilitySetSku')]"
                              }
                            },
                            {
                              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2017-04-01",
                              "scope": "[format('Microsoft.Compute/availabilitySets/{0}', parameters('name'))]",
                              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "availabilitySet_rbac",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-AvSet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "9574475316370005201"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the prinicpals to assign to role to"
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Description of role assignment"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                      "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2021-04-01-preview",
                                      "scope": "[format('Microsoft.Compute/availabilitySets/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the availability set"
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the availability set"
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the availability set was deployed into"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "sessionHosts",
                "count": "[length(range(1, variables('varAvdSessionHostBatchCount')))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('AVD-SH-Batch-{0}-{1}', sub(range(1, variables('varAvdSessionHostBatchCount'))[copyIndex()], 1), parameters('time'))]",
              "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
              "resourceGroup": "[format('{0}', parameters('computeObjectsRgName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "agentPackageLocation": {
                    "value": "[parameters('agentPackageLocation')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "applicationSecurityGroupResourceId": {
                    "value": "[parameters('applicationSecurityGroupResourceId')]"
                  },
                  "availabilitySetNamePrefix": {
                    "value": "[parameters('availabilitySetNamePrefix')]"
                  },
                  "maxAvailabilitySetMembersCount": {
                    "value": "[variables('maxAvailabilitySetMembersCount')]"
                  },
                  "computeObjectsRgName": {
                    "value": "[parameters('computeObjectsRgName')]"
                  },
                  "domainJoinUserName": {
                    "value": "[parameters('domainJoinUserName')]"
                  },
                  "wrklKvName": {
                    "value": "[parameters('wrklKvName')]"
                  },
                  "serviceObjectsRgName": {
                    "value": "[parameters('serviceObjectsRgName')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "identityDomainName": {
                    "value": "[parameters('identityDomainName')]"
                  },
                  "imageTemplateDefinitionId": {
                    "value": "[parameters('avdImageTemplateDefinitionId')]"
                  },
                  "sessionHostOuPath": {
                    "value": "[parameters('sessionHostOuPath')]"
                  },
                  "sessionHostsCount": "[if(and(equals(range(1, variables('varAvdSessionHostBatchCount'))[copyIndex()], variables('varAvdSessionHostBatchCount')), greater(variables('varDivisionRemainderValue'), 0)), createObject('value', variables('varDivisionRemainderValue')), createObject('value', variables('varAvdMaxSessionHostsPerTemplateDeployment')))]",
                  "avdSessionHostCountIndex": "[if(equals(range(1, variables('varAvdSessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostCountIndex')), createObject('value', add(mul(sub(range(1, variables('varAvdSessionHostBatchCount'))[copyIndex()], 1), variables('varAvdMaxSessionHostsPerTemplateDeployment')), parameters('sessionHostCountIndex'))))]",
                  "sessionHostDiskType": {
                    "value": "[parameters('sessionHostDiskType')]"
                  },
                  "sessionHostLocation": {
                    "value": "[parameters('sessionHostLocation')]"
                  },
                  "sessionHostNamePrefix": {
                    "value": "[parameters('sessionHostNamePrefix')]"
                  },
                  "createAvdVnet": {
                    "value": "[parameters('createAvdVnet')]"
                  },
                  "sessionHostsSize": {
                    "value": "[parameters('sessionHostsSize')]"
                  },
                  "enableAcceleratedNetworking": {
                    "value": "[parameters('enableAcceleratedNetworking')]"
                  },
                  "securityType": {
                    "value": "[parameters('securityType')]"
                  },
                  "secureBootEnabled": {
                    "value": "[parameters('secureBootEnabled')]"
                  },
                  "vTpmEnabled": {
                    "value": "[parameters('vTpmEnabled')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "useAvailabilityZones": {
                    "value": "[parameters('useAvailabilityZones')]"
                  },
                  "vmLocalUserName": {
                    "value": "[parameters('vmLocalUserName')]"
                  },
                  "workloadSubsId": {
                    "value": "[parameters('workloadSubsId')]"
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('encryptionAtHost')]"
                  },
                  "createAvdFslogixDeployment": {
                    "value": "[parameters('createAvdFslogixDeployment')]"
                  },
                  "storageManagedIdentityResourceId": {
                    "value": "[parameters('storageManagedIdentityResourceId')]"
                  },
                  "fsLogixScript": {
                    "value": "[parameters('fsLogixScript')]"
                  },
                  "fsLogixScriptArguments": {
                    "value": "[parameters('fsLogixScriptArguments')]"
                  },
                  "fslogixSharePath": {
                    "value": "[parameters('fslogixSharePath')]"
                  },
                  "fslogixScriptUri": {
                    "value": "[parameters('fslogixScriptUri')]"
                  },
                  "hostPoolToken": {
                    "value": "[parameters('hostPoolToken')]"
                  },
                  "marketPlaceGalleryWindows": {
                    "value": "[parameters('marketPlaceGalleryWindows')]"
                  },
                  "useSharedImage": {
                    "value": "[parameters('useSharedImage')]"
                  },
                  "identityServiceProvider": {
                    "value": "[parameters('identityServiceProvider')]"
                  },
                  "createIntuneEnrollment": {
                    "value": "[parameters('createIntuneEnrollment')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "deployMonitoring": {
                    "value": "[parameters('deployMonitoring')]"
                  },
                  "alaWorkspaceResourceId": {
                    "value": "[parameters('alaWorkspaceResourceId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.15.31.15270",
                      "templateHash": "18241581116988903293"
                    }
                  },
                  "parameters": {
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "AVD subnet ID."
                      }
                    },
                    "sessionHostLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location where to deploy compute services."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Virtual machine time zone."
                      }
                    },
                    "sessionHostNamePrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "AVD Session Host prefix."
                      }
                    },
                    "availabilitySetNamePrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Availablity Set name."
                      }
                    },
                    "maxAvailabilitySetMembersCount": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. Availablity Set max members."
                      }
                    },
                    "computeObjectsRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group name for the session hosts"
                      }
                    },
                    "serviceObjectsRgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group name for the session hosts"
                      }
                    },
                    "workloadSubsId": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. AVD workload subscription ID, multiple subscriptions scenario."
                      }
                    },
                    "sessionHostsCount": {
                      "type": "int",
                      "metadata": {
                        "description": "Quantity of session hosts to deploy"
                      }
                    },
                    "createAvdVnet": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Create new virtual network."
                      }
                    },
                    "avdSessionHostCountIndex": {
                      "type": "int",
                      "metadata": {
                        "description": "The session host number to begin with for the deployment."
                      }
                    },
                    "useAvailabilityZones": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
                      }
                    },
                    "encryptionAtHost": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "sessionHostsSize": {
                      "type": "string",
                      "metadata": {
                        "description": "Session host VM size."
                      }
                    },
                    "securityType": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Specifies the securityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "secureBootEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. securityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "vTpmEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Specifies whether the virtual TPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  securityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Enable accelerated networking on the session host VMs."
                      }
                    },
                    "sessionHostDiskType": {
                      "type": "string",
                      "metadata": {
                        "description": "OS disk type for session host."
                      }
                    },
                    "marketPlaceGalleryWindows": {
                      "type": "object",
                      "metadata": {
                        "description": "Market Place OS image."
                      }
                    },
                    "useSharedImage": {
                      "type": "bool",
                      "metadata": {
                        "description": "Set to deploy image from Azure Compute Gallery."
                      }
                    },
                    "imageTemplateDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Source custom image ID."
                      }
                    },
                    "storageManagedIdentityResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Fslogix Managed Identity Resource ID."
                      }
                    },
                    "vmLocalUserName": {
                      "type": "string",
                      "metadata": {
                        "description": "Local administrator username."
                      }
                    },
                    "identityDomainName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AD domain name."
                      }
                    },
                    "domainJoinUserName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. AVD session host domain join credentials."
                      }
                    },
                    "identityServiceProvider": {
                      "type": "string",
                      "metadata": {
                        "description": "Required, The service providing domain services for Azure Virtual Desktop."
                      }
                    },
                    "createIntuneEnrollment": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required, Eronll session hosts on Intune."
                      }
                    },
                    "wrklKvName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of keyvault that contains credentials."
                      }
                    },
                    "sessionHostOuPath": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. OU path to join AVd VMs"
                      }
                    },
                    "applicationSecurityGroupResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Application Security Group for the session hosts."
                      }
                    },
                    "hostPoolToken": {
                      "type": "string",
                      "metadata": {
                        "description": "AVD host pool token."
                      }
                    },
                    "hostPoolName": {
                      "type": "string",
                      "metadata": {
                        "description": "AVD Host Pool name."
                      }
                    },
                    "agentPackageLocation": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for the AVD agent installation package."
                      }
                    },
                    "createAvdFslogixDeployment": {
                      "type": "bool",
                      "metadata": {
                        "description": "Deploy Fslogix setup."
                      }
                    },
                    "fsLogixScript": {
                      "type": "string",
                      "metadata": {
                        "description": "FSlogix configuration script file name."
                      }
                    },
                    "fsLogixScriptArguments": {
                      "type": "string",
                      "metadata": {
                        "description": "Configuration arguments for FSlogix."
                      }
                    },
                    "fslogixSharePath": {
                      "type": "string",
                      "metadata": {
                        "description": "Path for the FSlogix share."
                      }
                    },
                    "fslogixScriptUri": {
                      "type": "string",
                      "metadata": {
                        "description": "URI for FSlogix configuration script."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Tags to be applied to resources"
                      }
                    },
                    "alaWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Log analytics workspace for diagnostic logs."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "metadata": {
                        "description": "Optional. Diagnostic logs retention."
                      }
                    },
                    "deployMonitoring": {
                      "type": "bool",
                      "metadata": {
                        "description": "Optional. Deploy AVD monitoring resources and setings. (Default: true)"
                      }
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "Do not modify, used to set unique value for resource deployment."
                      }
                    }
                  },
                  "variables": {
                    "varAllAvailabilityZones": "[pickZones('Microsoft.Compute', 'virtualMachines', parameters('sessionHostLocation'), 3)]",
                    "varNicDiagnosticMetricsToEnable": [
                      "AllMetrics"
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "avdSessionHosts",
                        "count": "[length(range(1, parameters('sessionHostsCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Session-Host-{0}-{1}', padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), 3, '0'), parameters('time'))]",
                      "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
                      "resourceGroup": "[format('{0}', parameters('computeObjectsRgName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-{1}', parameters('sessionHostNamePrefix'), padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), 3, '0'))]"
                          },
                          "location": {
                            "value": "[parameters('sessionHostLocation')]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          },
                          "userAssignedIdentities": "[if(parameters('createAvdFslogixDeployment'), createObject('value', createObject(format('{0}', parameters('storageManagedIdentityResourceId')), createObject())), createObject('value', createObject()))]",
                          "systemAssignedIdentity": "[if(equals(parameters('identityServiceProvider'), 'AAD'), createObject('value', true()), createObject('value', false()))]",
                          "availabilityZone": "[if(parameters('useAvailabilityZones'), createObject('value', take(skip(variables('varAllAvailabilityZones'), mod(range(1, parameters('sessionHostsCount'))[copyIndex()], length(variables('varAllAvailabilityZones')))), 1)), createObject('value', createArray()))]",
                          "encryptionAtHost": {
                            "value": "[parameters('encryptionAtHost')]"
                          },
                          "availabilitySetName": "[if(not(parameters('useAvailabilityZones')), createObject('value', format('{0}-{1}', parameters('availabilitySetNamePrefix'), padLeft(add(1, div(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), parameters('maxAvailabilitySetMembersCount'))), 3, '0'))), createObject('value', ''))]",
                          "osType": {
                            "value": "Windows"
                          },
                          "licenseType": {
                            "value": "Windows_Client"
                          },
                          "vmSize": {
                            "value": "[parameters('sessionHostsSize')]"
                          },
                          "securityType": {
                            "value": "[parameters('securityType')]"
                          },
                          "secureBootEnabled": {
                            "value": "[parameters('secureBootEnabled')]"
                          },
                          "vTpmEnabled": {
                            "value": "[parameters('vTpmEnabled')]"
                          },
                          "imageReference": "[if(parameters('useSharedImage'), createObject('value', json(format('{{''id'': ''{0}''}}', parameters('imageTemplateDefinitionId')))), createObject('value', parameters('marketPlaceGalleryWindows')))]",
                          "osDisk": {
                            "value": {
                              "createOption": "fromImage",
                              "deleteOption": "Delete",
                              "diskSizeGB": 128,
                              "managedDisk": {
                                "storageAccountType": "[parameters('sessionHostDiskType')]"
                              }
                            }
                          },
                          "adminUsername": {
                            "value": "[parameters('vmLocalUserName')]"
                          },
                          "adminPassword": {
                            "reference": {
                              "keyVault": {
                                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                              },
                              "secretName": "avdVmLocalUserPassword"
                            }
                          },
                          "nicConfigurations": {
                            "value": [
                              {
                                "nicSuffix": "nic-001-",
                                "deleteOption": "Delete",
                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                "ipConfigurations": "[if(parameters('createAvdVnet'), createArray(createObject('name', 'ipconfig01', 'subnetId', parameters('subnetId'), 'applicationSecurityGroups', parameters('applicationSecurityGroupResourceId'))), createArray(createObject('name', 'ipconfig01', 'subnetId', parameters('subnetId'))))]"
                              }
                            ]
                          },
                          "extensionDomainJoinPassword": {
                            "reference": {
                              "keyVault": {
                                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('serviceObjectsRgName'))), 'Microsoft.KeyVault/vaults', parameters('wrklKvName'))]"
                              },
                              "secretName": "avdDomainJoinUserPassword"
                            }
                          },
                          "extensionDomainJoinConfig": {
                            "value": {
                              "enabled": "[if(equals(parameters('identityServiceProvider'), 'AAD'), false(), true())]",
                              "settings": {
                                "name": "[parameters('identityDomainName')]",
                                "ouPath": "[if(not(empty(parameters('sessionHostOuPath'))), parameters('sessionHostOuPath'), null())]",
                                "user": "[parameters('domainJoinUserName')]",
                                "restart": "true",
                                "options": "3"
                              }
                            }
                          },
                          "extensionAadJoinConfig": {
                            "value": {
                              "enabled": "[if(equals(parameters('identityServiceProvider'), 'AAD'), true(), false())]",
                              "settings": "[if(parameters('createIntuneEnrollment'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), createObject())]"
                            }
                          },
                          "extensionAntiMalwareConfig": {
                            "value": {
                              "enabled": true,
                              "settings": {
                                "AntimalwareEnabled": true,
                                "RealtimeProtectionEnabled": "true",
                                "ScheduledScanSettings": {
                                  "isEnabled": "true",
                                  "day": "7",
                                  "time": "120",
                                  "scanType": "Quick"
                                },
                                "Exclusions": "[if(parameters('createAvdFslogixDeployment'), createObject('Extensions', '*.vhd;*.vhdx', 'Paths', format('\"%ProgramFiles%\\FSLogix\\Apps\\frxdrv.sys;%ProgramFiles%\\FSLogix\\Apps\\frxccd.sys;%ProgramFiles%\\FSLogix\\Apps\\frxdrvvt.sys;%TEMP%\\*.VHD;%TEMP%\\*.VHDX;%Windir%\\TEMP\\*.VHD;%Windir%\\TEMP\\*.VHDX;{0}\\*\\*.VHD;{1}\\*\\*.VHDX', parameters('fslogixSharePath'), parameters('fslogixSharePath')), 'Processes', '%ProgramFiles%\\FSLogix\\Apps\\frxccd.exe;%ProgramFiles%\\FSLogix\\Apps\\frxccds.exe;%ProgramFiles%\\FSLogix\\Apps\\frxsvc.exe'), createObject())]"
                              }
                            }
                          },
                          "extensionMonitoringAgentConfig": {
                            "value": {
                              "enabled": "[parameters('deployMonitoring')]"
                            }
                          },
                          "monitoringWorkspaceId": {
                            "value": "[parameters('alaWorkspaceResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "nicdiagnosticMetricsToEnable": {
                            "value": "[variables('varNicDiagnosticMetricsToEnable')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('alaWorkspaceResourceId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "4354075424594305961"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
                              "metadata": {
                                "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
                              }
                            },
                            "vmComputerNamesTransformation": {
                              "type": "string",
                              "defaultValue": "none",
                              "metadata": {
                                "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the size for the VMs"
                              }
                            },
                            "encryptionAtHost": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "securityType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "secureBootEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "vTpmEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "imageReference": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                              }
                            },
                            "plan": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                              }
                            },
                            "osDisk": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "dataDisks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "ultraSSDEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                              }
                            },
                            "adminUsername": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Administrator username"
                              }
                            },
                            "adminPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed"
                              }
                            },
                            "customData": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                              }
                            },
                            "certificatesToBeInstalled": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                              }
                            },
                            "vmPriority": {
                              "type": "string",
                              "defaultValue": "Regular",
                              "allowedValues": [
                                "Regular",
                                "Low",
                                "Spot"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the priority for the virtual machine."
                              }
                            },
                            "enableEvictionPolicy": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                              }
                            },
                            "maxPriceForLowPriorityVm": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                              }
                            },
                            "dedicatedHostId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                              }
                            },
                            "licenseType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Windows_Client",
                                "Windows_Server",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
                              }
                            },
                            "publicKeys": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs"
                              }
                            },
                            "systemAssignedIdentity": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables system assigned managed identity on the resource."
                              }
                            },
                            "userAssignedIdentities": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The ID(s) to assign to the resource."
                              }
                            },
                            "bootDiagnosticStorageAccountName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Storage account used to store boot diagnostic information. Boot diagnostics will be disabled if no value is provided."
                              }
                            },
                            "bootDiagnosticStorageAccountUri": {
                              "type": "string",
                              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                              "metadata": {
                                "description": "Optional. Storage account boot diagnostic base URI."
                              }
                            },
                            "proximityPlacementGroupName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource name of a proximity placement group."
                              }
                            },
                            "availabilitySetName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource name of an availability set. Cannot be used in combination with availability zone nor scale set."
                              }
                            },
                            "availabilityZone": {
                              "type": "array",
                              "metadata": {
                                "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                              }
                            },
                            "nicConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Configures NICs and PIPs."
                              }
                            },
                            "pipDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                              }
                            },
                            "pipdiagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "allowedValues": [
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "pipdiagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "nicDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                              }
                            },
                            "nicdiagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "backupVaultName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Recovery service vault name to add VMs to backup."
                              }
                            },
                            "backupVaultResourceGroup": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                              }
                            },
                            "backupPolicyName": {
                              "type": "string",
                              "defaultValue": "DefaultPolicy",
                              "metadata": {
                                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                              }
                            },
                            "enableServerSideEncryption": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
                              }
                            },
                            "allowExtensionOperations": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                              }
                            },
                            "extensionDomainJoinPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter"
                              }
                            },
                            "extensionDomainJoinConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionAadJoinConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the Azure AD Windows login extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionAntiMalwareConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionMonitoringAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionAzureMonitoringAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Azure Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "monitoringWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
                              }
                            },
                            "extensionDependencyAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionNetworkWatcherAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionDiskEncryptionConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionDSCConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionCustomScriptConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false,
                                "fileData": []
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed"
                              }
                            },
                            "extensionCustomScriptProtectedSetting": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings"
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "NotSpecified",
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "NotSpecified",
                                "ReadOnly"
                              ]
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableDefaultTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                              }
                            },
                            "baseTime": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]",
                              "metadata": {
                                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                              }
                            },
                            "sasTokenValidityLength": {
                              "type": "string",
                              "defaultValue": "PT8H",
                              "metadata": {
                                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                              }
                            },
                            "osType": {
                              "type": "string",
                              "allowedValues": [
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Required. The chosen OS type"
                              }
                            },
                            "disablePasswordAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether password authentication should be disabled."
                              }
                            },
                            "provisionVMAgent": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                              }
                            },
                            "enableAutomaticUpdates": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                              }
                            },
                            "timeZone": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be TimeZoneInfo.id value from time zones returned by TimeZoneInfo.GetSystemTimeZones."
                              }
                            },
                            "additionalUnattendContent": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object"
                              }
                            },
                            "winRM": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                              }
                            },
                            "configurationProfileAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Any VM configuration profile assignments"
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "publicKeysFormatted",
                                "count": "[length(parameters('publicKeys'))]",
                                "input": {
                                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                                }
                              }
                            ],
                            "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
                            "linuxConfiguration": {
                              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                              "ssh": {
                                "publicKeys": "[variables('publicKeysFormatted')]"
                              },
                              "provisionVMAgent": "[parameters('provisionVMAgent')]"
                            },
                            "windowsConfiguration": {
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                            },
                            "accountSasProperties": {
                              "signedServices": "b",
                              "signedPermission": "r",
                              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                              "signedResourceTypes": "o",
                              "signedProtocol": "https"
                            },
                            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableDefaultTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2021-04-01",
                              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": []
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "zones": "[if(equals(parameters('availabilityZone'), ''), null(), parameters('availabilityZone'))]",
                              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "securityProfile": {
                                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                                  "securityType": "[parameters('securityType')]",
                                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                                },
                                "storageProfile": {
                                  "copy": [
                                    {
                                      "name": "dataDisks",
                                      "count": "[length(parameters('dataDisks'))]",
                                      "input": {
                                        "lun": "[copyIndex('dataDisks')]",
                                        "name": "[format('disk-{0}-{1}', padLeft(add(copyIndex('dataDisks'), 1), 3, '0'), parameters('name'))]",
                                        "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                        "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                                        "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                                        "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                                        "managedDisk": {
                                          "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                          "diskEncryptionSet": {
                                            "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, null())]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "imageReference": "[parameters('imageReference')]",
                                  "osDisk": {
                                    "name": "[format('osdisk-001-{0}', parameters('name'))]",
                                    "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                                    "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                    "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                                    "managedDisk": {
                                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                                      "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), parameters('osDisk').managedDisk.diskEncryptionSet, null())]"
                                    }
                                  }
                                },
                                "additionalCapabilities": {
                                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                },
                                "osProfile": {
                                  "computerName": "[variables('vmComputerNameTransformed')]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]",
                                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                                  "secrets": "[parameters('certificatesToBeInstalled')]",
                                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                },
                                "networkProfile": {
                                  "copy": [
                                    {
                                      "name": "networkInterfaces",
                                      "count": "[length(parameters('nicConfigurations'))]",
                                      "input": {
                                        "properties": {
                                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                        },
                                        "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix, parameters('name')))]"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": "[not(empty(parameters('bootDiagnosticStorageAccountName')))]",
                                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                                  }
                                },
                                "availabilitySet": "[if(not(empty(parameters('availabilitySetName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')))), null())]",
                                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')))), null())]",
                                "priority": "[parameters('vmPriority')]",
                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                                "billingProfile": "[if(and(not(empty(parameters('vmPriority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), json(format('{{\"maxPrice\":\"{0}\"}}', parameters('maxPriceForLowPriorityVm'))), null())]",
                                "host": "[if(not(empty(parameters('dedicatedHostId'))), json(format('{{\"id\":\"{0}\"}}', parameters('dedicatedHostId'))), null())]",
                                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                              },
                              "dependsOn": [
                                "virtualMachine_nic"
                              ]
                            },
                            {
                              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2017-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "virtualMachine_nic",
                                "count": "[length(parameters('nicConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "networkInterfaceName": {
                                    "value": "[format('{0}{1}', parameters('nicConfigurations')[copyIndex()].nicSuffix, parameters('name'))]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false())), createObject('value', false()))]",
                                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "networkSecurityGroupId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'nsgId'), if(not(empty(parameters('nicConfigurations')[copyIndex()].nsgId)), createObject('value', parameters('nicConfigurations')[copyIndex()].nsgId), createObject('value', '')), createObject('value', ''))]",
                                  "ipConfigurationArray": {
                                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "pipDiagnosticSettingsName": {
                                    "value": "[parameters('pipDiagnosticSettingsName')]"
                                  },
                                  "nicDiagnosticSettingsName": {
                                    "value": "[parameters('nicDiagnosticSettingsName')]"
                                  },
                                  "pipdiagnosticMetricsToEnable": {
                                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                                  },
                                  "pipdiagnosticLogCategoriesToEnable": {
                                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                                  },
                                  "nicDiagnosticMetricsToEnable": {
                                    "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                                  },
                                  "roleAssignments": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), createObject('value', parameters('nicConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "1311240889984469923"
                                    }
                                  },
                                  "parameters": {
                                    "networkInterfaceName": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": []
                                    },
                                    "networkSecurityGroupId": {
                                      "type": "string",
                                      "defaultValue": ""
                                    },
                                    "ipConfigurationArray": {
                                      "type": "array"
                                    },
                                    "lock": {
                                      "type": "string"
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string"
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int"
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string"
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string"
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string"
                                    },
                                    "pipdiagnosticMetricsToEnable": {
                                      "type": "array"
                                    },
                                    "pipdiagnosticLogCategoriesToEnable": {
                                      "type": "array"
                                    },
                                    "nicDiagnosticMetricsToEnable": {
                                      "type": "array"
                                    },
                                    "roleAssignments": {
                                      "type": "array"
                                    },
                                    "pipDiagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                                      }
                                    },
                                    "nicDiagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "nicDiagnosticsMetrics",
                                        "count": "[length(parameters('nicDiagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('nicDiagnosticMetricsToEnable')[copyIndex('nicDiagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-05-01",
                                      "name": "[parameters('networkInterfaceName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "ipConfigurations",
                                            "count": "[length(parameters('ipConfigurationArray'))]",
                                            "input": {
                                              "name": "[if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name, null())]",
                                              "properties": {
                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                "privateIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'vmIPAddress'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress, null()), null())]",
                                                "publicIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'pipconfiguration'), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].pipconfiguration.publicIpNameSuffix)))), null())]",
                                                "subnet": {
                                                  "id": "[parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].subnetId]"
                                                },
                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                "applicationSecurityGroups": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), createArray(createObject('id', parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].applicationSecurityGroups)), null())]"
                                              }
                                            }
                                          }
                                        ],
                                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]"
                                      },
                                      "dependsOn": [
                                        "networkInterface_publicIPConfigurations"
                                      ]
                                    },
                                    {
                                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2017-04-01",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('networkInterfaceName'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
                                      "name": "[parameters('nicDiagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('nicDiagnosticsMetrics')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "networkInterface_publicIPConfigurations",
                                        "count": "[length(parameters('ipConfigurationArray'))]"
                                      },
                                      "condition": "[contains(parameters('ipConfigurationArray')[copyIndex()], 'pipconfiguration')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-PIP-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "publicIPAddressName": {
                                            "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                                          },
                                          "publicIPPrefixId": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPPrefixId'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId), createObject('value', '')), createObject('value', ''))]",
                                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                                          "skuName": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuName'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                                          "skuTier": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuTier'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "diagnosticStorageAccountId": {
                                            "value": "[parameters('diagnosticStorageAccountId')]"
                                          },
                                          "diagnosticLogsRetentionInDays": {
                                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                          },
                                          "diagnosticWorkspaceId": {
                                            "value": "[parameters('diagnosticWorkspaceId')]"
                                          },
                                          "diagnosticEventHubAuthorizationRuleId": {
                                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                          },
                                          "diagnosticEventHubName": {
                                            "value": "[parameters('diagnosticEventHubName')]"
                                          },
                                          "diagnosticSettingsName": {
                                            "value": "[parameters('pipDiagnosticSettingsName')]"
                                          },
                                          "diagnosticMetricsToEnable": {
                                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                                          },
                                          "diagnosticLogCategoriesToEnable": {
                                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "roleAssignments": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'roleAssignments'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments)), createObject('value', parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "13524796998069329748"
                                            }
                                          },
                                          "parameters": {
                                            "publicIPAddressName": {
                                              "type": "string"
                                            },
                                            "publicIPPrefixId": {
                                              "type": "string"
                                            },
                                            "publicIPAllocationMethod": {
                                              "type": "string"
                                            },
                                            "skuName": {
                                              "type": "string"
                                            },
                                            "skuTier": {
                                              "type": "string"
                                            },
                                            "location": {
                                              "type": "string"
                                            },
                                            "diagnosticStorageAccountId": {
                                              "type": "string"
                                            },
                                            "diagnosticLogsRetentionInDays": {
                                              "type": "int"
                                            },
                                            "diagnosticWorkspaceId": {
                                              "type": "string"
                                            },
                                            "diagnosticEventHubAuthorizationRuleId": {
                                              "type": "string"
                                            },
                                            "diagnosticEventHubName": {
                                              "type": "string"
                                            },
                                            "diagnosticMetricsToEnable": {
                                              "type": "array"
                                            },
                                            "diagnosticLogCategoriesToEnable": {
                                              "type": "array"
                                            },
                                            "lock": {
                                              "type": "string"
                                            },
                                            "roleAssignments": {
                                              "type": "array"
                                            },
                                            "tags": {
                                              "type": "object"
                                            },
                                            "diagnosticSettingsName": {
                                              "type": "string",
                                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('publicIPAddressName'))]",
                                              "metadata": {
                                                "description": "Optional. The name of the diagnostic setting, if deployed."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "diagnosticsLogs",
                                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                                "input": {
                                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                                  "enabled": true,
                                                  "retentionPolicy": {
                                                    "enabled": true,
                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                  }
                                                }
                                              },
                                              {
                                                "name": "diagnosticsMetrics",
                                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                                "input": {
                                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                                  "timeGrain": null,
                                                  "enabled": true,
                                                  "retentionPolicy": {
                                                    "enabled": true,
                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/publicIPAddresses",
                                              "apiVersion": "2021-05-01",
                                              "name": "[parameters('publicIPAddressName')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "sku": {
                                                "name": "[parameters('skuName')]",
                                                "tier": "[parameters('skuTier')]"
                                              },
                                              "properties": {
                                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixId'))), createObject('id', parameters('publicIPPrefixId')), null())]"
                                              }
                                            },
                                            {
                                              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2017-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                                              "name": "[format('{0}-{1}-lock', parameters('publicIPAddressName'), parameters('lock'))]",
                                              "properties": {
                                                "level": "[parameters('lock')]",
                                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                              ]
                                            },
                                            {
                                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                                              "name": "[parameters('diagnosticSettingsName')]",
                                              "properties": {
                                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                                "metrics": "[variables('diagnosticsMetrics')]",
                                                "logs": "[variables('diagnosticsLogs')]"
                                              },
                                              "dependsOn": [
                                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                              ]
                                            },
                                            {
                                              "copy": {
                                                "name": "publicIpAddress_rbac",
                                                "count": "[length(parameters('roleAssignments'))]"
                                              },
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2020-10-01",
                                              "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                                  "principalIds": {
                                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                                  },
                                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                                  "roleDefinitionIdOrName": {
                                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                                  },
                                                  "resourceId": {
                                                    "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.15.31.15270",
                                                      "templateHash": "9188927501762835850"
                                                    }
                                                  },
                                                  "parameters": {
                                                    "principalIds": {
                                                      "type": "array",
                                                      "metadata": {
                                                        "description": "Required. The IDs of the prinicpals to assign to role to"
                                                      }
                                                    },
                                                    "roleDefinitionIdOrName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                                      }
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                                                      }
                                                    },
                                                    "principalType": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "allowedValues": [
                                                        "ServicePrincipal",
                                                        "Group",
                                                        "User",
                                                        "ForeignGroup",
                                                        "Device",
                                                        ""
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. The principal type of the assigned principal ID."
                                                      }
                                                    },
                                                    "description": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. Description of role assignment"
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "builtInRoleNames": {
                                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                                      "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                                    }
                                                  },
                                                  "resources": [
                                                    {
                                                      "copy": {
                                                        "name": "roleAssignment",
                                                        "count": "[length(parameters('principalIds'))]"
                                                      },
                                                      "type": "Microsoft.Authorization/roleAssignments",
                                                      "apiVersion": "2021-04-01-preview",
                                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                                      "properties": {
                                                        "description": "[parameters('description')]",
                                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "dependsOn": [
                                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                              ]
                                            }
                                          ],
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The name of the resource group the public IP address was deployed."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('publicIPAddressName')]",
                                              "metadata": {
                                                "description": "The name of the public IP address."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]",
                                              "metadata": {
                                                "description": "The resource ID of the public IP address."
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "networkInterface_rbac",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.15.31.15270",
                                              "templateHash": "17676457614801942286"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the prinicpals to assign to role to"
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to"
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Description of role assignment"
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2021-04-01-preview",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                                      ]
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "vm_configurationProfileAssignment",
                                "count": "[length(parameters('configurationProfileAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-ConfigurationProfileAssignment-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "configurationProfile": {
                                    "value": "[parameters('configurationProfileAssignments')[copyIndex()]]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "15662528306426569422"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the configuration profile assignment"
                                      }
                                    },
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the VM to be associated"
                                      }
                                    },
                                    "configurationProfile": {
                                      "type": "string",
                                      "allowedValues": [
                                        "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                                        "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"
                                      ],
                                      "metadata": {
                                        "description": "Required. The configuration profile of automanage"
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Automanage/configurationProfileAssignments",
                                      "apiVersion": "2021-04-30-preview",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('virtualMachineName'))]",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "configurationProfile": "[parameters('configurationProfile')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), 'Microsoft.Automanage/configurationProfileAssignments', parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the configuration profile assignment"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the configuration profile assignment"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group the configuration profile assignment was deployed into"
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionDomainJoinConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DomainJoin"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Compute"
                                  },
                                  "type": {
                                    "value": "JsonADDomainExtension"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "Password": "[parameters('extensionDomainJoinPassword')]"
                                    }
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionAadJoinConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-AADJoin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AADLoginForWindows"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.ActiveDirectory"
                                  },
                                  "type": {
                                    "value": "AADLoginForWindows"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), createObject('value', '1.0'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionAadJoinConfig').settings]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "MicrosoftAntiMalware"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": {
                                    "value": "IaaSAntimalware"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "MicrosoftMonitoringAgent"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.EnterpriseCloud.Monitoring"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.7')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                                    }
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                                    }
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionAzureMonitoringAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-AzureMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureMonitoringAgent"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                  },
                                  "type": {
                                    "value": "DependencyAgentWindows"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "settings": {
                                    "value": {
                                      "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                                    }
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                                    }
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DependencyAgent"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NetworkWatcherAgent"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.NetworkWatcher"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionDSCConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DesiredStateConfiguration"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Powershell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]",
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "CustomScriptExtension"
                                  },
                                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "copy": [
                                        {
                                          "name": "fileUris",
                                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                        }
                                      ]
                                    }
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
                              ]
                            },
                            {
                              "condition": "[parameters('extensionDiskEncryptionConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-DiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DiskEncryption"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": {
                                    "value": "[parameters('extensionDiskEncryptionConfig').settings]"
                                  },
                                  "enableDefaultTelemetry": {
                                    "value": "[parameters('enableDefaultTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "6607752740889473601"
                                    }
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine that extension is provisioned for"
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to"
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher"
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler"
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings"
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings"
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
                                      }
                                    },
                                    "enableDefaultTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable telemetry via the Customer Usage Attribution ID (GUID)."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[parameters('enableDefaultTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": []
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-07-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the extension"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the extension"
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('backupVaultName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "backupResourceName": {
                                    "value": "[format('{0}/Azure/iaasvmcontainer;iaasvmcontainerv2;{1};{2}/vm;iaasvmcontainerv2;{3};{4}', parameters('backupVaultName'), resourceGroup().name, parameters('name'), resourceGroup().name, parameters('name'))]"
                                  },
                                  "protectedItemType": {
                                    "value": "Microsoft.Compute/virtualMachines"
                                  },
                                  "backupPolicyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "8945936083607713311"
                                    }
                                  },
                                  "parameters": {
                                    "backupResourceName": {
                                      "type": "string"
                                    },
                                    "protectedItemType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFileShareProtectedItem",
                                        "AzureVmWorkloadSAPAseDatabase",
                                        "AzureVmWorkloadSAPHanaDatabase",
                                        "AzureVmWorkloadSQLDatabase",
                                        "DPMProtectedItem",
                                        "GenericProtectedItem",
                                        "MabFileFolderProtectedItem",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "Microsoft.Sql/servers/databases"
                                      ]
                                    },
                                    "backupPolicyId": {
                                      "type": "string"
                                    },
                                    "sourceResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2021-06-01",
                                      "name": "[parameters('backupResourceName')]",
                                      "location": "[resourceGroup().location]",
                                      "properties": {
                                        "protectedItemType": "[parameters('protectedItemType')]",
                                        "policyId": "[parameters('backupPolicyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "virtualMachine_rbac",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.15.31.15270",
                                      "templateHash": "16119009747037808190"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the prinicpals to assign to role to"
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead"
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to"
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Description of role assignment"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                      "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2021-04-01-preview",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the VM."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the VM."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the VM was created in."
                              }
                            },
                            "systemAssignedPrincipalId": {
                              "type": "string",
                              "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity.principalId, '')]",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "addAvdHostsToHostPool",
                        "count": "[length(range(1, parameters('sessionHostsCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('HP-Join-{0}-to-HP-{1}', padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), 3, '0'), parameters('time'))]",
                      "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
                      "resourceGroup": "[format('{0}', parameters('computeObjectsRgName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('sessionHostLocation')]"
                          },
                          "hostPoolToken": {
                            "value": "[parameters('hostPoolToken')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}', parameters('sessionHostNamePrefix'), padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), 3, '0'))]"
                          },
                          "hostPoolName": {
                            "value": "[parameters('hostPoolName')]"
                          },
                          "avdAgentPackageLocation": {
                            "value": "[parameters('agentPackageLocation')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "6278884956904777335"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "avdAgentPackageLocation": {
                              "type": "string"
                            },
                            "hostPoolName": {
                              "type": "string"
                            },
                            "systemData": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "hostPoolToken": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2022-08-01",
                              "name": "[format('{0}/Microsoft.PowerShell.DSC', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.PowerShell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.73",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "modulesUrl": "[parameters('avdAgentPackageLocation')]",
                                  "configurationFunction": "Configuration.ps1\\AddSessionHost",
                                  "properties": {
                                    "hostPoolName": "[parameters('hostPoolName')]",
                                    "registrationInfoToken": "[parameters('hostPoolToken')]",
                                    "aadJoin": false,
                                    "sessionHostConfigurationLastUpdateTime": "[if(contains(parameters('systemData'), 'hostpoolUpdate'), parameters('systemData').sessionHostConfigurationVersion, '')]"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "avdSessionHosts"
                      ]
                    },
                    {
                      "copy": {
                        "name": "configureFsLogixForAvdHosts",
                        "count": "[length(range(1, parameters('sessionHostsCount')))]"
                      },
                      "condition": "[and(parameters('createAvdFslogixDeployment'), not(equals(parameters('identityServiceProvider'), 'AAD')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('Configure-FsLogix-for-{0}-{1}', padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), 3, '0'), parameters('time'))]",
                      "subscriptionId": "[format('{0}', parameters('workloadSubsId'))]",
                      "resourceGroup": "[format('{0}', parameters('computeObjectsRgName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('sessionHostLocation')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}', parameters('sessionHostNamePrefix'), padLeft(add(range(1, parameters('sessionHostsCount'))[copyIndex()], parameters('avdSessionHostCountIndex')), 3, '0'))]"
                          },
                          "file": {
                            "value": "[parameters('fsLogixScript')]"
                          },
                          "FsLogixScriptArguments": {
                            "value": "[parameters('fsLogixScriptArguments')]"
                          },
                          "baseScriptUri": {
                            "value": "[parameters('fslogixScriptUri')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.15.31.15270",
                              "templateHash": "11854626689917223634"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "baseScriptUri": {
                              "type": "string"
                            },
                            "file": {
                              "type": "string"
                            },
                            "FsLogixScriptArguments": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2022-08-01",
                              "name": "[format('{0}/configurefslogix', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {},
                                "protectedSettings": {
                                  "fileUris": "[array(parameters('baseScriptUri'))]",
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('file'), parameters('FsLogixScriptArguments'))]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "avdSessionHosts"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('workloadSubsId')), format('{0}', parameters('computeObjectsRgName'))), 'Microsoft.Resources/deployments', format('AVD-Availability-Set-{0}', parameters('time')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "avdBaselineResourceGroups",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('HostPool-AppGroups-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Networking-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', format('{0}', parameters('avdWorkloadSubsId')), format('{0}', variables('varAvdServiceObjectsRgName'))), 'Microsoft.Resources/deployments', format('Workload-KeyVault-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Storage-Fslogix-Azure-Files-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Managed-ID-RoleAssign-{0}', parameters('time')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Monitoring-{0}', parameters('time')))]"
      ]
    }
  ]
}