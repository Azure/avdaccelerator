{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "3417492894938610823"
    },
    "name": "AVD Accelerator - Baseline Custom Image Deployment",
    "description": "AVD Accelerator - Custom Image Baseline"
  },
  "parameters": {
    "alertsActionGroupCustomName": {
      "type": "string",
      "defaultValue": "ag-aib",
      "metadata": {
        "description": "Custom name for Action Group."
      }
    },
    "alertsDistributionGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Input the email distribution list for alert notifications when AIB builds succeed or fail."
      }
    },
    "applicationNameTag": {
      "type": "string",
      "defaultValue": "Contoso-App",
      "metadata": {
        "description": "Details about the application."
      }
    },
    "automationAccountCustomName": {
      "type": "string",
      "defaultValue": "aa-avd",
      "metadata": {
        "description": "Custom name for the Automation Account."
      }
    },
    "buildSchedule": {
      "type": "string",
      "defaultValue": "Recurring",
      "allowedValues": [
        "OneTime",
        "Recurring"
      ],
      "metadata": {
        "description": "Determine whether to build the image template one time or check daily for a new marketplace image and auto build when found. (Default: Recurring)"
      }
    },
    "costCenterTag": {
      "type": "string",
      "defaultValue": "Contoso-CC",
      "metadata": {
        "description": "Cost center of owner team. (Default: Contoso-CC)"
      }
    },
    "criticalityCustomTag": {
      "type": "string",
      "defaultValue": "Contoso-Critical",
      "metadata": {
        "description": "Tag value for custom criticality value. (Default: Contoso-Critical)"
      }
    },
    "criticalityTag": {
      "type": "string",
      "defaultValue": "Low",
      "allowedValues": [
        "Low",
        "Medium",
        "High",
        "Mission-critical",
        "Custom"
      ],
      "metadata": {
        "description": "criticality of each workload. (Default: Low)"
      }
    },
    "customNaming": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable custom naming for the Azure resources. (Default: false)"
      }
    },
    "dataClassificationTag": {
      "type": "string",
      "defaultValue": "Non-business",
      "allowedValues": [
        "Non-business",
        "Public",
        "General",
        "Confidential",
        "Highly Confidential"
      ],
      "metadata": {
        "description": "Sensitivity of data hosted (Default: Non-business)"
      }
    },
    "departmentTag": {
      "type": "string",
      "defaultValue": "Contoso-AVD",
      "metadata": {
        "description": "Department that owns the deployment, (Dafult: Contoso-AVD)"
      }
    },
    "deploymentLocation": {
      "type": "string",
      "defaultValue": "eastus",
      "allowedValues": [
        "australiaeast",
        "australiasoutheast",
        "brazilsouth",
        "canadacentral",
        "centralindia",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "francecentral",
        "germanywestcentral",
        "japaneast",
        "jioindiawest",
        "koreacentral",
        "northcentralus",
        "northeurope",
        "norwayeast",
        "qatarcentral",
        "southafricanorth",
        "southcentralus",
        "southeastasia",
        "switzerlandnorth",
        "uaenorth",
        "uksouth",
        "ukwest",
        "usgovarizona",
        "usgoviowa",
        "usgovtexas",
        "usgovvirginia",
        "westcentralus",
        "westeurope",
        "westus",
        "westus2",
        "westus3"
      ],
      "metadata": {
        "description": "Location to deploy the resources in this solution, except the image template. (Default: eastus)"
      }
    },
    "enableMonitoringAlerts": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Set to deploy monitoring and alerts for the build automation (Default: false)."
      }
    },
    "enableResourceTags": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Apply tags on resources and resource groups. (Default: false)"
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable usage and telemetry feedback to Microsoft."
      }
    },
    "environmentTag": {
      "type": "string",
      "defaultValue": "Dev",
      "allowedValues": [
        "Prod",
        "Dev",
        "Staging"
      ],
      "metadata": {
        "description": "Deployment environment of the application, workload. (Default: Dev)"
      }
    },
    "existingLogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Existing Azure log analytics workspace resource ID to capture build logs. (Default: )"
      }
    },
    "existingSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Input the name of the subnet for the existing virtual network that the network interfaces on the build virtual machines will join. (Default: \"\")"
      }
    },
    "existingVirtualNetworkResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Input the resource ID for the existing virtual network that the network interfaces on the build virtual machines will join. (Default: \"\")"
      }
    },
    "imageBuildNameTag": {
      "type": "string",
      "defaultValue": "AVD-Image",
      "metadata": {
        "description": "The name of workload for tagging purposes. (Default: AVD-Image)"
      }
    },
    "imageDefinitionCustomName": {
      "type": "string",
      "defaultValue": "avd-win11-21h2",
      "maxLength": 64,
      "metadata": {
        "description": "Custom name for Image Definition. (Default: avd-win11-21h2)"
      }
    },
    "imageDefinitionAcceleratedNetworkSupported": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "The image supports accelerated networking.\r\nAccelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance.\r\nThis high-performance path bypasses the host from the data path, which reduces latency, jitter, and CPU utilization for the\r\nmost demanding network workloads on supported VM types.\r\n"
      }
    },
    "imageDefinitionHibernateSupported": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The image will support hibernation."
      }
    },
    "imageDefinitionSecurityType": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "TrustedLaunch",
        "ConfidentialVM",
        "ConfidentialVMSupported"
      ],
      "metadata": {
        "description": "Choose the Security Type of the Image Definition. (Default: Standard)"
      }
    },
    "imageGalleryCustomName": {
      "type": "string",
      "defaultValue": "gal_avd_use2_001",
      "maxLength": 64,
      "metadata": {
        "description": "Custom name for Image Gallery. (Default: gal_avd_use2_001)"
      }
    },
    "imageTemplateCustomName": {
      "type": "string",
      "defaultValue": "it-avd-win11-22h2",
      "maxLength": 260,
      "metadata": {
        "description": "Custom name for Image Template. (Default: it-avd-win11-21h2)"
      }
    },
    "imageVersionDisasterRecoveryLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Disaster recovery replication location for Image Version. (Default:\"\")"
      }
    },
    "imageVersionPrimaryLocation": {
      "type": "string",
      "metadata": {
        "description": "Primary replication location for Image Version. (Default:)"
      }
    },
    "imageVersionStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS"
      ],
      "metadata": {
        "description": "Determine the Storage Account Type for the Image Version distributed by the Image Template. (Default: Standard_LRS)"
      }
    },
    "logAnalyticsWorkspaceCustomName": {
      "type": "string",
      "defaultValue": "log-avd",
      "metadata": {
        "description": "Custom name for the Log Analytics Workspace."
      }
    },
    "logAnalyticsWorkspaceDataRetention": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 720,
      "metadata": {
        "description": "Set the data retention in the number of days for the Log Analytics Workspace. (Default: 30)"
      }
    },
    "operatingSystemImage": {
      "type": "string",
      "defaultValue": "win11_22h2",
      "allowedValues": [
        "win10_21h2",
        "win10_21h2_office",
        "win10_22h2_g2",
        "win10_22h2_office_g2",
        "win11_21h2",
        "win11_21h2_office",
        "win11_22h2",
        "win11_22h2_office",
        "win11_23h2",
        "win11_23h2_office"
      ],
      "metadata": {
        "description": "AVD OS image source. (Default: win11-22h2)"
      }
    },
    "operationsTeamTag": {
      "type": "string",
      "defaultValue": "workload-admins@Contoso.com",
      "metadata": {
        "description": "Team accountable for day-to-day operations. (Contoso-Ops)"
      }
    },
    "ownerTag": {
      "type": "string",
      "defaultValue": "workload-owner@Contoso.com",
      "metadata": {
        "description": "Organizational owner of the AVD deployment. (Default: Contoso-Owner)"
      }
    },
    "rdpShortPathManagedNetworks": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable RDP Short Path for Managed Networks. (Default: false)"
      }
    },
    "resourceGroupCustomName": {
      "type": "string",
      "defaultValue": "rg-avd-use2-shared-services",
      "maxLength": 90,
      "metadata": {
        "description": "Custom name for Resource Group. (Default: rg-avd-use2-shared-services)"
      }
    },
    "screenCaptureProtection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable Screen Capture Protection. (Default: false)"
      }
    },
    "sharedServicesSubId": {
      "type": "string",
      "metadata": {
        "description": "AVD shared services subscription ID, multiple subscriptions scenario."
      }
    },
    "time": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Do not modify, used to set unique value for resource deployment."
      }
    },
    "useExistingVirtualNetwork": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Set to deploy Azure Image Builder to existing virtual network. (Default: false)"
      }
    },
    "userAssignedManagedIdentityCustomName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 128,
      "metadata": {
        "description": "Custom name for User Assigned Identity. (Default: id-avd)"
      }
    },
    "workloadNameTag": {
      "type": "string",
      "defaultValue": "Contoso-Workload",
      "metadata": {
        "description": "Reference to the size of the VM for your workloads (Default: Contoso-Workload)"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "australiacentral": {
        "acronym": "auc",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiacentral2": {
        "acronym": "auc2",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiaeast": {
        "acronym": "aue",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "australiasoutheast": {
        "acronym": "ause",
        "timeDifference": "+10:00",
        "timeZone": "AUS Eastern Standard Time"
      },
      "brazilsouth": {
        "acronym": "brs",
        "timeDifference": "-3:00",
        "timeZone": "E. South America Standard Time"
      },
      "brazilsoutheast": {
        "acronym": "brse",
        "timeDifference": "-3:00",
        "timeZone": "E. South America Standard Time"
      },
      "canadacentral": {
        "acronym": "cac",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "canadaeast": {
        "acronym": "cae",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "centralindia": {
        "acronym": "inc",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "centralus": {
        "acronym": "usc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "chinaeast": {
        "acronym": "cne",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinaeast2": {
        "acronym": "cne2",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth": {
        "acronym": "cnn",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth2": {
        "acronym": "cnn2",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "chinanorth3": {
        "acronym": "cnn3",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "eastasia": {
        "acronym": "ase",
        "timeDifference": "+8:00",
        "timeZone": "China Standard Time"
      },
      "eastus": {
        "acronym": "use",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "eastus2": {
        "acronym": "use2",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "francecentral": {
        "acronym": "frc",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "francesouth": {
        "acronym": "frs",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "germanynorth": {
        "acronym": "den",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "germanywestcentral": {
        "acronym": "dewc",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "japaneast": {
        "acronym": "jpe",
        "timeDifference": "+9:00",
        "timeZone": "Tokyo Standard Time"
      },
      "japanwest": {
        "acronym": "jpw",
        "timeDifference": "+9:00",
        "timeZone": "Tokyo Standard Time"
      },
      "jioindiacentral": {
        "acronym": "injc",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "jioindiawest": {
        "acronym": "injw",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "koreacentral": {
        "acronym": "krc",
        "timeDifference": "+9:00",
        "timeZone": "Korea Standard Time"
      },
      "koreasouth": {
        "acronym": "krs",
        "timeDifference": "+9:00",
        "timeZone": "Korea Standard Time"
      },
      "northcentralus": {
        "acronym": "usnc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "northeurope": {
        "acronym": "eun",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "norwayeast": {
        "acronym": "noe",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "norwaywest": {
        "acronym": "now",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "italynorth": {
        "acronym": "itn",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "southafricanorth": {
        "acronym": "zan",
        "timeDifference": "+2:00",
        "timeZone": "South Africa Standard Time"
      },
      "southafricawest": {
        "acronym": "zaw",
        "timeDifference": "+2:00",
        "timeZone": "South Africa Standard Time"
      },
      "southcentralus": {
        "acronym": "ussc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "southeastasia": {
        "acronym": "asse",
        "timeDifference": "+8:00",
        "timeZone": "Singapore Standard Time"
      },
      "southindia": {
        "acronym": "ins",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "swedencentral": {
        "acronym": "sec",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "switzerlandnorth": {
        "acronym": "chn",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "switzerlandwest": {
        "acronym": "chw",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "uaecentral": {
        "acronym": "aec",
        "timeDifference": "+3:00",
        "timeZone": "Arabian Standard Time"
      },
      "uaenorth": {
        "acronym": "aen",
        "timeDifference": "+3:00",
        "timeZone": "Arabian Standard Time"
      },
      "uksouth": {
        "acronym": "uks",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "ukwest": {
        "acronym": "ukw",
        "timeDifference": "0:00",
        "timeZone": "GMT Standard Time"
      },
      "usdodcentral": {
        "acronym": "dodc",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "usdodeast": {
        "acronym": "dode",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "usgovarizona": {
        "acronym": "az",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      },
      "usgovtexas": {
        "acronym": "tx",
        "timeDifference": "-6:00",
        "timeZone": "Central Standard Time"
      },
      "usgovvirginia": {
        "acronym": "va",
        "timeDifference": "-5:00",
        "timeZone": "Eastern Standard Time"
      },
      "westcentralus": {
        "acronym": "uswc",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      },
      "westeurope": {
        "acronym": "euw",
        "timeDifference": "+1:00",
        "timeZone": "Central Europe Standard Time"
      },
      "westindia": {
        "acronym": "inw",
        "timeDifference": "+5:30",
        "timeZone": "India Standard Time"
      },
      "westus": {
        "acronym": "usw",
        "timeDifference": "-8:00",
        "timeZone": "Pacific Standard Time"
      },
      "westus2": {
        "acronym": "usw2",
        "timeDifference": "-8:00",
        "timeZone": "Pacific Standard Time"
      },
      "westus3": {
        "acronym": "usw3",
        "timeDifference": "-7:00",
        "timeZone": "Mountain Standard Time"
      }
    },
    "varActionGroupName": "[if(parameters('customNaming'), parameters('alertsActionGroupCustomName'), format('ag-avd-{0}', variables('varNamingStandard')))]",
    "varAlerts": "[if(parameters('enableMonitoringAlerts'), createArray(createObject('name', 'Azure Image Builder - Build Failure', 'description', 'Sends an error alert when a build fails on an image template for Azure Image Builder.', 'severity', 0, 'evaluationFrequency', 'PT5M', 'windowSize', 'PT5M', 'criterias', createObject('allOf', createArray(createObject('query', 'AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image Template build failed\"', 'timeAggregation', 'Count', 'dimensions', createArray(createObject('name', 'ResultDescription', 'operator', 'Include', 'values', createArray('*'))), 'operator', 'GreaterThanOrEqual', 'threshold', 1, 'failingPeriods', createObject('numberOfEvaluationPeriods', 1, 'minFailingPeriodsToAlert', 1))))), createObject('name', 'Azure Image Builder - Build Success', 'description', 'Sends an informational alert when a build succeeds on an image template for Azure Image Builder.', 'severity', 3, 'evaluationFrequency', 'PT5M', 'windowSize', 'PT5M', 'criterias', createObject('allOf', createArray(createObject('query', 'AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image Template build succeeded\"', 'timeAggregation', 'Count', 'dimensions', createArray(createObject('name', 'ResultDescription', 'operator', 'Include', 'values', createArray('*'))), 'operator', 'GreaterThanOrEqual', 'threshold', 1, 'failingPeriods', createObject('numberOfEvaluationPeriods', 1, 'minFailingPeriodsToAlert', 1)))))), createArray())]",
    "varAutomationAccountName": "[if(parameters('customNaming'), parameters('automationAccountCustomName'), format('aa-avd-{0}', variables('varNamingStandard')))]",
    "varAzureCloudName": "[environment().name]",
    "varBaseScriptUri": "https://raw.githubusercontent.com/Azure/avdaccelerator/main/workload/",
    "varCommonResourceTags": "[if(parameters('enableResourceTags'), createObject('ImageBuildName', parameters('imageBuildNameTag'), 'WorkloadName', parameters('workloadNameTag'), 'DataClassification', parameters('dataClassificationTag'), 'Department', parameters('departmentTag'), 'Criticality', if(equals(parameters('criticalityTag'), 'Custom'), parameters('criticalityCustomTag'), parameters('criticalityTag')), 'ApplicationName', parameters('applicationNameTag'), 'OpsTeam', parameters('operationsTeamTag'), 'Owner', parameters('ownerTag'), 'CostCenter', parameters('costCenterTag'), 'Environment', parameters('environmentTag')), createObject())]",
    "varCustomizationSteps": "[union(variables('varScriptCustomizers'), variables('varRemainingCustomizers'))]",
    "varImageDefinitionName": "[if(parameters('customNaming'), parameters('imageDefinitionCustomName'), format('avd-{0}', parameters('operatingSystemImage')))]",
    "varImageGalleryName": "[if(parameters('customNaming'), parameters('imageGalleryCustomName'), format('gal_avd_{0}', variables('varNamingStandard')))]",
    "varImageReplicationRegions": "[if(empty(parameters('imageVersionDisasterRecoveryLocation')), createArray(parameters('imageVersionPrimaryLocation')), createArray(parameters('imageVersionPrimaryLocation'), parameters('imageVersionDisasterRecoveryLocation')))]",
    "varImageTemplateBuildAutomationName": "Image Template Build Automation",
    "varImageTemplateBuildAutomation": "[if(equals(variables('varAzureCloudName'), 'AzureCloud'), createArray(createObject('resourceGroup', variables('varResourceGroupName'), 'name', variables('varImageTemplateBuildAutomationName'), 'description', 'Allow Image Template build automation using a Managed Identity on an Automation Account.', 'actions', createArray('Microsoft.VirtualMachineImages/imageTemplates/run/action', 'Microsoft.VirtualMachineImages/imageTemplates/read', 'Microsoft.Compute/locations/publishers/artifacttypes/offers/skus/versions/read', 'Microsoft.Compute/locations/publishers/artifacttypes/offers/skus/read', 'Microsoft.Compute/locations/publishers/artifacttypes/offers/read', 'Microsoft.Compute/locations/publishers/read'))), createArray())]",
    "varImageTemplateContributorRoleName": "Image Template Contributor",
    "varImageTemplateContributorRole": [
      {
        "resourceGroup": "[variables('varResourceGroupName')]",
        "name": "[variables('varImageTemplateContributorRoleName')]",
        "description": "Allow the creation and management of images",
        "actions": [
          "Microsoft.Compute/galleries/read",
          "Microsoft.Compute/galleries/images/read",
          "Microsoft.Compute/galleries/images/versions/read",
          "Microsoft.Compute/galleries/images/versions/write",
          "Microsoft.Compute/images/read",
          "Microsoft.Compute/images/write",
          "Microsoft.Compute/images/delete"
        ]
      }
    ],
    "varImageTemplateName": "[if(parameters('customNaming'), parameters('imageTemplateCustomName'), format('it-avd-{0}', parameters('operatingSystemImage')))]",
    "varLocationAcronym": "[variables('varLocations')[variables('varLocation')].acronym]",
    "varLocation": "[toLower(replace(parameters('deploymentLocation'), ' ', ''))]",
    "varLocations": "[variables('$fxv#0')]",
    "varLogAnalyticsWorkspaceName": "[if(parameters('customNaming'), parameters('logAnalyticsWorkspaceCustomName'), format('log-avd-{0}', variables('varNamingStandard')))]",
    "varModules": [
      {
        "name": "Az.Accounts",
        "uri": "https://www.powershellgallery.com/api/v2/package",
        "version": "2.12.1"
      },
      {
        "name": "Az.ImageBuilder",
        "uri": "https://www.powershellgallery.com/api/v2/package",
        "version": "0.3.0"
      }
    ],
    "varNamingStandard": "[format('{0}', variables('varLocationAcronym'))]",
    "varOperatingSystemImageDefinitions": {
      "win10_21h2": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "windows-10",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win10-21h2-avd",
        "hyperVGeneration": "V1",
        "version": "latest"
      },
      "win10_21h2_office": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "office-365",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win10-21h2-avd-m365",
        "hyperVGeneration": "V1",
        "version": "latest"
      },
      "win10_22h2_g2": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "windows-10",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win10-22h2-avd-g2",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win10_22h2_office_g2": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "office-365",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win10-22h2-avd-m365-g2",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win11_21h2": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "windows-11",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win11-21h2-avd",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win11_21h2_office": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "office-365",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win11-21h2-avd-m365",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win11_22h2": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "windows-11",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win11-22h2-avd",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win11_22h2_office": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "office-365",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win11-22h2-avd-m365",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win11_23h2": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "windows-11",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win11-23h2-avd",
        "hyperVGeneration": "V2",
        "version": "latest"
      },
      "win11_23h2_office": {
        "osType": "Windows",
        "osState": "Generalized",
        "offer": "office-365",
        "publisher": "MicrosoftWindowsDesktop",
        "sku": "win11-23h2-avd-m365",
        "hyperVGeneration": "V2",
        "version": "latest"
      }
    },
    "varRdpShortPathCustomizer": "[if(parameters('rdpShortPathManagedNetworks'), createArray(createObject('type', 'PowerShell', 'name', 'rdpShortPath', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}scripts/Set-RdpShortpath.ps1', variables('varBaseScriptUri')))), createArray())]",
    "varRemainingCustomizers": [
      {
        "type": "WindowsRestart",
        "restartCheckCommand": "Write-Host \"Restarting post script customizers\"",
        "restarttimeout": "10m"
      },
      {
        "type": "WindowsUpdate",
        "searchCriteria": "IsInstalled=0",
        "filters": [
          "exclude:$_.Title -like '*Preview*'",
          "include:$true"
        ],
        "updateLimit": 40
      },
      {
        "type": "PowerShell",
        "name": "Sleep for 5 minutes",
        "runElevated": true,
        "runAsSystem": true,
        "inline": [
          "Write-Host \"Sleep for 5 min\"",
          "Start-Sleep -Seconds 300"
        ]
      },
      {
        "type": "WindowsRestart",
        "restartCheckCommand": "Write-Host \"restarting post Windows updates\"",
        "restarttimeout": "10m"
      },
      {
        "type": "PowerShell",
        "name": "Sleep for a min",
        "runElevated": true,
        "runAsSystem": true,
        "inline": [
          "Write-Host \"Sleep for a min\"",
          "Start-Sleep -Seconds 60"
        ]
      },
      {
        "type": "WindowsRestart",
        "restarttimeout": "10m"
      }
    ],
    "varResourceGroupName": "[if(parameters('customNaming'), parameters('resourceGroupCustomName'), format('rg-avd-{0}-shared-services', variables('varNamingStandard')))]",
    "varRoles": "[union(variables('varVirtualNetworkJoinRole'), variables('varImageTemplateBuildAutomation'), variables('varImageTemplateContributorRole'))]",
    "varScreenCaptureProtectionCustomizer": "[if(parameters('screenCaptureProtection'), createArray(createObject('type', 'PowerShell', 'name', 'screenCaptureProtection', 'runElevated', true(), 'runAsSystem', true(), 'scriptUri', format('{0}scripts/Set-ScreenCaptureProtection.ps1', variables('varBaseScriptUri')))), createArray())]",
    "varScriptCustomizers": "[union(variables('varRdpShortPathCustomizer'), variables('varScreenCaptureProtectionCustomizer'), variables('varVdotCustomizer'))]",
    "varTelemetryId": "[format('pid-b04f18f1-9100-4b92-8e41-71f0d73e3755-{0}', parameters('deploymentLocation'))]",
    "varTimeZone": "[variables('varLocations')[variables('varLocation')].timeZone]",
    "varUserAssignedManagedIdentityName": "[if(parameters('customNaming'), parameters('userAssignedManagedIdentityCustomName'), format('id-aib-{0}', variables('varNamingStandard')))]",
    "varVdotCustomizer": [
      {
        "type": "PowerShell",
        "name": "VirtualDesktopOptimizationTool",
        "runElevated": true,
        "runAsSystem": true,
        "scriptUri": "[format('{0}scripts/Set-VirtualDesktopOptimizations.ps1', variables('varBaseScriptUri'))]"
      }
    ],
    "varVirtualNetworkJoinRoleName": "Virtual Network Join",
    "varVirtualNetworkJoinRole": "[if(parameters('useExistingVirtualNetwork'), createArray(createObject('resourceGroup', split(parameters('existingVirtualNetworkResourceId'), '/')[4], 'name', variables('varVirtualNetworkJoinRoleName'), 'description', 'Allow resources to join a subnet', 'actions', createArray('Microsoft.Network/virtualNetworks/read', 'Microsoft.Network/virtualNetworks/subnets/read', 'Microsoft.Network/virtualNetworks/subnets/join/action'))), createArray())]",
    "varVmSize": "Standard_D4s_v3"
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[variables('varTelemetryId')]",
      "location": "[parameters('deploymentLocation')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RG-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varResourceGroupName')]"
          },
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "17650584119925823992"
            },
            "name": "Resource Groups",
            "description": "This module deploys a Resource Group.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Resource Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the storage account resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "resourceGroup": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            "resourceGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "name": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "3101694150158706009"
                    }
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    }
                  },
                  "resources": {
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            },
            "resourceGroup_roleAssignments": {
              "condition": "[not(empty(coalesce(parameters('roleAssignments'), createArray())))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-RoleAssignments', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('name')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "8717205010771951354"
                    }
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Quota Request Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                      "Template Spec Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c9b6475-caf0-4164-b5a1-2142a7116f4b')]",
                      "Template Spec Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "resourceGroup_roleAssignments": {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(resourceGroup().id, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the resource group."
              },
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "roleDefinitions",
        "count": "[length(range(0, length(variables('varRoles'))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Role-Definition-{0}-{1}', range(0, length(variables('varRoles')))[copyIndex()], parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subscriptionId": {
            "value": "[parameters('sharedServicesSubId')]"
          },
          "description": {
            "value": "[variables('varRoles')[range(0, length(variables('varRoles')))[copyIndex()]].description]"
          },
          "roleName": {
            "value": "[variables('varRoles')[range(0, length(variables('varRoles')))[copyIndex()]].name]"
          },
          "actions": {
            "value": "[variables('varRoles')[range(0, length(variables('varRoles')))[copyIndex()]].actions]"
          },
          "assignableScopes": {
            "value": [
              "[format('/subscriptions/{0}', parameters('sharedServicesSubId'))]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "18253188146313347019"
            }
          },
          "parameters": {
            "roleName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the custom RBAC role to be created."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Description of the custom RBAC role to be created."
              }
            },
            "actions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of allowed actions."
              }
            },
            "notActions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of denied actions."
              }
            },
            "dataActions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of allowed data actions. This is not supported if the assignableScopes contains Management Group Scopes."
              }
            },
            "notDataActions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of denied data actions. This is not supported if the assignableScopes contains Management Group Scopes."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. The subscription ID where the Role Definition and Target Scope will be applied to. If not provided, will use the current scope for deployment."
              }
            },
            "assignableScopes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Role definition assignable scopes. If not provided, will use the current scope provided."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('roleName'), parameters('subscriptionId'))]",
              "properties": {
                "roleName": "[parameters('roleName')]",
                "description": "[parameters('description')]",
                "type": "customRole",
                "permissions": [
                  {
                    "actions": "[parameters('actions')]",
                    "notActions": "[parameters('notActions')]",
                    "dataActions": "[parameters('dataActions')]",
                    "notDataActions": "[parameters('notDataActions')]"
                  }
                ],
                "assignableScopes": "[if(not(empty(parameters('assignableScopes'))), parameters('assignableScopes'), array(subscription().id))]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Definition."
              },
              "value": "[guid(parameters('roleName'), parameters('subscriptionId'))]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Definition applies to."
              },
              "value": "[subscription().id]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Definition."
              },
              "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(parameters('roleName'), parameters('subscriptionId')))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('User-Assigned-Managed-Identity-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varUserAssignedManagedIdentityName')]"
          },
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "14028591063601562300"
            },
            "name": "User Assigned Identities",
            "description": "This module deploys a User Assigned Identity.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "federatedIdentityCredentialsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the federated identity credential."
                    }
                  },
                  "audiences": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. The list of audiences that can appear in the issued token."
                    }
                  },
                  "issuer": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The URL of the issuer to be trusted."
                    }
                  },
                  "subject": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The identifier of the external identity."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the User Assigned Identity."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "federatedIdentityCredentials": {
              "$ref": "#/definitions/federatedIdentityCredentialsType",
              "metadata": {
                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "userAssignedIdentity": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "userAssignedIdentity_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            },
            "userAssignedIdentity_roleAssignments": {
              "copy": {
                "name": "userAssignedIdentity_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            },
            "userAssignedIdentity_federatedIdentityCredentials": {
              "copy": {
                "name": "userAssignedIdentity_federatedIdentityCredentials",
                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('name')]"
                  },
                  "audiences": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                  },
                  "issuer": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                  },
                  "subject": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "663270811232806628"
                    },
                    "name": "User Assigned Identity Federated Identity Credential",
                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "userAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret."
                      }
                    },
                    "audiences": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                      }
                    },
                    "issuer": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                      }
                    },
                    "subject": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                      "properties": {
                        "audiences": "[parameters('audiences')]",
                        "issuer": "[parameters('issuer')]",
                        "subject": "[parameters('subject')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the federated identity credential."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the federated identity credential."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the federated identity credential was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the user assigned identity."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user assigned identity."
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID (object ID) of the user assigned identity."
              },
              "value": "[reference('userAssignedIdentity').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "The client ID (application ID) of the user assigned identity."
              },
              "value": "[reference('userAssignedIdentity').clientId]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the user assigned identity was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('RG-{0}', parameters('time')))]"
      ]
    },
    {
      "copy": {
        "name": "roleAssignments",
        "count": "[length(range(0, length(variables('varRoles'))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Role-Assignment-{0}-{1}', range(0, length(variables('varRoles')))[copyIndex()], parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varRoles')[range(0, length(variables('varRoles')))[copyIndex()]].resourceGroup]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "roleDefinitionIdOrName": {
            "value": "[reference(subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('Role-Definition-{0}-{1}', range(0, length(variables('varRoles')))[range(0, length(variables('varRoles')))[copyIndex()]], parameters('time'))), '2022-09-01').outputs.resourceId.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time'))), '2022-09-01').outputs.principalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "14591941439222880522"
            },
            "name": "Role Assignments (Resource Group scope)",
            "description": "This module deploys a Role Assignment at a Resource Group scope.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "roleDefinitionIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            },
            "delegatedManagedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the delegated managed identity resource."
              }
            },
            "condition": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
              }
            },
            "conditionVersion": {
              "type": "string",
              "defaultValue": "2.0",
              "allowedValues": [
                "2.0"
              ],
              "metadata": {
                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
              }
            },
            "principalType": {
              "type": "string",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            },
            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the role assignment was applied at."
              },
              "value": "[resourceGroup().name]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Assignment applies to."
              },
              "value": "[resourceGroup().id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('Role-Definition-{0}-{1}', range(0, length(variables('varRoles')))[range(0, length(variables('varRoles')))[copyIndex()]], parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[not(equals(variables('varAzureCloudName'), 'AzureCloud'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Role-Assignment-MAG-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "roleDefinitionIdOrName": {
            "value": "Contributor"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time'))), '2022-09-01').outputs.principalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "14591941439222880522"
            },
            "name": "Role Assignments (Resource Group scope)",
            "description": "This module deploys a Role Assignment at a Resource Group scope.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "roleDefinitionIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            },
            "delegatedManagedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the delegated managed identity resource."
              }
            },
            "condition": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
              }
            },
            "conditionVersion": {
              "type": "string",
              "defaultValue": "2.0",
              "allowedValues": [
                "2.0"
              ],
              "metadata": {
                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
              }
            },
            "principalType": {
              "type": "string",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            },
            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                "principalId": "[parameters('principalId')]",
                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the role assignment was applied at."
              },
              "value": "[resourceGroup().name]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Assignment applies to."
              },
              "value": "[resourceGroup().id]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Compute-Gallery-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varImageGalleryName')]"
          },
          "location": {
            "value": "[parameters('imageVersionPrimaryLocation')]"
          },
          "description": {
            "value": "Azure Virtual Desktops Images"
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "11544967161952324858"
            },
            "name": "Azure Compute Galleries",
            "description": "This module deploys an Azure Compute Gallery (formerly known as Shared Image Gallery).",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Required. Name of the Azure Compute Gallery."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Description of the Azure Shared Image Gallery."
              }
            },
            "applications": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Applications to create."
              }
            },
            "images": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Images to create."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "sharingProfile": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Profile for gallery sharing to subscription or tenant."
              }
            },
            "softDeletePolicy": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Soft deletion policy of the gallery."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.compute-gallery.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "gallery": {
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-03-03",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "description": "[parameters('description')]",
                "sharingProfile": "[parameters('sharingProfile')]",
                "softDeletePolicy": "[parameters('softDeletePolicy')]"
              }
            },
            "gallery_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "gallery"
              ]
            },
            "gallery_roleAssignments": {
              "copy": {
                "name": "gallery_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Compute/galleries', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "gallery"
              ]
            },
            "galleries_applications": {
              "copy": {
                "name": "galleries_applications",
                "count": "[length(coalesce(parameters('applications'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Gallery-Application-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('applications'), createArray())[copyIndex()].name]"
                  },
                  "galleryName": {
                    "value": "[parameters('name')]"
                  },
                  "supportedOSType": {
                    "value": "[coalesce(parameters('applications'), createArray())[copyIndex()].supportedOSType]"
                  },
                  "description": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'description')]"
                  },
                  "eula": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'eula')]"
                  },
                  "privacyStatementUri": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'privacyStatementUri')]"
                  },
                  "releaseNoteUri": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'releaseNoteUri')]"
                  },
                  "endOfLifeDate": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'endOfLifeDate')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "customActions": {
                    "value": "[tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'customActions')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('applications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "1567876913625134678"
                    },
                    "name": "Compute Galleries Applications",
                    "description": "This module deploys an Azure Compute Gallery Application.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the application definition."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "galleryName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Compute Gallery. Required if the template is used in a standalone deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of this gallery Application Definition resource. This property is updatable."
                      }
                    },
                    "eula": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Eula agreement for the gallery Application Definition. Has to be a valid URL."
                      }
                    },
                    "privacyStatementUri": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The privacy statement uri. Has to be a valid URL."
                      }
                    },
                    "releaseNoteUri": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The release note uri. Has to be a valid URL."
                      }
                    },
                    "supportedOSType": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. This property allows you to specify the supported type of the OS that application is built for."
                      }
                    },
                    "endOfLifeDate": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags for all resources."
                      }
                    },
                    "customActions": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "gallery": {
                      "existing": true,
                      "type": "Microsoft.Compute/galleries",
                      "apiVersion": "2022-03-03",
                      "name": "[parameters('galleryName')]"
                    },
                    "application": {
                      "type": "Microsoft.Compute/galleries/applications",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customActions": "[parameters('customActions')]",
                        "description": "[parameters('description')]",
                        "endOfLifeDate": "[parameters('endOfLifeDate')]",
                        "eula": "[parameters('eula')]",
                        "privacyStatementUri": "[parameters('privacyStatementUri')]",
                        "releaseNoteUri": "[parameters('releaseNoteUri')]",
                        "supportedOSType": "[parameters('supportedOSType')]"
                      },
                      "dependsOn": [
                        "gallery"
                      ]
                    },
                    "application_roleAssignments": {
                      "copy": {
                        "name": "application_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/galleries/{0}/applications/{1}', parameters('galleryName'), parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Compute/galleries/applications', parameters('galleryName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "application"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the image was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the image."
                      },
                      "value": "[resourceId('Microsoft.Compute/galleries/applications', parameters('galleryName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the image."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('application', '2022-03-03', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "gallery"
              ]
            },
            "galleries_images": {
              "copy": {
                "name": "galleries_images",
                "count": "[length(coalesce(parameters('images'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Gallery-Image-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('images'), createArray())[copyIndex()].name]"
                  },
                  "galleryName": {
                    "value": "[parameters('name')]"
                  },
                  "osType": {
                    "value": "[coalesce(parameters('images'), createArray())[copyIndex()].osType]"
                  },
                  "osState": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'osState')]"
                  },
                  "publisher": {
                    "value": "[coalesce(parameters('images'), createArray())[copyIndex()].publisher]"
                  },
                  "offer": {
                    "value": "[coalesce(parameters('images'), createArray())[copyIndex()].offer]"
                  },
                  "sku": {
                    "value": "[coalesce(parameters('images'), createArray())[copyIndex()].sku]"
                  },
                  "minRecommendedvCPUs": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'minRecommendedvCPUs')]"
                  },
                  "maxRecommendedvCPUs": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'maxRecommendedvCPUs')]"
                  },
                  "minRecommendedMemory": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'minRecommendedMemory')]"
                  },
                  "maxRecommendedMemory": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'maxRecommendedMemory')]"
                  },
                  "hyperVGeneration": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'hyperVGeneration')]"
                  },
                  "securityType": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'securityType')]"
                  },
                  "isAcceleratedNetworkSupported": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'isAcceleratedNetworkSupported')]"
                  },
                  "description": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'description')]"
                  },
                  "eula": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'eula')]"
                  },
                  "privacyStatementUri": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'privacyStatementUri')]"
                  },
                  "releaseNoteUri": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'releaseNoteUri')]"
                  },
                  "productName": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'productName')]"
                  },
                  "planName": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'planName')]"
                  },
                  "planPublisherName": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'planPublisherName')]"
                  },
                  "endOfLife": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'endOfLife')]"
                  },
                  "excludedDiskTypes": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'excludedDiskTypes')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('images'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2822824031552864722"
                    },
                    "name": "Compute Galleries Image Definitions",
                    "description": "This module deploys an Azure Compute Gallery Image Definition.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the image definition."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "galleryName": {
                      "type": "string",
                      "minLength": 1,
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Shared Image Gallery. Required if the template is used in a standalone deployment."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. OS type of the image to be created."
                      }
                    },
                    "osState": {
                      "type": "string",
                      "defaultValue": "Generalized",
                      "allowedValues": [
                        "Generalized",
                        "Specialized"
                      ],
                      "metadata": {
                        "description": "Optional. This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the gallery Image Definition publisher."
                      }
                    },
                    "offer": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the gallery Image Definition offer."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the gallery Image Definition SKU."
                      }
                    },
                    "minRecommendedvCPUs": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "maxValue": 128,
                      "metadata": {
                        "description": "Optional. The minimum number of the CPU cores recommended for this image."
                      }
                    },
                    "maxRecommendedvCPUs": {
                      "type": "int",
                      "defaultValue": 4,
                      "minValue": 1,
                      "maxValue": 128,
                      "metadata": {
                        "description": "Optional. The maximum number of the CPU cores recommended for this image."
                      }
                    },
                    "minRecommendedMemory": {
                      "type": "int",
                      "defaultValue": 4,
                      "minValue": 1,
                      "maxValue": 4000,
                      "metadata": {
                        "description": "Optional. The minimum amount of RAM in GB recommended for this image."
                      }
                    },
                    "maxRecommendedMemory": {
                      "type": "int",
                      "defaultValue": 16,
                      "minValue": 1,
                      "maxValue": 4000,
                      "metadata": {
                        "description": "Optional. The maximum amount of RAM in GB recommended for this image."
                      }
                    },
                    "hyperVGeneration": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "V1",
                        "V2"
                      ],
                      "metadata": {
                        "description": "Optional. The hypervisor generation of the Virtual Machine.\r\n- If this value is not specified, then it is determined by the securityType parameter.\r\n- If the securityType parameter is specified, then the value of hyperVGeneration will be V2, else V1.\r\n"
                      }
                    },
                    "securityType": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard",
                        "TrustedLaunch",
                        "ConfidentialVM",
                        "ConfidentialVMSupported"
                      ],
                      "metadata": {
                        "description": "Optional. The security type of the image. Requires a hyperVGeneration V2."
                      }
                    },
                    "isHibernateSupported": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifiy if the image supports hibernation."
                      }
                    },
                    "isAcceleratedNetworkSupported": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specify if the image supports accelerated networking.\r\nAccelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance.\r\nThis high-performance path bypasses the host from the data path, which reduces latency, jitter, and CPU utilization for the most demanding network workloads on supported VM types.\r\n"
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of this gallery Image Definition resource. This property is updatable."
                      }
                    },
                    "eula": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Eula agreement for the gallery Image Definition. Has to be a valid URL."
                      }
                    },
                    "privacyStatementUri": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The privacy statement uri. Has to be a valid URL."
                      }
                    },
                    "releaseNoteUri": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The release note uri. Has to be a valid URL."
                      }
                    },
                    "productName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The product ID."
                      }
                    },
                    "planName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The plan ID."
                      }
                    },
                    "planPublisherName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The publisher ID."
                      }
                    },
                    "endOfLife": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
                      }
                    },
                    "excludedDiskTypes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of the excluded disk types (e.g., Standard_LRS)."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags for all resources."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "gallery": {
                      "existing": true,
                      "type": "Microsoft.Compute/galleries",
                      "apiVersion": "2022-03-03",
                      "name": "[parameters('galleryName')]"
                    },
                    "image": {
                      "type": "Microsoft.Compute/galleries/images",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "osType": "[parameters('osType')]",
                        "osState": "[parameters('osState')]",
                        "identifier": {
                          "publisher": "[parameters('publisher')]",
                          "offer": "[parameters('offer')]",
                          "sku": "[parameters('sku')]"
                        },
                        "recommended": {
                          "vCPUs": {
                            "min": "[parameters('minRecommendedvCPUs')]",
                            "max": "[parameters('maxRecommendedvCPUs')]"
                          },
                          "memory": {
                            "min": "[parameters('minRecommendedMemory')]",
                            "max": "[parameters('maxRecommendedMemory')]"
                          }
                        },
                        "hyperVGeneration": "[coalesce(parameters('hyperVGeneration'), if(not(empty(parameters('securityType'))), 'V2', 'V1'))]",
                        "features": "[union(createArray(createObject('name', 'IsAcceleratedNetworkSupported', 'value', format('{0}', parameters('isAcceleratedNetworkSupported'))), createObject('name', 'IsHibernateSupported', 'value', format('{0}', parameters('isHibernateSupported')))), if(not(equals(parameters('securityType'), 'Standard')), createArray(createObject('name', 'SecurityType', 'value', parameters('securityType'))), createArray()))]",
                        "description": "[parameters('description')]",
                        "eula": "[parameters('eula')]",
                        "privacyStatementUri": "[parameters('privacyStatementUri')]",
                        "releaseNoteUri": "[parameters('releaseNoteUri')]",
                        "purchasePlan": {
                          "product": "[parameters('productName')]",
                          "name": "[parameters('planName')]",
                          "publisher": "[parameters('planPublisherName')]"
                        },
                        "endOfLifeDate": "[parameters('endOfLife')]",
                        "disallowed": {
                          "diskTypes": "[parameters('excludedDiskTypes')]"
                        }
                      },
                      "dependsOn": [
                        "gallery"
                      ]
                    },
                    "image_roleAssignments": {
                      "copy": {
                        "name": "image_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/galleries/{0}/images/{1}', parameters('galleryName'), parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "image"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the image was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the image."
                      },
                      "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the image."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('image', '2022-03-03', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "gallery"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed image gallery."
              },
              "value": "[resourceId('Microsoft.Compute/galleries', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed image gallery."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed image gallery."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('gallery', '2022-03-03', 'full').location]"
            },
            "imageResourceIds": {
              "type": "array",
              "metadata": {
                "description": "The resource ids of the deployed images."
              },
              "copy": {
                "count": "[length(range(0, length(coalesce(parameters('images'), createArray()))))]",
                "input": "[reference(format('galleries_images[{0}]', range(0, length(coalesce(parameters('images'), createArray())))[copyIndex()])).outputs.resourceId.value]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('RG-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Image-Definition-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "galleryName": {
            "value": "[variables('varImageGalleryName')]"
          },
          "name": {
            "value": "[variables('varImageDefinitionName')]"
          },
          "osState": {
            "value": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].osState]"
          },
          "osType": {
            "value": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].osType]"
          },
          "publisher": {
            "value": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].publisher]"
          },
          "offer": {
            "value": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].offer]"
          },
          "sku": {
            "value": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].sku]"
          },
          "location": {
            "value": "[parameters('imageVersionPrimaryLocation')]"
          },
          "hyperVGeneration": {
            "value": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].hyperVGeneration]"
          },
          "isAcceleratedNetworkSupported": {
            "value": "[parameters('imageDefinitionAcceleratedNetworkSupported')]"
          },
          "isHibernateSupported": {
            "value": "[parameters('imageDefinitionHibernateSupported')]"
          },
          "securityType": {
            "value": "[parameters('imageDefinitionSecurityType')]"
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "2822824031552864722"
            },
            "name": "Compute Galleries Image Definitions",
            "description": "This module deploys an Azure Compute Gallery Image Definition.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the image definition."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "galleryName": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Conditional. The name of the parent Azure Shared Image Gallery. Required if the template is used in a standalone deployment."
              }
            },
            "osType": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. OS type of the image to be created."
              }
            },
            "osState": {
              "type": "string",
              "defaultValue": "Generalized",
              "allowedValues": [
                "Generalized",
                "Specialized"
              ],
              "metadata": {
                "description": "Optional. This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the gallery Image Definition publisher."
              }
            },
            "offer": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the gallery Image Definition offer."
              }
            },
            "sku": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the gallery Image Definition SKU."
              }
            },
            "minRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The minimum number of the CPU cores recommended for this image."
              }
            },
            "maxRecommendedvCPUs": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 128,
              "metadata": {
                "description": "Optional. The maximum number of the CPU cores recommended for this image."
              }
            },
            "minRecommendedMemory": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The minimum amount of RAM in GB recommended for this image."
              }
            },
            "maxRecommendedMemory": {
              "type": "int",
              "defaultValue": 16,
              "minValue": 1,
              "maxValue": 4000,
              "metadata": {
                "description": "Optional. The maximum amount of RAM in GB recommended for this image."
              }
            },
            "hyperVGeneration": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "V1",
                "V2"
              ],
              "metadata": {
                "description": "Optional. The hypervisor generation of the Virtual Machine.\r\n- If this value is not specified, then it is determined by the securityType parameter.\r\n- If the securityType parameter is specified, then the value of hyperVGeneration will be V2, else V1.\r\n"
              }
            },
            "securityType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "TrustedLaunch",
                "ConfidentialVM",
                "ConfidentialVMSupported"
              ],
              "metadata": {
                "description": "Optional. The security type of the image. Requires a hyperVGeneration V2."
              }
            },
            "isHibernateSupported": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifiy if the image supports hibernation."
              }
            },
            "isAcceleratedNetworkSupported": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specify if the image supports accelerated networking.\r\nAccelerated networking enables single root I/O virtualization (SR-IOV) to a VM, greatly improving its networking performance.\r\nThis high-performance path bypasses the host from the data path, which reduces latency, jitter, and CPU utilization for the most demanding network workloads on supported VM types.\r\n"
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of this gallery Image Definition resource. This property is updatable."
              }
            },
            "eula": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Eula agreement for the gallery Image Definition. Has to be a valid URL."
              }
            },
            "privacyStatementUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The privacy statement uri. Has to be a valid URL."
              }
            },
            "releaseNoteUri": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The release note uri. Has to be a valid URL."
              }
            },
            "productName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The product ID."
              }
            },
            "planName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The plan ID."
              }
            },
            "planPublisherName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The publisher ID."
              }
            },
            "endOfLife": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end of life date of the gallery Image Definition. This property can be used for decommissioning purposes. This property is updatable. Allowed format: 2020-01-10T23:00:00.000Z."
              }
            },
            "excludedDiskTypes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of the excluded disk types (e.g., Standard_LRS)."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags for all resources."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Compute Gallery Sharing Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1ef6a3be-d0ac-425d-8c01-acb62866290b')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "gallery": {
              "existing": true,
              "type": "Microsoft.Compute/galleries",
              "apiVersion": "2022-03-03",
              "name": "[parameters('galleryName')]"
            },
            "image": {
              "type": "Microsoft.Compute/galleries/images",
              "apiVersion": "2022-03-03",
              "name": "[format('{0}/{1}', parameters('galleryName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "osType": "[parameters('osType')]",
                "osState": "[parameters('osState')]",
                "identifier": {
                  "publisher": "[parameters('publisher')]",
                  "offer": "[parameters('offer')]",
                  "sku": "[parameters('sku')]"
                },
                "recommended": {
                  "vCPUs": {
                    "min": "[parameters('minRecommendedvCPUs')]",
                    "max": "[parameters('maxRecommendedvCPUs')]"
                  },
                  "memory": {
                    "min": "[parameters('minRecommendedMemory')]",
                    "max": "[parameters('maxRecommendedMemory')]"
                  }
                },
                "hyperVGeneration": "[coalesce(parameters('hyperVGeneration'), if(not(empty(parameters('securityType'))), 'V2', 'V1'))]",
                "features": "[union(createArray(createObject('name', 'IsAcceleratedNetworkSupported', 'value', format('{0}', parameters('isAcceleratedNetworkSupported'))), createObject('name', 'IsHibernateSupported', 'value', format('{0}', parameters('isHibernateSupported')))), if(not(equals(parameters('securityType'), 'Standard')), createArray(createObject('name', 'SecurityType', 'value', parameters('securityType'))), createArray()))]",
                "description": "[parameters('description')]",
                "eula": "[parameters('eula')]",
                "privacyStatementUri": "[parameters('privacyStatementUri')]",
                "releaseNoteUri": "[parameters('releaseNoteUri')]",
                "purchasePlan": {
                  "product": "[parameters('productName')]",
                  "name": "[parameters('planName')]",
                  "publisher": "[parameters('planPublisherName')]"
                },
                "endOfLifeDate": "[parameters('endOfLife')]",
                "disallowed": {
                  "diskTypes": "[parameters('excludedDiskTypes')]"
                }
              },
              "dependsOn": [
                "gallery"
              ]
            },
            "image_roleAssignments": {
              "copy": {
                "name": "image_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Compute/galleries/{0}/images/{1}', parameters('galleryName'), parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "image"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image."
              },
              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('galleryName'), parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the image."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('image', '2022-03-03', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('RG-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Compute-Gallery-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Image-Template-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varImageTemplateName')]"
          },
          "subnetResourceId": "[if(and(not(empty(parameters('existingVirtualNetworkResourceId'))), not(empty(parameters('existingSubnetName')))), createObject('value', format('{0}/subnets/{1}', parameters('existingVirtualNetworkResourceId'), parameters('existingSubnetName'))), createObject('value', ''))]",
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value]"
              ]
            }
          },
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "distributions": {
            "value": [
              {
                "type": "SharedImage",
                "replicationRegions": "[variables('varImageReplicationRegions')]",
                "storageAccountType": "[parameters('imageVersionStorageAccountType')]",
                "sharedImageGalleryImageDefinitionResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Definition-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value]"
              }
            ]
          },
          "vmSize": {
            "value": "[variables('varVmSize')]"
          },
          "customizationSteps": {
            "value": "[variables('varCustomizationSteps')]"
          },
          "imageSource": {
            "value": {
              "type": "PlatformImage",
              "publisher": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].publisher]",
              "offer": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].offer]",
              "sku": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].sku]",
              "version": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].version]"
            }
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "10848140449852569128"
            },
            "name": "Virtual Machine Image Templates",
            "description": "This module deploys a Virtual Machine Image Template that can be consumed by Azure Image Builder (AIB).",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              }
            },
            "distributionType": {
              "type": "object",
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "SharedImage": {
                    "$ref": "#/definitions/sharedImageDistributionType"
                  },
                  "ManagedImage": {
                    "$ref": "#/definitions/managedImageDistributionType"
                  },
                  "VHD": {
                    "$ref": "#/definitions/unManagedDistributionType"
                  }
                }
              }
            },
            "sharedImageDistributionType": {
              "type": "object",
              "properties": {
                "runOutputName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name to be used for the associated RunOutput. If not provided, a name will be calculated."
                  }
                },
                "artifactTags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags that will be applied to the artifact once it has been created/updated by the distributor. If not provided will set tags based on the provided image source."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "SharedImage"
                  ],
                  "metadata": {
                    "description": "Required. The type of distribution."
                  }
                },
                "sharedImageGalleryImageDefinitionResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Conditional. Resource ID of Compute Gallery Image Definition to distribute image to, e.g.: /subscriptions/<subscriptionID>/resourceGroups/<SIG resourcegroup>/providers/Microsoft.Compute/galleries/<SIG name>/images/<image definition>."
                  }
                },
                "sharedImageGalleryImageDefinitionTargetVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the Compute Gallery Image. Supports the following Version Syntax: Major.Minor.Build (i.e., '1.1.1' or '10.1.2'). If not provided, a version will be calculated."
                  }
                },
                "excludeFromLatest": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The exclude from latest flag of the image. Defaults to [false]."
                  }
                },
                "replicationRegions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The replication regions of the image. Defaults to the value of the 'location' parameter."
                  }
                },
                "storageAccountType": {
                  "type": "string",
                  "allowedValues": [
                    "Standard_LRS",
                    "Standard_ZRS"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The storage account type of the image. Defaults to [Standard_LRS]."
                  }
                }
              }
            },
            "unManagedDistributionType": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "VHD"
                  ],
                  "metadata": {
                    "description": "Required. The type of distribution."
                  }
                },
                "runOutputName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name to be used for the associated RunOutput. If not provided, a name will be calculated."
                  }
                },
                "artifactTags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags that will be applied to the artifact once it has been created/updated by the distributor. If not provided will set tags based on the provided image source."
                  }
                },
                "imageName": {
                  "type": "string",
                  "metadata": {
                    "description": "Conditional. Name of the managed or unmanaged image that will be created."
                  }
                }
              }
            },
            "managedImageDistributionType": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "ManagedImage"
                  ],
                  "metadata": {
                    "description": "Required. The type of distribution."
                  }
                },
                "runOutputName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name to be used for the associated RunOutput. If not provided, a name will be calculated."
                  }
                },
                "artifactTags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags that will be applied to the artifact once it has been created/updated by the distributor. If not provided will set tags based on the provided image source."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Azure location for the image, should match if image already exists. Defaults to the value of the 'location' parameter."
                  }
                },
                "imageResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Required. The resource ID of the managed image. Defaults to a compute image with name 'imageName-baseTime' in the current resource group."
                  }
                },
                "imageName": {
                  "type": "string",
                  "metadata": {
                    "description": "Conditional. Name of the managed or unmanaged image that will be created."
                  }
                }
              }
            },
            "validationProcessType": {
              "type": "object",
              "properties": {
                "continueDistributeOnFailure": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]."
                  }
                },
                "inVMValidations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "File",
                          "PowerShell",
                          "Shell"
                        ],
                        "metadata": {
                          "description": "Required. The type of validation."
                        }
                      },
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Friendly Name to provide context on what this validation step does."
                        }
                      },
                      "scriptUri": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. URI of the PowerShell script to be run for validation. It can be a github link, Azure Storage URI, etc."
                        }
                      },
                      "inline": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Array of commands to be run, separated by commas."
                        }
                      },
                      "validExitCodes": {
                        "type": "array",
                        "items": {
                          "type": "int"
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Valid codes that can be returned from the script/inline command, this avoids reported failure of the script/inline command."
                        }
                      },
                      "sha256Checksum": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Value of sha256 checksum of the file, you generate this locally, and then Image Builder will checksum and validate."
                        }
                      },
                      "sourceUri": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The source URI of the file."
                        }
                      },
                      "destination": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Destination of the file."
                        }
                      },
                      "runAsSystem": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true."
                        }
                      },
                      "runElevated": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. If specified, the PowerShell script will be run with elevated privileges."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of validators that will be performed on the image. Azure Image Builder supports File, PowerShell and Shell validators."
                  }
                },
                "sourceValidationOnly": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image. Not supported when performing customizations, validations or distributions on the image."
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name prefix of the Image Template to be built by the Azure Image Builder service."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "buildTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 0,
              "minValue": 0,
              "maxValue": 960,
              "metadata": {
                "description": "Optional. The image build timeout in minutes. 0 means the default 240 minutes."
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2s_v3",
              "metadata": {
                "description": "Optional. Specifies the size for the VM."
              }
            },
            "osDiskSizeGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "Optional. Specifies the size of OS disk."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of an already existing subnet, e.g.: /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/<subnetName>.</p>If no value is provided, a new temporary VNET and subnet will be created in the staging resource group and will be deleted along with the remaining temporary resources."
              }
            },
            "imageSource": {
              "type": "object",
              "metadata": {
                "description": "Required. Image source definition in object format."
              }
            },
            "customizationSteps": {
              "type": "array",
              "metadata": {
                "description": "Required. Customization steps to be run when building the VM image."
              }
            },
            "stagingResourceGroup": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the staging resource group in the same subscription and location as the image template that will be used to build the image.</p>If this field is empty, a resource group with a random name will be created.</p>If the resource group specified in this field doesn't exist, it will be created with the same name.</p>If the resource group specified exists, it must be empty and in the same region as the image template.</p>The resource group created will be deleted during template deletion if this field is empty or the resource group specified doesn't exist,</p>but if the resource group specified exists the resources created in the resource group will be deleted during template deletion and the resource group itself will remain."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
              "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a unique image template name."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "distributions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/distributionType"
              },
              "metadata": {
                "description": "Required. The distribution targets where the image output needs to go to."
              }
            },
            "vmUserAssignedIdentities": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of User-Assigned Identities associated to the Build VM for accessing Azure resources such as Key Vaults from your customizer scripts. Be aware, the user assigned identities specified in the 'managedIdentities' parameter must have the 'Managed Identity Operator' role assignment on all the user assigned identities specified in this parameter for Azure Image Builder to be able to associate them to the build VM."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Required. The managed identity definition for this resource."
              }
            },
            "validationProcess": {
              "$ref": "#/definitions/validationProcessType",
              "metadata": {
                "description": "Optional. Configuration options and list of validations to be performed on the resulting image."
              }
            },
            "optimizeVmBoot": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The optimize property can be enabled while creating a VM image and allows VM optimization to improve image creation time."
              }
            }
          },
          "variables": {
            "identity": {
              "type": "UserAssigned",
              "userAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]"
            },
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.virtualmachineimages-imagetemplate.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "imageTemplate": {
              "type": "Microsoft.VirtualMachineImages/imageTemplates",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}-{1}', parameters('name'), parameters('baseTime'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "copy": [
                  {
                    "name": "distribute",
                    "count": "[length(parameters('distributions'))]",
                    "input": "[union(createObject('type', parameters('distributions')[copyIndex('distribute')].type, 'artifactTags', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'artifactTags'), createObject('sourceType', parameters('imageSource').type, 'sourcePublisher', tryGet(parameters('imageSource'), 'publisher'), 'sourceOffer', tryGet(parameters('imageSource'), 'offer'), 'sourceSku', tryGet(parameters('imageSource'), 'sku'), 'sourceVersion', tryGet(parameters('imageSource'), 'version'), 'sourceImageId', tryGet(parameters('imageSource'), 'imageId'), 'sourceImageVersionID', tryGet(parameters('imageSource'), 'imageVersionID'), 'creationTime', parameters('baseTime')))), if(equals(parameters('distributions')[copyIndex('distribute')].type, 'ManagedImage'), createObject('runOutputName', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'runOutputName'), format('{0}-{1}-ManagedImage', parameters('distributions')[copyIndex('distribute')].imageName, parameters('baseTime'))), 'location', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'location'), parameters('location')), 'imageId', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'imageResourceId'), format('{0}/resourceGroups/{1}/providers/Microsoft.Compute/images/{2}-{3}', subscription().id, resourceGroup().name, parameters('distributions')[copyIndex('distribute')].imageName, parameters('baseTime')))), createObject()), if(equals(parameters('distributions')[copyIndex('distribute')].type, 'SharedImage'), createObject('runOutputName', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'runOutputName'), if(not(empty(tryGet(parameters('distributions')[copyIndex('distribute')], 'sharedImageGalleryImageDefinitionResourceId'))), format('{0}-SharedImage', last(split(coalesce(parameters('distributions')[copyIndex('distribute')].sharedImageGalleryImageDefinitionResourceId, '/'), '/'))), 'SharedImage')), 'galleryImageId', if(not(empty(tryGet(parameters('distributions')[copyIndex('distribute')], 'sharedImageGalleryImageDefinitionTargetVersion'))), format('{0}/versions/{1}', parameters('distributions')[copyIndex('distribute')].sharedImageGalleryImageDefinitionResourceId, parameters('distributions')[copyIndex('distribute')].sharedImageGalleryImageDefinitionTargetVersion), parameters('distributions')[copyIndex('distribute')].sharedImageGalleryImageDefinitionResourceId), 'excludeFromLatest', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'excludeFromLatest'), false()), 'replicationRegions', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'replicationRegions'), createArray(parameters('location'))), 'storageAccountType', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'storageAccountType'), 'Standard_LRS')), createObject()), if(equals(parameters('distributions')[copyIndex('distribute')].type, 'VHD'), createObject('runOutputName', coalesce(tryGet(parameters('distributions')[copyIndex('distribute')], 'runOutputName'), format('{0}-VHD', parameters('distributions')[copyIndex('distribute')].imageName))), createObject()))]"
                  }
                ],
                "buildTimeoutInMinutes": "[parameters('buildTimeoutInMinutes')]",
                "vmProfile": {
                  "vmSize": "[parameters('vmSize')]",
                  "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                  "userAssignedIdentities": "[parameters('vmUserAssignedIdentities')]",
                  "vnetConfig": "[if(not(empty(parameters('subnetResourceId'))), createObject('subnetId', parameters('subnetResourceId')), null())]"
                },
                "source": "[parameters('imageSource')]",
                "customize": "[parameters('customizationSteps')]",
                "stagingResourceGroup": "[parameters('stagingResourceGroup')]",
                "validate": "[parameters('validationProcess')]",
                "optimize": "[if(not(equals(parameters('optimizeVmBoot'), null())), createObject('vmBoot', createObject('state', parameters('optimizeVmBoot'))), null())]"
              }
            },
            "imageTemplate_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.VirtualMachineImages/imageTemplates/{0}', format('{0}-{1}', parameters('name'), parameters('baseTime')))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "imageTemplate"
              ]
            },
            "imageTemplate_roleAssignments": {
              "copy": {
                "name": "imageTemplate_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.VirtualMachineImages/imageTemplates/{0}', format('{0}-{1}', parameters('name'), parameters('baseTime')))]",
              "name": "[guid(resourceId('Microsoft.VirtualMachineImages/imageTemplates', format('{0}-{1}', parameters('name'), parameters('baseTime'))), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "imageTemplate"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the image template."
              },
              "value": "[resourceId('Microsoft.VirtualMachineImages/imageTemplates', format('{0}-{1}', parameters('name'), parameters('baseTime')))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the image template was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The full name of the deployed image template."
              },
              "value": "[format('{0}-{1}', parameters('name'), parameters('baseTime'))]"
            },
            "namePrefix": {
              "type": "string",
              "metadata": {
                "description": "The prefix of the image template name provided as input."
              },
              "value": "[parameters('name')]"
            },
            "runThisCommand": {
              "type": "string",
              "metadata": {
                "description": "The command to run in order to trigger the image build."
              },
              "value": "[format('Invoke-AzResourceAction -ResourceName {0} -ResourceGroupName {1} -ResourceType Microsoft.VirtualMachineImages/imageTemplates -Action Run -Force', format('{0}-{1}', parameters('name'), parameters('baseTime')), resourceGroup().name)]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('imageTemplate', '2023-07-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('RG-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Compute-Gallery-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Definition-{0}', parameters('time')))]",
        "roleAssignments",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[and(parameters('enableMonitoringAlerts'), empty(parameters('existingLogAnalyticsWorkspaceResourceId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Log-Analytics-Workspace-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "name": {
            "value": "[variables('varLogAnalyticsWorkspaceName')]"
          },
          "dataRetention": {
            "value": "[parameters('logAnalyticsWorkspaceDataRetention')]"
          },
          "useResourcePermissions": {
            "value": true
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "2986112893833599507"
            },
            "name": "Log Analytics Workspaces",
            "description": "This module deploys a Log Analytics Workspace.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "CapacityReservation",
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The name of the SKU."
              }
            },
            "skuCapacityReservationLevel": {
              "type": "int",
              "defaultValue": 100,
              "minValue": 100,
              "maxValue": 5000,
              "metadata": {
                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
              }
            },
            "storageInsightsConfigs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of storage accounts to be read by the workspace."
              }
            },
            "linkedServices": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of services to be linked."
              }
            },
            "linkedStorageAccounts": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
              }
            },
            "savedSearches": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Kusto Query Language searches to save."
              }
            },
            "dataExports": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. LAW data export instances to be deployed."
              }
            },
            "dataSources": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. LAW data sources to configure."
              }
            },
            "tables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. LAW custom tables to be deployed."
              }
            },
            "gallerySolutions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 365,
              "minValue": 0,
              "maxValue": 730,
              "metadata": {
                "description": "Optional. Number of days data will be retained for."
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            },
            "useResourcePermissions": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "forceCmkForQuery": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "logAnalyticsWorkspace": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": 1,
                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                },
                "sku": {
                  "name": "[parameters('skuName')]",
                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
              },
              "identity": "[variables('identity')]"
            },
            "logAnalyticsWorkspace_diagnosticSettings": {
              "copy": {
                "name": "logAnalyticsWorkspace_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_roleAssignments": {
              "copy": {
                "name": "logAnalyticsWorkspace_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_storageInsightConfigs": {
              "copy": {
                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                "count": "[length(parameters('storageInsightsConfigs'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'containers'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].containers), createObject('value', createArray()))]",
                  "tables": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'tables'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].tables), createObject('value', createArray()))]",
                  "storageAccountResourceId": {
                    "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountResourceId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "16775981135504794519"
                    },
                    "name": "Log Analytics Workspace Storage Insight Configs",
                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the storage insights config."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The names of the blob containers that the workspace should read."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The names of the Azure tables that the workspace should read."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to configure in the resource."
                      }
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "storageinsightconfig": {
                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "containers": "[parameters('containers')]",
                        "tables": "[parameters('tables')]",
                        "storageAccount": {
                          "id": "[parameters('storageAccountResourceId')]",
                          "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                        }
                      },
                      "dependsOn": [
                        "storageAccount",
                        "workspace"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage insights configuration."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the storage insight configuration is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage insights configuration."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedServices": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedServices",
                "count": "[length(parameters('linkedServices'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('linkedServices')[copyIndex()].name]"
                  },
                  "resourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'resourceId'), createObject('value', parameters('linkedServices')[copyIndex()].resourceId), createObject('value', ''))]",
                  "writeAccessResourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId'), createObject('value', parameters('linkedServices')[copyIndex()].writeAccessResourceId), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11327223922004680974"
                    },
                    "name": "Log Analytics Workspace Linked Services",
                    "description": "This module deploys a Log Analytics Workspace Linked Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                      }
                    },
                    "writeAccessResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to configure in the resource."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedService": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resourceId": "[parameters('resourceId')]",
                        "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                      },
                      "dependsOn": [
                        "workspace"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked service."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked service is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedStorageAccounts": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                "count": "[length(parameters('linkedStorageAccounts'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                  },
                  "resourceId": {
                    "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "16393542404456450187"
                    },
                    "name": "Log Analytics Workspace Linked Storage Accounts",
                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "Query",
                        "Alerts",
                        "CustomLogs",
                        "AzureWatson"
                      ],
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "storageAccountIds": [
                          "[parameters('resourceId')]"
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked storage account."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked storage account is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_savedSearches": {
              "copy": {
                "name": "logAnalyticsWorkspace_savedSearches",
                "count": "[length(parameters('savedSearches'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                  },
                  "etag": {
                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'etag')]"
                  },
                  "displayName": {
                    "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                  },
                  "category": {
                    "value": "[parameters('savedSearches')[copyIndex()].category]"
                  },
                  "query": {
                    "value": "[parameters('savedSearches')[copyIndex()].query]"
                  },
                  "functionAlias": {
                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionAlias')]"
                  },
                  "functionParameters": {
                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionParameters')]"
                  },
                  "version": {
                    "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'version')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "18166536793397048488"
                    },
                    "name": "Log Analytics Workspace Saved Searches",
                    "description": "This module deploys a Log Analytics Workspace Saved Search.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the saved search."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name for the search."
                      }
                    },
                    "category": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Query category."
                      }
                    },
                    "query": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Kusto Query to be stored."
                      }
                    },
                    "tags": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to configure in the resource."
                      }
                    },
                    "functionAlias": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The function alias if query serves as a function."
                      }
                    },
                    "functionParameters": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                      }
                    },
                    "version": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The version number of the query language."
                      }
                    },
                    "etag": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "savedSearch": {
                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "etag": "[parameters('etag')]",
                        "tags": "[coalesce(parameters('tags'), createArray())]",
                        "displayName": "[parameters('displayName')]",
                        "category": "[parameters('category')]",
                        "query": "[parameters('query')]",
                        "functionAlias": "[parameters('functionAlias')]",
                        "functionParameters": "[parameters('functionParameters')]",
                        "version": "[parameters('version')]"
                      },
                      "dependsOn": [
                        "workspace"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed saved search."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the saved search is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed saved search."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace",
                "logAnalyticsWorkspace_linkedStorageAccounts"
              ]
            },
            "logAnalyticsWorkspace_dataExports": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataExports",
                "count": "[length(parameters('dataExports'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('dataExports')[copyIndex()].name]"
                  },
                  "destination": "[if(contains(parameters('dataExports')[copyIndex()], 'destination'), createObject('value', parameters('dataExports')[copyIndex()].destination), createObject('value', createObject()))]",
                  "enable": "[if(contains(parameters('dataExports')[copyIndex()], 'enable'), createObject('value', parameters('dataExports')[copyIndex()].enable), createObject('value', false()))]",
                  "tableNames": "[if(contains(parameters('dataExports')[copyIndex()], 'tableNames'), createObject('value', parameters('dataExports')[copyIndex()].tableNames), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "7136569845646186437"
                    },
                    "name": "Log Analytics Workspace Data Exports",
                    "description": "This module deploys a Log Analytics Workspace Data Export.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The data export rule name."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "destination": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Destination properties."
                      }
                    },
                    "enable": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Active when enabled."
                      }
                    },
                    "tableNames": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "destination": "[parameters('destination')]",
                        "enable": "[parameters('enable')]",
                        "tableNames": "[parameters('tableNames')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the data export."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the data export."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the data export was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_dataSources": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataSources",
                "count": "[length(parameters('dataSources'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('dataSources')[copyIndex()].name]"
                  },
                  "kind": {
                    "value": "[parameters('dataSources')[copyIndex()].kind]"
                  },
                  "linkedResourceId": "[if(contains(parameters('dataSources')[copyIndex()], 'linkedResourceId'), createObject('value', parameters('dataSources')[copyIndex()].linkedResourceId), createObject('value', ''))]",
                  "eventLogName": "[if(contains(parameters('dataSources')[copyIndex()], 'eventLogName'), createObject('value', parameters('dataSources')[copyIndex()].eventLogName), createObject('value', ''))]",
                  "eventTypes": "[if(contains(parameters('dataSources')[copyIndex()], 'eventTypes'), createObject('value', parameters('dataSources')[copyIndex()].eventTypes), createObject('value', createArray()))]",
                  "objectName": "[if(contains(parameters('dataSources')[copyIndex()], 'objectName'), createObject('value', parameters('dataSources')[copyIndex()].objectName), createObject('value', ''))]",
                  "instanceName": "[if(contains(parameters('dataSources')[copyIndex()], 'instanceName'), createObject('value', parameters('dataSources')[copyIndex()].instanceName), createObject('value', ''))]",
                  "intervalSeconds": "[if(contains(parameters('dataSources')[copyIndex()], 'intervalSeconds'), createObject('value', parameters('dataSources')[copyIndex()].intervalSeconds), createObject('value', 60))]",
                  "counterName": "[if(contains(parameters('dataSources')[copyIndex()], 'counterName'), createObject('value', parameters('dataSources')[copyIndex()].counterName), createObject('value', ''))]",
                  "state": "[if(contains(parameters('dataSources')[copyIndex()], 'state'), createObject('value', parameters('dataSources')[copyIndex()].state), createObject('value', ''))]",
                  "syslogName": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogName'), createObject('value', parameters('dataSources')[copyIndex()].syslogName), createObject('value', ''))]",
                  "syslogSeverities": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogSeverities'), createObject('value', parameters('dataSources')[copyIndex()].syslogSeverities), createObject('value', createArray()))]",
                  "performanceCounters": "[if(contains(parameters('dataSources')[copyIndex()], 'performanceCounters'), createObject('value', parameters('dataSources')[copyIndex()].performanceCounters), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13864187993066263466"
                    },
                    "name": "Log Analytics Workspace Datasources",
                    "description": "This module deploys a Log Analytics Workspace Data Source.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzureActivityLog",
                      "allowedValues": [
                        "AzureActivityLog",
                        "WindowsEvent",
                        "WindowsPerformanceCounter",
                        "IISLogs",
                        "LinuxSyslog",
                        "LinuxSyslogCollection",
                        "LinuxPerformanceObject",
                        "LinuxPerformanceCollection"
                      ],
                      "metadata": {
                        "description": "Required. The kind of the DataSource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to configure in the resource."
                      }
                    },
                    "linkedResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the resource to be linked."
                      }
                    },
                    "eventLogName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                      }
                    },
                    "eventTypes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                      }
                    },
                    "objectName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "instanceName": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "intervalSeconds": {
                      "type": "int",
                      "defaultValue": 60,
                      "metadata": {
                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "performanceCounters": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                      }
                    },
                    "counterName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                      }
                    },
                    "state": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                      }
                    },
                    "syslogName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                      }
                    },
                    "syslogSeverities": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "dataSource": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                      },
                      "dependsOn": [
                        "workspace"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed data source."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the data source is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed data source."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_tables": {
              "copy": {
                "name": "logAnalyticsWorkspace_tables",
                "count": "[length(parameters('tables'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('tables')[copyIndex()].name]"
                  },
                  "plan": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'plan')]"
                  },
                  "schema": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'schema')]"
                  },
                  "retentionInDays": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'retentionInDays')]"
                  },
                  "totalRetentionInDays": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'totalRetentionInDays')]"
                  },
                  "restoredLogs": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'restoredLogs')]"
                  },
                  "searchResults": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'searchResults')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "9332283068393802804"
                    },
                    "name": "Log Analytics Workspace Tables",
                    "description": "This module deploys a Log Analytics Workspace Table.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the table."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "plan": {
                      "type": "string",
                      "defaultValue": "Analytics",
                      "allowedValues": [
                        "Basic",
                        "Analytics"
                      ],
                      "metadata": {
                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                      }
                    },
                    "restoredLogs": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Restore parameters."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                      }
                    },
                    "schema": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table's schema."
                      }
                    },
                    "searchResults": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters of the search job that initiated this table."
                      }
                    },
                    "totalRetentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 2555,
                      "metadata": {
                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "table": {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "plan": "[parameters('plan')]",
                        "restoredLogs": "[parameters('restoredLogs')]",
                        "retentionInDays": "[parameters('retentionInDays')]",
                        "schema": "[parameters('schema')]",
                        "searchResults": "[parameters('searchResults')]",
                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                      },
                      "dependsOn": [
                        "workspace"
                      ]
                    },
                    "table_roleAssignments": {
                      "copy": {
                        "name": "table_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "table"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the table."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the table was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_solutions": {
              "copy": {
                "name": "logAnalyticsWorkspace_solutions",
                "count": "[length(parameters('gallerySolutions'))]"
              },
              "condition": "[not(empty(parameters('gallerySolutions')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "product": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'product'), createObject('value', parameters('gallerySolutions')[copyIndex()].product), createObject('value', 'OMSGallery'))]",
                  "publisher": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'publisher'), createObject('value', parameters('gallerySolutions')[copyIndex()].publisher), createObject('value', 'Microsoft'))]",
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(parameters('gallerySolutions')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "18444780972506374592"
                    },
                    "name": "Operations Management Solutions",
                    "description": "This module deploys an Operations Management Solution.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "product": {
                      "type": "string",
                      "defaultValue": "OMSGallery",
                      "metadata": {
                        "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "defaultValue": "Microsoft",
                      "metadata": {
                        "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                    "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[variables('solutionName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      },
                      "plan": {
                        "name": "[variables('solutionName')]",
                        "promotionCode": "",
                        "product": "[variables('solutionProduct')]",
                        "publisher": "[parameters('publisher')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed solution."
                      },
                      "value": "[variables('solutionName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed solution."
                      },
                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the solution is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace."
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed log analytics workspace."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed log analytics workspace."
              },
              "value": "[parameters('name')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID associated with the workspace."
              },
              "value": "[reference('logAnalyticsWorkspace').customerId]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('RG-{0}', parameters('time')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Automation-Account-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "diagnosticSettings": {
            "value": [
              {
                "workspaceResourceId": "[if(empty(parameters('alertsDistributionGroup')), '', if(empty(parameters('existingLogAnalyticsWorkspaceResourceId')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value, parameters('existingLogAnalyticsWorkspaceResourceId')))]"
              }
            ]
          },
          "name": {
            "value": "[variables('varAutomationAccountName')]"
          },
          "jobSchedules": {
            "value": [
              {
                "parameters": {
                  "ClientId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time'))), '2022-09-01').outputs.clientId.value]",
                  "EnvironmentName": "[variables('varAzureCloudName')]",
                  "ImageOffer": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].offer]",
                  "ImagePublisher": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].publisher]",
                  "ImageSku": "[variables('varOperatingSystemImageDefinitions')[parameters('operatingSystemImage')].sku]",
                  "Location": "[parameters('deploymentLocation')]",
                  "SubscriptionId": "[parameters('sharedServicesSubId')]",
                  "TemplateName": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Template-{0}', parameters('time'))), '2022-09-01').outputs.name.value]",
                  "TemplateResourceGroupName": "[variables('varResourceGroupName')]",
                  "TenantId": "[subscription().tenantId]"
                },
                "runbookName": "aib-build-automation",
                "scheduleName": "[variables('varImageTemplateName')]"
              }
            ]
          },
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "runbooks": {
            "value": [
              {
                "name": "aib-build-automation",
                "description": "When this runbook is triggered, last build date is checked on the AIB image template.  If a new marketplace image has been released since that date, a new build is initiated. If a build has never been initiated then it will be start one.",
                "type": "PowerShell",
                "uri": "https://raw.githubusercontent.com/Azure/avdaccelerator/main/workload/scripts/New-AzureImageBuilderBuild.ps1",
                "version": "1.0.0.0"
              }
            ]
          },
          "schedules": {
            "value": [
              {
                "name": "[variables('varImageTemplateName')]",
                "frequency": "[if(equals(parameters('buildSchedule'), 'OneTime'), 'OneTime', 'Day')]",
                "interval": "[if(equals(parameters('buildSchedule'), 'OneTime'), 0, 1)]",
                "starttime": "[dateTimeAdd(parameters('time'), 'PT15M')]",
                "varTimeZone": "[variables('varTimeZone')]",
                "advancedSchedule": {}
              }
            ]
          },
          "skuName": {
            "value": "Free"
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]",
          "managedIdentities": {
            "value": {
              "systemAssigned": false,
              "userAssignedResourceIds": [
                "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value]"
              ]
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "9253206103047535758"
            },
            "name": "Automation Accounts",
            "description": "This module deploys an Azure Automation Account.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "privateLinkServiceConnectionName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private link connection to create."
                    }
                  },
                  "service": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                    }
                  },
                  "privateDnsZoneResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint ip address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private ip addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private ip address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "nullable": true
            },
            "credentialType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Name of the Automation Account credential."
                    }
                  },
                  "userName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The user name associated to the credential."
                    }
                  },
                  "password": {
                    "type": "securestring",
                    "metadata": {
                      "description": "Required. Password of the credential."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Description of the credential."
                    }
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "credential/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Automation Account."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Basic",
              "allowedValues": [
                "Free",
                "Basic"
              ],
              "metadata": {
                "description": "Optional. SKU name of the account."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyType",
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "credentials": {
              "$ref": "#/definitions/credentialType",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of credentials to be created in the automation account."
              }
            },
            "modules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of modules to be created in the automation account."
              }
            },
            "runbooks": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of runbooks to be created in the automation account."
              }
            },
            "schedules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of schedules to be created in the automation account."
              }
            },
            "jobSchedules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of jobSchedules to be created in the automation account."
              }
            },
            "variables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of variables to be created in the automation account."
              }
            },
            "linkedWorkspaceResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the log analytics workspace to be linked to the deployed automation account."
              }
            },
            "gallerySolutions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of gallerySolutions to be created in the linked log analytics workspace."
              }
            },
            "softwareUpdateConfigurations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of softwareUpdateConfigurations to be created in the automation account."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Disable local authentication profile used within the resource."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the Automation Account resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Automation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f353d9bd-d4a6-484e-a77a-8050b599b867')]",
              "Automation Job Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]",
              "Automation Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd3881f73-407a-4167-8283-e981cbba0404')]",
              "Automation Runbook Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKKeyVault"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.automation-automationaccount.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
            },
            "automationAccount": {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2022-08-08",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]"
                },
                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.Keyvault', 'identity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), createObject('userAssignedIdentity', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/')))), null()), 'keyVaultProperties', createObject('keyName', parameters('customerManagedKey').keyName, 'keyvaultUri', reference('cMKKeyVault').vaultUri, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), if(equals(parameters('publicNetworkAccess'), 'Disabled'), false(), true()), if(not(empty(parameters('privateEndpoints'))), false(), null()))]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]"
              },
              "dependsOn": [
                "cMKKeyVault",
                "cMKUserAssignedIdentity"
              ]
            },
            "automationAccount_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_diagnosticSettings": {
              "copy": {
                "name": "automationAccount_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_roleAssignments": {
              "copy": {
                "name": "automationAccount_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Automation/automationAccounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_credentials": {
              "condition": "[not(empty(parameters('credentials')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutomationAccount-Credentials', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "credentials": {
                    "value": "[parameters('credentials')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "17311442241252857733"
                    },
                    "name": "Automation Account Credential",
                    "description": "This module deploys Azure Automation Account Credential.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "credentialType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Name of the Automation Account credential."
                            }
                          },
                          "userName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The user name associated to the credential."
                            }
                          },
                          "password": {
                            "type": "securestring",
                            "metadata": {
                              "description": "Required. Password of the credential."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Description of the credential."
                            }
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "credentials": {
                      "$ref": "#/definitions/credentialType",
                      "metadata": {
                        "description": "Required. The credential definition."
                      }
                    }
                  },
                  "resources": {
                    "automationAccount": {
                      "existing": true,
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2022-08-08",
                      "name": "[parameters('automationAccountName')]"
                    },
                    "automationAccount_credential": {
                      "copy": {
                        "name": "automationAccount_credential",
                        "count": "[length(parameters('credentials'))]"
                      },
                      "type": "Microsoft.Automation/automationAccounts/credentials",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('credentials')[copyIndex()].name)]",
                      "properties": {
                        "password": "[parameters('credentials')[copyIndex()].password]",
                        "userName": "[parameters('credentials')[copyIndex()].userName]",
                        "description": "[coalesce(tryGet(parameters('credentials')[copyIndex()], 'description'), '')]"
                      },
                      "dependsOn": [
                        "automationAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "array",
                      "metadata": {
                        "description": "The resource IDs of the credentials associated to the automation account."
                      },
                      "copy": {
                        "count": "[length(range(0, length(parameters('credentials'))))]",
                        "input": "[resourceId('Microsoft.Automation/automationAccounts/credentials', parameters('automationAccountName'), parameters('credentials')[range(0, length(parameters('credentials')))[copyIndex()]].name)]"
                      }
                    },
                    "name": {
                      "type": "array",
                      "metadata": {
                        "description": "The names of the credentials associated to the automation account."
                      },
                      "copy": {
                        "count": "[length(range(0, length(parameters('credentials'))))]",
                        "input": "[parameters('credentials')[range(0, length(parameters('credentials')))[copyIndex()]].name]"
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed credential."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_modules": {
              "copy": {
                "name": "automationAccount_modules",
                "count": "[length(parameters('modules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-Module-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('modules')[copyIndex()].name]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "version": {
                    "value": "[parameters('modules')[copyIndex()].version]"
                  },
                  "uri": {
                    "value": "[parameters('modules')[copyIndex()].uri]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('modules')[copyIndex()], 'tags'), parameters('tags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "1661319858724328950"
                    },
                    "name": "Automation Account Modules",
                    "description": "This module deploys an Azure Automation Account Module.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Automation Account module."
                      }
                    },
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "uri": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Module package URI, e.g. https://www.powershellgallery.com/api/v2/package."
                      }
                    },
                    "version": {
                      "type": "string",
                      "defaultValue": "latest",
                      "metadata": {
                        "description": "Optional. Module version or specify latest to get the latest version."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the Automation Account resource."
                      }
                    }
                  },
                  "resources": {
                    "automationAccount": {
                      "existing": true,
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2022-08-08",
                      "name": "[parameters('automationAccountName')]"
                    },
                    "module": {
                      "type": "Microsoft.Automation/automationAccounts/modules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "contentLink": {
                          "uri": "[if(not(equals(parameters('version'), 'latest')), format('{0}/{1}/{2}', parameters('uri'), parameters('name'), parameters('version')), format('{0}/{1}', parameters('uri'), parameters('name')))]",
                          "version": "[if(not(equals(parameters('version'), 'latest')), parameters('version'), null())]"
                        }
                      },
                      "dependsOn": [
                        "automationAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed module."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed module."
                      },
                      "value": "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed module."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('module', '2022-08-08', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_schedules": {
              "copy": {
                "name": "automationAccount_schedules",
                "count": "[length(parameters('schedules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-Schedule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('schedules')[copyIndex()].name]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "advancedSchedule": "[if(contains(parameters('schedules')[copyIndex()], 'advancedSchedule'), createObject('value', parameters('schedules')[copyIndex()].advancedSchedule), createObject('value', null()))]",
                  "description": "[if(contains(parameters('schedules')[copyIndex()], 'description'), createObject('value', parameters('schedules')[copyIndex()].description), createObject('value', ''))]",
                  "expiryTime": "[if(contains(parameters('schedules')[copyIndex()], 'expiryTime'), createObject('value', parameters('schedules')[copyIndex()].expiryTime), createObject('value', ''))]",
                  "frequency": "[if(contains(parameters('schedules')[copyIndex()], 'frequency'), createObject('value', parameters('schedules')[copyIndex()].frequency), createObject('value', 'OneTime'))]",
                  "interval": "[if(contains(parameters('schedules')[copyIndex()], 'interval'), createObject('value', parameters('schedules')[copyIndex()].interval), createObject('value', 0))]",
                  "startTime": "[if(contains(parameters('schedules')[copyIndex()], 'startTime'), createObject('value', parameters('schedules')[copyIndex()].startTime), createObject('value', ''))]",
                  "timeZone": "[if(contains(parameters('schedules')[copyIndex()], 'timeZone'), createObject('value', parameters('schedules')[copyIndex()].timeZone), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11730927882334055011"
                    },
                    "name": "Automation Account Schedules",
                    "description": "This module deploys an Azure Automation Account Schedule.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Automation Account schedule."
                      }
                    },
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "advancedSchedule": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "monthDays": "Days of the month that the job should execute on. Must be between 1 and 31.",
                        "monthlyOccurrences": "Occurrences of days within a month.",
                        "weekDays": "Days of the week that the job should execute on.",
                        "description": "Optional. The properties of the create Advanced Schedule."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the schedule."
                      }
                    },
                    "expiryTime": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The end time of the schedule."
                      }
                    },
                    "frequency": {
                      "type": "string",
                      "defaultValue": "OneTime",
                      "allowedValues": [
                        "Day",
                        "Hour",
                        "Minute",
                        "Month",
                        "OneTime",
                        "Week"
                      ],
                      "metadata": {
                        "description": "Optional. The frequency of the schedule."
                      }
                    },
                    "interval": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Anything."
                      }
                    },
                    "startTime": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The start time of the schedule."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The time zone of the schedule."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Time used as a basis for e.g. the schedule start date."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts/schedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
                      "properties": {
                        "advancedSchedule": "[if(not(empty(parameters('advancedSchedule'))), parameters('advancedSchedule'), null())]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "expiryTime": "[if(not(empty(parameters('expiryTime'))), parameters('expiryTime'), null())]",
                        "frequency": "[if(not(empty(parameters('frequency'))), parameters('frequency'), 'OneTime')]",
                        "interval": "[if(not(equals(parameters('interval'), 0)), parameters('interval'), null())]",
                        "startTime": "[if(not(empty(parameters('startTime'))), parameters('startTime'), dateTimeAdd(parameters('baseTime'), 'PT15M'))]",
                        "timeZone": "[if(not(empty(parameters('timeZone'))), parameters('timeZone'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed schedule."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed schedule."
                      },
                      "value": "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed schedule."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_runbooks": {
              "copy": {
                "name": "automationAccount_runbooks",
                "count": "[length(parameters('runbooks'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-Runbook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('runbooks')[copyIndex()].name]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "type": {
                    "value": "[parameters('runbooks')[copyIndex()].type]"
                  },
                  "description": "[if(contains(parameters('runbooks')[copyIndex()], 'description'), createObject('value', parameters('runbooks')[copyIndex()].description), createObject('value', ''))]",
                  "uri": "[if(contains(parameters('runbooks')[copyIndex()], 'uri'), createObject('value', parameters('runbooks')[copyIndex()].uri), createObject('value', ''))]",
                  "version": "[if(contains(parameters('runbooks')[copyIndex()], 'version'), createObject('value', parameters('runbooks')[copyIndex()].version), createObject('value', ''))]",
                  "sasTokenValidityLength": {
                    "value": "[tryGet(parameters('runbooks')[copyIndex()], 'sasTokenValidityLength')]"
                  },
                  "scriptStorageAccountResourceId": {
                    "value": "[tryGet(parameters('runbooks')[copyIndex()], 'scriptStorageAccountResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('runbooks')[copyIndex()], 'tags'), parameters('tags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "16990805873972671446"
                    },
                    "name": "Automation Account Runbooks",
                    "description": "This module deploys an Azure Automation Account Runbook.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Automation Account runbook."
                      }
                    },
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "type": {
                      "type": "string",
                      "allowedValues": [
                        "Graph",
                        "GraphPowerShell",
                        "GraphPowerShellWorkflow",
                        "PowerShell",
                        "PowerShell72",
                        "PowerShellWorkflow",
                        "Python2",
                        "Python3",
                        "Script"
                      ],
                      "metadata": {
                        "description": "Required. The type of the runbook."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the runbook."
                      }
                    },
                    "uri": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The uri of the runbook content."
                      }
                    },
                    "version": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The version of the runbook content."
                      }
                    },
                    "scriptStorageAccountResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource Id of the runbook storage account."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Time used as a basis for e.g. the schedule start date."
                      }
                    },
                    "sasTokenValidityLength": {
                      "type": "string",
                      "defaultValue": "PT8H",
                      "metadata": {
                        "description": "Optional. SAS token validity length. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the Automation Account resource."
                      }
                    }
                  },
                  "variables": {
                    "accountSasProperties": {
                      "signedServices": "b",
                      "signedPermission": "r",
                      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                      "signedResourceTypes": "o",
                      "signedProtocol": "https"
                    }
                  },
                  "resources": {
                    "automationAccount": {
                      "existing": true,
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2022-08-08",
                      "name": "[parameters('automationAccountName')]"
                    },
                    "storageAccount": {
                      "condition": "[not(empty(parameters('scriptStorageAccountResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "subscriptionId": "[split(coalesce(parameters('scriptStorageAccountResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(parameters('scriptStorageAccountResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(parameters('scriptStorageAccountResourceId'), 'dummyVault'), '/'))]"
                    },
                    "runbook": {
                      "type": "Microsoft.Automation/automationAccounts/runbooks",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "runbookType": "[parameters('type')]",
                        "description": "[parameters('description')]",
                        "publishContentLink": "[if(not(empty(parameters('uri'))), if(empty(parameters('uri')), null(), createObject('uri', if(not(empty(parameters('uri'))), if(empty(parameters('scriptStorageAccountResourceId')), parameters('uri'), format('{0}?{1}', parameters('uri'), listAccountSas(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(parameters('scriptStorageAccountResourceId'), '//'), '/')[2], split(coalesce(parameters('scriptStorageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(coalesce(parameters('scriptStorageAccountResourceId'), 'dummyVault'), '/'))), '2021-04-01', variables('accountSasProperties')).accountSasToken)), null()), 'version', if(not(empty(parameters('version'))), parameters('version'), null()))), null())]"
                      },
                      "dependsOn": [
                        "automationAccount",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed runbook."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed runbook."
                      },
                      "value": "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed runbook."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('runbook', '2023-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_jobSchedules": {
              "copy": {
                "name": "automationAccount_jobSchedules",
                "count": "[length(parameters('jobSchedules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-JobSchedule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "runbookName": {
                    "value": "[parameters('jobSchedules')[copyIndex()].runbookName]"
                  },
                  "scheduleName": {
                    "value": "[parameters('jobSchedules')[copyIndex()].scheduleName]"
                  },
                  "parameters": "[if(contains(parameters('jobSchedules')[copyIndex()], 'parameters'), createObject('value', parameters('jobSchedules')[copyIndex()].parameters), createObject('value', createObject()))]",
                  "runOn": "[if(contains(parameters('jobSchedules')[copyIndex()], 'runOn'), createObject('value', parameters('jobSchedules')[copyIndex()].runOn), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "7852489714477748054"
                    },
                    "name": "Automation Account Job Schedules",
                    "description": "This module deploys an Azure Automation Account Job Schedule.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[newGuid()]",
                      "metadata": {
                        "description": "Generated. Name of the Automation Account job schedule. Must be a GUID and is autogenerated. No need to provide this value."
                      }
                    },
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "runbookName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The runbook property associated with the entity."
                      }
                    },
                    "scheduleName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The schedule property associated with the entity."
                      }
                    },
                    "parameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. List of job properties."
                      }
                    },
                    "runOn": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The hybrid worker group that the scheduled job should run on."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
                      "properties": {
                        "parameters": "[parameters('parameters')]",
                        "runbook": {
                          "name": "[parameters('runbookName')]"
                        },
                        "runOn": "[if(not(empty(parameters('runOn'))), parameters('runOn'), null())]",
                        "schedule": {
                          "name": "[parameters('scheduleName')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed job schedule."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed job schedule."
                      },
                      "value": "[resourceId('Microsoft.Automation/automationAccounts/jobSchedules', parameters('automationAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed job schedule."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount",
                "automationAccount_runbooks",
                "automationAccount_schedules"
              ]
            },
            "automationAccount_variables": {
              "copy": {
                "name": "automationAccount_variables",
                "count": "[length(parameters('variables'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-Variable-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('variables')[copyIndex()].name]"
                  },
                  "description": "[if(contains(parameters('variables')[copyIndex()], 'description'), createObject('value', parameters('variables')[copyIndex()].description), createObject('value', ''))]",
                  "value": {
                    "value": "[parameters('variables')[copyIndex()].value]"
                  },
                  "isEncrypted": "[if(contains(parameters('variables')[copyIndex()], 'isEncrypted'), createObject('value', parameters('variables')[copyIndex()].isEncrypted), createObject('value', true()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "17408217027458282021"
                    },
                    "name": "Automation Account Variables",
                    "description": "This module deploys an Azure Automation Account Variable.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the variable."
                      }
                    },
                    "value": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. The value of the variable. For security best practices, this value is always passed as a secure string as it could contain an encrypted value when the \"isEncrypted\" property is set to true."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the variable."
                      }
                    },
                    "isEncrypted": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If the variable should be encrypted. For security reasons encryption of variables should be enabled."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts/variables",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
                      "properties": {
                        "description": "[parameters('description')]",
                        "isEncrypted": "[parameters('isEncrypted')]",
                        "value": "[parameters('value')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed variable."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed variable."
                      },
                      "value": "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('automationAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed variable."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_linkedService": {
              "condition": "[not(empty(parameters('linkedWorkspaceResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-LinkedService', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[if(not(empty(parameters('linkedWorkspaceResourceId'))), split(if(not(empty(parameters('linkedWorkspaceResourceId'))), parameters('linkedWorkspaceResourceId'), '//'), '/')[2], subscription().subscriptionId)]",
              "resourceGroup": "[if(not(empty(parameters('linkedWorkspaceResourceId'))), split(if(not(empty(parameters('linkedWorkspaceResourceId'))), parameters('linkedWorkspaceResourceId'), '////'), '/')[4], resourceGroup().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "automation"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[last(split(parameters('linkedWorkspaceResourceId'), '/'))]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11327223922004680974"
                    },
                    "name": "Log Analytics Workspace Linked Services",
                    "description": "This module deploys a Log Analytics Workspace Linked Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                      }
                    },
                    "writeAccessResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to configure in the resource."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedService": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resourceId": "[parameters('resourceId')]",
                        "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                      },
                      "dependsOn": [
                        "workspace"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked service."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked service is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            },
            "automationAccount_solutions": {
              "copy": {
                "name": "automationAccount_solutions",
                "count": "[length(parameters('gallerySolutions'))]"
              },
              "condition": "[not(empty(parameters('linkedWorkspaceResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[if(not(empty(parameters('linkedWorkspaceResourceId'))), split(if(not(empty(parameters('linkedWorkspaceResourceId'))), parameters('linkedWorkspaceResourceId'), '//'), '/')[2], subscription().subscriptionId)]",
              "resourceGroup": "[if(not(empty(parameters('linkedWorkspaceResourceId'))), split(if(not(empty(parameters('linkedWorkspaceResourceId'))), parameters('linkedWorkspaceResourceId'), '////'), '/')[4], resourceGroup().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[last(split(parameters('linkedWorkspaceResourceId'), '/'))]"
                  },
                  "product": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'product'), createObject('value', parameters('gallerySolutions')[copyIndex()].product), createObject('value', 'OMSGallery'))]",
                  "publisher": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'publisher'), createObject('value', parameters('gallerySolutions')[copyIndex()].publisher), createObject('value', 'Microsoft'))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "18444780972506374592"
                    },
                    "name": "Operations Management Solutions",
                    "description": "This module deploys an Operations Management Solution.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "product": {
                      "type": "string",
                      "defaultValue": "OMSGallery",
                      "metadata": {
                        "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "defaultValue": "Microsoft",
                      "metadata": {
                        "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                    "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[variables('solutionName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      },
                      "plan": {
                        "name": "[variables('solutionName')]",
                        "promotionCode": "",
                        "product": "[variables('solutionProduct')]",
                        "publisher": "[parameters('publisher')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed solution."
                      },
                      "value": "[variables('solutionName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed solution."
                      },
                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the solution is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount_linkedService"
              ]
            },
            "automationAccount_softwareUpdateConfigurations": {
              "copy": {
                "name": "automationAccount_softwareUpdateConfigurations",
                "count": "[length(parameters('softwareUpdateConfigurations'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AutoAccount-SwUpdateConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].name]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "frequency": {
                    "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].frequency]"
                  },
                  "operatingSystem": {
                    "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].operatingSystem]"
                  },
                  "rebootSetting": {
                    "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].rebootSetting]"
                  },
                  "azureVirtualMachines": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'azureVirtualMachines'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].azureVirtualMachines), createObject('value', createArray()))]",
                  "excludeUpdates": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'excludeUpdates'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].excludeUpdates), createObject('value', createArray()))]",
                  "expiryTime": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'expiryTime'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].expiryTime), createObject('value', ''))]",
                  "expiryTimeOffsetMinutes": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'expiryTimeOffsetMinutes'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].expiryTimeOffsetMinute), createObject('value', 0))]",
                  "includeUpdates": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'includeUpdates'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].includeUpdates), createObject('value', createArray()))]",
                  "interval": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'interval'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].interval), createObject('value', 1))]",
                  "isEnabled": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'isEnabled'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].isEnabled), createObject('value', true()))]",
                  "maintenanceWindow": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'maintenanceWindow'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].maintenanceWindow), createObject('value', 'PT2H'))]",
                  "monthDays": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'monthDays'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].monthDays), createObject('value', createArray()))]",
                  "monthlyOccurrences": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'monthlyOccurrences'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].monthlyOccurrences), createObject('value', createArray()))]",
                  "nextRun": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nextRun'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].nextRun), createObject('value', ''))]",
                  "nextRunOffsetMinutes": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nextRunOffsetMinutes'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].nextRunOffsetMinutes), createObject('value', 0))]",
                  "nonAzureComputerNames": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nonAzureComputerNames'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].nonAzureComputerNames), createObject('value', createArray()))]",
                  "nonAzureQueries": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nonAzureQueries'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].nonAzureQueries), createObject('value', createArray()))]",
                  "postTaskParameters": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'postTaskParameters'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].postTaskParameters), createObject('value', createObject()))]",
                  "postTaskSource": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'postTaskSource'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].postTaskSource), createObject('value', ''))]",
                  "preTaskParameters": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'preTaskParameters'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].preTaskParameters), createObject('value', createObject()))]",
                  "preTaskSource": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'preTaskSource'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].preTaskSource), createObject('value', ''))]",
                  "scheduleDescription": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scheduleDescription'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].scheduleDescription), createObject('value', ''))]",
                  "scopeByLocations": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByLocations'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].scopeByLocations), createObject('value', createArray()))]",
                  "scopeByResources": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByResources'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].scopeByResources), createObject('value', createArray(subscription().id)))]",
                  "scopeByTags": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByTags'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].scopeByTags), createObject('value', createObject()))]",
                  "scopeByTagsOperation": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByTagsOperation'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].scopeByTagsOperation), createObject('value', 'All'))]",
                  "startTime": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'startTime'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].startTime), createObject('value', ''))]",
                  "timeZone": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'timeZone'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].timeZone), createObject('value', 'UTC'))]",
                  "updateClassifications": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'updateClassifications'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].updateClassifications), createObject('value', createArray('Critical', 'Security')))]",
                  "weekDays": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'weekDays'), createObject('value', parameters('softwareUpdateConfigurations')[copyIndex()].weekDays), createObject('value', createArray()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "5046214814278705138"
                    },
                    "name": "Automation Account Software Update Configurations",
                    "description": "This module deploys an Azure Automation Account Software Update Configuration.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Deployment schedule."
                      }
                    },
                    "automationAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "operatingSystem": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. The operating system to be configured by the deployment schedule."
                      }
                    },
                    "rebootSetting": {
                      "type": "string",
                      "allowedValues": [
                        "IfRequired",
                        "Never",
                        "RebootOnly",
                        "Always"
                      ],
                      "metadata": {
                        "description": "Required. Reboot setting for the deployment schedule."
                      }
                    },
                    "frequency": {
                      "type": "string",
                      "allowedValues": [
                        "OneTime",
                        "Hour",
                        "Day",
                        "Week",
                        "Month"
                      ],
                      "metadata": {
                        "description": "Required. The frequency of the deployment schedule. When using 'Hour', 'Day', 'Week' or 'Month', an interval needs to be provided."
                      }
                    },
                    "maintenanceWindow": {
                      "type": "string",
                      "defaultValue": "PT2H",
                      "metadata": {
                        "description": "Optional. Maximum time allowed for the deployment schedule to run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601."
                      }
                    },
                    "updateClassifications": {
                      "type": "array",
                      "defaultValue": [
                        "Critical",
                        "Security"
                      ],
                      "allowedValues": [
                        "Critical",
                        "Security",
                        "UpdateRollup",
                        "FeaturePack",
                        "ServicePack",
                        "Definition",
                        "Tools",
                        "Updates",
                        "Other"
                      ],
                      "metadata": {
                        "description": "Optional. Update classification included in the deployment schedule."
                      }
                    },
                    "excludeUpdates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. KB numbers or Linux packages excluded in the deployment schedule."
                      }
                    },
                    "includeUpdates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. KB numbers or Linux packages included in the deployment schedule."
                      }
                    },
                    "scopeByResources": {
                      "type": "array",
                      "defaultValue": [
                        "[subscription().id]"
                      ],
                      "metadata": {
                        "description": "Optional. Specify the resources to scope the deployment schedule to."
                      }
                    },
                    "scopeByTags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specify tags to which to scope the deployment schedule to."
                      }
                    },
                    "scopeByTagsOperation": {
                      "type": "string",
                      "defaultValue": "All",
                      "allowedValues": [
                        "All",
                        "Any"
                      ],
                      "metadata": {
                        "description": "Optional. Enables the scopeByTags to require All (Tag A and Tag B) or Any (Tag A or Tag B)."
                      }
                    },
                    "scopeByLocations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specify locations to which to scope the deployment schedule to."
                      }
                    },
                    "preTaskParameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters provided to the task running before the deployment schedule."
                      }
                    },
                    "preTaskSource": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The source of the task running before the deployment schedule."
                      }
                    },
                    "postTaskParameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters provided to the task running after the deployment schedule."
                      }
                    },
                    "postTaskSource": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The source of the task running after the deployment schedule."
                      }
                    },
                    "interval": {
                      "type": "int",
                      "defaultValue": 1,
                      "maxValue": 100,
                      "metadata": {
                        "description": "Optional. The interval of the frequency for the deployment schedule. 1 Hour is every hour, 2 Day is every second day, etc."
                      }
                    },
                    "isEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enables the deployment schedule."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "UTC",
                      "metadata": {
                        "description": "Optional. Time zone for the deployment schedule. IANA ID or a Windows Time Zone ID."
                      }
                    },
                    "nonAzureQueries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of functions from a Log Analytics workspace, used to scope the deployment schedule."
                      }
                    },
                    "azureVirtualMachines": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of azure resource IDs for azure virtual machines in scope for the deployment schedule."
                      }
                    },
                    "nonAzureComputerNames": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of names of non-azure machines in scope for the deployment schedule."
                      }
                    },
                    "weekDays": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                      ],
                      "metadata": {
                        "description": "Optional. Required when used with frequency 'Week'. Specified the day of the week to run the deployment schedule."
                      }
                    },
                    "monthDays": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31
                      ],
                      "metadata": {
                        "description": "Optional. Can be used with frequency 'Month'. Provides the specific days of the month to run the deployment schedule."
                      }
                    },
                    "monthlyOccurrences": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Can be used with frequency 'Month'. Provides the pattern/cadence for running the deployment schedule in a month. Takes objects formed like this {occurance(int),day(string)}. Day is the name of the day to run the deployment schedule, the occurance specifies which occurance of that day to run the deployment schedule."
                      }
                    },
                    "startTime": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The start time of the deployment schedule in ISO 8601 format. To specify a specific time use YYYY-MM-DDTHH:MM:SS, 2021-12-31T23:00:00. For schedules where we want to start the deployment as soon as possible, specify the time segment only in 24 hour format, HH:MM, 22:00."
                      }
                    },
                    "expiryTime": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The end time of the deployment schedule in ISO 8601 format. YYYY-MM-DDTHH:MM:SS, 2021-12-31T23:00:00."
                      }
                    },
                    "expiryTimeOffsetMinutes": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. The expiry time's offset in minutes."
                      }
                    },
                    "nextRun": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The next time the deployment schedule runs in ISO 8601 format. YYYY-MM-DDTHH:MM:SS, 2021-12-31T23:00:00."
                      }
                    },
                    "nextRunOffsetMinutes": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. The next run's offset in minutes."
                      }
                    },
                    "scheduleDescription": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The schedules description."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not touch. Is used to provide the base time for time comparison for startTime. If startTime is specified in HH:MM format, baseTime is used to check if the provided startTime has passed, adding one day before setting the deployment schedule."
                      }
                    }
                  },
                  "variables": {
                    "updateClassificationsVar": "[replace(replace(replace(replace(string(parameters('updateClassifications')), ',', ', '), '[', ''), ']', ''), '\"', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts/softwareUpdateConfigurations",
                      "apiVersion": "2019-06-01",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
                      "properties": {
                        "updateConfiguration": {
                          "operatingSystem": "[parameters('operatingSystem')]",
                          "duration": "[parameters('maintenanceWindow')]",
                          "linux": "[if(equals(parameters('operatingSystem'), 'Linux'), createObject('excludedPackageNameMasks', parameters('excludeUpdates'), 'includedPackageNameMasks', parameters('includeUpdates'), 'includedPackageClassifications', variables('updateClassificationsVar'), 'rebootSetting', parameters('rebootSetting')), null())]",
                          "windows": "[if(equals(parameters('operatingSystem'), 'Windows'), createObject('excludedKbNumbers', parameters('excludeUpdates'), 'includedKbNumbers', parameters('includeUpdates'), 'includedUpdateClassifications', variables('updateClassificationsVar'), 'rebootSetting', parameters('rebootSetting')), null())]",
                          "targets": {
                            "azureQueries": [
                              {
                                "scope": "[parameters('scopeByResources')]",
                                "tagSettings": {
                                  "tags": "[parameters('scopeByTags')]",
                                  "filterOperator": "[parameters('scopeByTagsOperation')]"
                                },
                                "locations": "[parameters('scopeByLocations')]"
                              }
                            ],
                            "nonAzureQueries": "[parameters('nonAzureQueries')]"
                          },
                          "azureVirtualMachines": "[parameters('azureVirtualMachines')]",
                          "nonAzureComputerNames": "[parameters('nonAzureComputerNames')]"
                        },
                        "tasks": {
                          "preTask": {
                            "parameters": "[if(empty(parameters('preTaskParameters')), null(), parameters('preTaskParameters'))]",
                            "source": "[if(empty(parameters('preTaskSource')), null(), parameters('preTaskSource'))]"
                          },
                          "postTask": {
                            "parameters": "[if(empty(parameters('postTaskParameters')), null(), parameters('postTaskParameters'))]",
                            "source": "[if(empty(parameters('postTaskSource')), null(), parameters('postTaskSource'))]"
                          }
                        },
                        "scheduleInfo": {
                          "interval": "[parameters('interval')]",
                          "frequency": "[parameters('frequency')]",
                          "isEnabled": "[parameters('isEnabled')]",
                          "timeZone": "[parameters('timeZone')]",
                          "advancedSchedule": {
                            "weekDays": "[if(empty(parameters('weekDays')), null(), parameters('weekDays'))]",
                            "monthDays": "[if(empty(parameters('monthDays')), null(), parameters('monthDays'))]",
                            "monthlyOccurrences": "[if(empty(parameters('monthlyOccurrences')), null(), parameters('monthlyOccurrences'))]"
                          },
                          "startTime": "[if(empty(parameters('startTime')), dateTimeAdd(parameters('baseTime'), 'PT10M'), parameters('startTime'))]",
                          "expiryTime": "[parameters('expiryTime')]",
                          "expiryTimeOffsetMinutes": "[parameters('expiryTimeOffsetMinutes')]",
                          "nextRun": "[parameters('nextRun')]",
                          "nextRunOffsetMinutes": "[parameters('nextRunOffsetMinutes')]",
                          "description": "[parameters('scheduleDescription')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed softwareUpdateConfiguration."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed softwareUpdateConfiguration."
                      },
                      "value": "[resourceId('Microsoft.Automation/automationAccounts/softwareUpdateConfigurations', parameters('automationAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed softwareUpdateConfiguration."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount",
                "automationAccount_solutions"
              ]
            },
            "automationAccount_privateEndpoints": {
              "copy": {
                "name": "automationAccount_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-automationAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Automation/automationAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Automation/automationAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Automation/automationAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Automation/automationAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Automation/automationAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroupName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "4120048060064073955"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                      }
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                          },
                          "privateDNSResourceIds": {
                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "11244630631275470040"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                    }
                  }
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed automation account."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed automation account."
              },
              "value": "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed automation account."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('automationAccount', '2022-08-08', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('automationAccount', '2022-08-08', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Image-Template-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('User-Assigned-Managed-Identity-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time')))]"
      ]
    },
    {
      "copy": {
        "name": "modules",
        "count": "[length(range(0, length(variables('varModules'))))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AA-Module-{0}-{1}', range(0, length(variables('varModules')))[copyIndex()], parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('varModules')[range(0, length(variables('varModules')))[copyIndex()]].name]"
          },
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "automationAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Automation-Account-{0}', parameters('time'))), '2022-09-01').outputs.name.value]"
          },
          "uri": {
            "value": "[variables('varModules')[range(0, length(variables('varModules')))[copyIndex()]].uri]"
          },
          "version": {
            "value": "[variables('varModules')[range(0, length(variables('varModules')))[copyIndex()]].version]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "1661319858724328950"
            },
            "name": "Automation Account Modules",
            "description": "This module deploys an Azure Automation Account Module.",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Automation Account module."
              }
            },
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent Automation Account. Required if the template is used in a standalone deployment."
              }
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "Required. Module package URI, e.g. https://www.powershellgallery.com/api/v2/package."
              }
            },
            "version": {
              "type": "string",
              "defaultValue": "latest",
              "metadata": {
                "description": "Optional. Module version or specify latest to get the latest version."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the Automation Account resource."
              }
            }
          },
          "resources": {
            "automationAccount": {
              "existing": true,
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2022-08-08",
              "name": "[parameters('automationAccountName')]"
            },
            "module": {
              "type": "Microsoft.Automation/automationAccounts/modules",
              "apiVersion": "2022-08-08",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "contentLink": {
                  "uri": "[if(not(equals(parameters('version'), 'latest')), format('{0}/{1}/{2}', parameters('uri'), parameters('name'), parameters('version')), format('{0}/{1}', parameters('uri'), parameters('name')))]",
                  "version": "[if(not(equals(parameters('version'), 'latest')), parameters('version'), null())]"
                }
              },
              "dependsOn": [
                "automationAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed module."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed module."
              },
              "value": "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed module."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('module', '2022-08-08', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Automation-Account-{0}', parameters('time')))]"
      ]
    },
    {
      "condition": "[parameters('enableMonitoringAlerts')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Action-Group-{0}', parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "global"
          },
          "groupShortName": {
            "value": "aib-email"
          },
          "name": {
            "value": "[variables('varActionGroupName')]"
          },
          "enabled": {
            "value": true
          },
          "emailReceivers": {
            "value": [
              {
                "name": "[parameters('alertsDistributionGroup')]",
                "emailAddress": "[parameters('alertsDistributionGroup')]",
                "useCommonvarAlertschema": true
              }
            ]
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "12577177081682943679"
            },
            "name": "Action Groups",
            "description": "This module deploys an Action Group.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the action group."
              }
            },
            "groupShortName": {
              "type": "string",
              "metadata": {
                "description": "Required. The short name of the action group."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "emailReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of email receivers that are part of this action group."
              }
            },
            "smsReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of SMS receivers that are part of this action group."
              }
            },
            "webhookReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of webhook receivers that are part of this action group."
              }
            },
            "itsmReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of ITSM receivers that are part of this action group."
              }
            },
            "azureAppPushReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of AzureAppPush receivers that are part of this action group."
              }
            },
            "automationRunbookReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of AutomationRunbook receivers that are part of this action group."
              }
            },
            "voiceReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of voice receivers that are part of this action group."
              }
            },
            "logicAppReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of logic app receivers that are part of this action group."
              }
            },
            "azureFunctionReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of function receivers that are part of this action group."
              }
            },
            "armRoleReceivers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.insights-actiongroup.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "actionGroup": {
              "type": "Microsoft.Insights/actionGroups",
              "apiVersion": "2023-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "groupShortName": "[parameters('groupShortName')]",
                "enabled": "[parameters('enabled')]",
                "emailReceivers": "[parameters('emailReceivers')]",
                "smsReceivers": "[parameters('smsReceivers')]",
                "webhookReceivers": "[parameters('webhookReceivers')]",
                "itsmReceivers": "[parameters('itsmReceivers')]",
                "azureAppPushReceivers": "[parameters('azureAppPushReceivers')]",
                "automationRunbookReceivers": "[parameters('automationRunbookReceivers')]",
                "voiceReceivers": "[parameters('voiceReceivers')]",
                "logicAppReceivers": "[parameters('logicAppReceivers')]",
                "azureFunctionReceivers": "[parameters('azureFunctionReceivers')]",
                "armRoleReceivers": "[parameters('armRoleReceivers')]"
              }
            },
            "actionGroup_roleAssignments": {
              "copy": {
                "name": "actionGroup_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/actionGroups/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Insights/actionGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "actionGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the action group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the action group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the action group."
              },
              "value": "[resourceId('Microsoft.Insights/actionGroups', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('actionGroup', '2023-01-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('sharedServicesSubId'), 'Microsoft.Resources/deployments', format('RG-{0}', parameters('time')))]"
      ]
    },
    {
      "copy": {
        "name": "scheduledQueryRules",
        "count": "[length(range(0, length(variables('varAlerts'))))]"
      },
      "condition": "[parameters('enableMonitoringAlerts')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Scheduled-Query-Rule-{0}-{1}', range(0, length(variables('varAlerts')))[copyIndex()], parameters('time'))]",
      "subscriptionId": "[parameters('sharedServicesSubId')]",
      "resourceGroup": "[variables('varResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('deploymentLocation')]"
          },
          "name": {
            "value": "[variables('varAlerts')[range(0, length(variables('varAlerts')))[copyIndex()]].name]"
          },
          "alertDescription": {
            "value": "[variables('varAlerts')[range(0, length(variables('varAlerts')))[copyIndex()]].description]"
          },
          "enabled": {
            "value": true
          },
          "kind": {
            "value": "LogAlert"
          },
          "autoMitigate": {
            "value": false
          },
          "skipQueryValidation": {
            "value": false
          },
          "targetResourceTypes": {
            "value": []
          },
          "roleAssignments": {
            "value": []
          },
          "scopes": "[if(empty(parameters('alertsDistributionGroup')), createObject('value', createArray()), if(empty(parameters('existingLogAnalyticsWorkspaceResourceId')), createObject('value', createArray(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value)), createObject('value', createArray(parameters('existingLogAnalyticsWorkspaceResourceId')))))]",
          "severity": {
            "value": "[variables('varAlerts')[range(0, length(variables('varAlerts')))[copyIndex()]].severity]"
          },
          "evaluationFrequency": {
            "value": "[variables('varAlerts')[range(0, length(variables('varAlerts')))[copyIndex()]].evaluationFrequency]"
          },
          "windowSize": {
            "value": "[variables('varAlerts')[range(0, length(variables('varAlerts')))[copyIndex()]].windowSize]"
          },
          "actions": "[if(not(empty(parameters('alertsDistributionGroup'))), createObject('value', createArray(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Action-Group-{0}', parameters('time'))), '2022-09-01').outputs.resourceId.value)), createObject('value', createArray()))]",
          "criterias": {
            "value": "[variables('varAlerts')[range(0, length(variables('varAlerts')))[copyIndex()]].criterias]"
          },
          "tags": "[if(parameters('enableResourceTags'), createObject('value', variables('varCommonResourceTags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "8040620556913965462"
            },
            "name": "Scheduled Query Rules",
            "description": "This module deploys a Scheduled Query Rule.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Alert."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "alertDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the scheduled query rule."
              }
            },
            "enabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. The flag which indicates whether this scheduled query rule is enabled."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "LogAlert",
              "allowedValues": [
                "LogAlert",
                "LogToMetric"
              ],
              "metadata": {
                "description": "Optional. Indicates the type of scheduled query rule."
              }
            },
            "autoMitigate": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. The flag that indicates whether the alert should be automatically resolved or not. Relevant only for rules of the kind LogAlert."
              }
            },
            "queryTimeRange": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. If specified (in ISO 8601 duration format) then overrides the query time range. Relevant only for rules of the kind LogAlert."
              }
            },
            "skipQueryValidation": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag which indicates whether the provided query should be validated or not. Relevant only for rules of the kind LogAlert."
              }
            },
            "targetResourceTypes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "scopes": {
              "type": "array",
              "metadata": {
                "description": "Required. The list of resource IDs that this scheduled query rule is scoped to."
              }
            },
            "severity": {
              "type": "int",
              "defaultValue": 3,
              "allowedValues": [
                0,
                1,
                2,
                3,
                4
              ],
              "metadata": {
                "description": "Optional. Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert."
              }
            },
            "evaluationFrequency": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert."
              }
            },
            "windowSize": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Required if the kind is set to 'LogAlert', otherwise not relevant."
              }
            },
            "actions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Actions to invoke when the alert fires."
              }
            },
            "criterias": {
              "type": "object",
              "metadata": {
                "description": "Required. The rule criteria that defines the conditions of the scheduled query rule."
              }
            },
            "suppressForMinutes": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. If set, autoMitigate must be disabled.Relevant only for rules of the kind LogAlert."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.insights-scheduledqueryrule.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "queryRule": {
              "type": "Microsoft.Insights/scheduledQueryRules",
              "apiVersion": "2021-02-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "actions": {
                  "actionGroups": "[parameters('actions')]",
                  "customProperties": {}
                },
                "autoMitigate": "[if(equals(parameters('kind'), 'LogAlert'), parameters('autoMitigate'), null())]",
                "criteria": "[parameters('criterias')]",
                "description": "[parameters('alertDescription')]",
                "displayName": "[parameters('name')]",
                "enabled": "[parameters('enabled')]",
                "evaluationFrequency": "[if(and(equals(parameters('kind'), 'LogAlert'), not(empty(parameters('evaluationFrequency')))), parameters('evaluationFrequency'), null())]",
                "muteActionsDuration": "[if(and(equals(parameters('kind'), 'LogAlert'), not(empty(parameters('suppressForMinutes')))), parameters('suppressForMinutes'), null())]",
                "overrideQueryTimeRange": "[if(and(equals(parameters('kind'), 'LogAlert'), not(empty(parameters('queryTimeRange')))), parameters('queryTimeRange'), null())]",
                "scopes": "[parameters('scopes')]",
                "severity": "[if(equals(parameters('kind'), 'LogAlert'), parameters('severity'), null())]",
                "skipQueryValidation": "[if(equals(parameters('kind'), 'LogAlert'), parameters('skipQueryValidation'), null())]",
                "targetResourceTypes": "[if(equals(parameters('kind'), 'LogAlert'), parameters('targetResourceTypes'), null())]",
                "windowSize": "[if(and(equals(parameters('kind'), 'LogAlert'), not(empty(parameters('windowSize')))), parameters('windowSize'), null())]"
              }
            },
            "queryRule_roleAssignments": {
              "copy": {
                "name": "queryRule_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/scheduledQueryRules/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Insights/scheduledQueryRules', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "queryRule"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The Name of the created scheduled query rule."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the created scheduled query rule."
              },
              "value": "[resourceId('Microsoft.Insights/scheduledQueryRules', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The Resource Group of the created scheduled query rule."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('queryRule', '2021-02-01-preview', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Action-Group-{0}', parameters('time')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('sharedServicesSubId'), variables('varResourceGroupName')), 'Microsoft.Resources/deployments', format('Log-Analytics-Workspace-{0}', parameters('time')))]"
      ]
    }
  ]
}