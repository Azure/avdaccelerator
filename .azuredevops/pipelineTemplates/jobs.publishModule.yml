#########################################################
## PUBLISH PIPELINE                                    ##
#########################################################
##
## This pipeline template contains the logic to publish module data as
## - A build artifact and/or
## - As a new version to a given storage account and/or
## - As a new version as an UniversalPackage to a given artifact-feed
##
#########################################################

##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |======================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                             | Example                           |
##   |---------------------------------|--------------------------------------|---------------------------------------------------------------------------------------------------------|-----------------------------------|
##   | displayName                     | 'Publish module'                     | Name for the pipeline job                                                                               | 'Publish KeyVault'                |
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                           | 'demo-internal'                   |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                      | 'Custom Deployment Pool'          |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                      | 'ubuntu20.04'                     |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                                | 120                               |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy. E.g. [c:/KeyVault]                                                    | 'c:/KeyVault'                     |
##   | templateSpecsRGName             | '$(templateSpecsRGName)'             | Required to publish to template spec. ResourceGroup of the template spec to publish to                  | 'mgmt-rg'                         |
##   | templateSpecsRGLocation         | '$(templateSpecsRGLocation)'         | Required to publish to template spec. Location of the template spec resource group                      | 'West Europe'                     |
##   | templateSpecsDescription        | '$(templateSpecsDescription)'        | Required to publish to template spec. Description of the template spec to publish to                    | 'IaCs module'                     |
##   | vstsFeedToken                   | '$(vstsFeedToken)'                   | Required to publish to a DevOps feed. Token with access to the feed to publish to.                      | '...'                             |
##   | vstsFeedName                    | '$(vstsFeedName)'                    | Required to publish to a DevOps feed. Name to the feed to publish to.                                   | 'modules'                         |
##   | vstsFeedProject                 | '$(vstsFeedProject)'                 | Required to publish to a DevOps feed. Name of the project hosting the artifacts feed. May be empty.     | 'iacs'                            |
##   | bicepRegistryName               | '$(bicepRegistryName)'               | Required to publish to the private bicep registry. Name of the hosting container registry               | 'adpsxxazacrx001'                 |
##   | bicepRegistryRGName             | '$(bicepRegistryRGName)'             | Required to publish to the private bicep registry. Resource group of the hosting container registry     | 'artifacts-rg'                    |
##   | bicepRegistryRgLocation         | '$(bicepRegistryRgLocation)'         | Required to publish to the private bicep registry. Location of the RG of the hosting container registry | 'West Europe'                     |
##   | vstsOrganizationUri             | '$(vstsOrganizationUri)'             | Required to publish to a DevOps feed. Name of the organization hosting the artifacts feed.              | 'servicescode'                    |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShell Version, one of the example values.                           | 'latestVersion' or 'OtherVersion' |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShell Version, either an empty string or specific version.          | '4.4.0'                           |
##   |======================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  checkoutRepositories: ''
  displayName: 'Publish module'
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  modulesRepository: '$(modulesRepository)'

  # Logic-related parameters
  ## Module-related
  modulePath: '$(modulePath)'

  ## TemplateSpec-related
  templateSpecsDoPublish: '$(templateSpecsDoPublish)'
  templateSpecsRGName: '$(templateSpecsRGName)'
  templateSpecsRGLocation: '$(templateSpecsRGLocation)'
  templateSpecsDescription: '$(templateSpecsDescription)'

  ## Artifact-Feed-related
  artifactsFeedDoPublish: '$(artifactsFeedDoPublish)'
  vstsOrganizationUri: '$(vstsOrganizationUri)'
  vstsFeedProject: '$(vstsFeedProject)'
  vstsFeedName: '$(vstsFeedName)'
  vstsFeedToken: '$(vstsFeedToken)'

  ## Private-Bicep-Registry-related
  bicepRegistryDoPublish: '$(bicepRegistryDoPublish)'
  bicepRegistryName: '$(bicepRegistryName)'
  bicepRegistryRGName: '$(bicepRegistryRGName)'
  bicepRegistryRgLocation: '$(bicepRegistryRgLocation)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job:
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self
      - ${{ if ne(parameters.checkoutRepositories, '') }}:
          - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
              - checkout: ${{ checkoutRepository }}
                fetchDepth: 1 # the depth of commits to ask Git to fetch; if not set defaults to no limit
                path: 's/${{ checkoutRepository }}'

      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Define PS modules to install on the runner
            $Modules = @(
                @{ Name = 'Az.Accounts' },
                @{ Name = 'Az.ContainerRegistry' },
                @{ Name = 'Az.Resources' }
            )

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # [Multi Repo] Support task
      #--------------------------
      - task: PowerShell@2
        displayName: Handle Multi-Repo Invocation
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # ---------------------------- #
            # HANDLE MULTI-REPO INVOCATION #
            # ---------------------------- #

            # Handle multiple-repositories
            if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
              Write-Verbose "Multi-Repo Checkout" -Verbose
              $modulePath = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulesRepository)' '${{ parameters.modulePath }}'
            } else {
              Write-Verbose "No Multi-Repo Checkout" -Verbose
              $modulePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.modulePath }}'
            }
            Write-Output "##vso[task.setvariable variable=ENVMODULEPATH]$modulePath"

      # [Universal Artifact-feed publish] task(s)
      #------------------------------------------
      - task: PowerShell@2
        displayName: 'Publish module to artifacts feed'
        condition: and(
          eq(variables['artifactsFeedDoPublish'], true),
          succeeded()
          )
        enabled: true
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Get-ModulesToPublish.ps1')
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Publish-ModuleToUniversalArtifactFeed.ps1')

            #Prioritizing the bicep file
            $TemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.bicep'
            if (-not (Test-Path $TemplateFilePath)) {
              $TemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.json'
            }

            $functionInput = @{
              TemplateFilePath = $TemplateFilePath
            }

            Write-Verbose "Invoke Get-ModulesToPublish with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            # Get the modified child resources
            $ModulesToPublish = Get-ModulesToPublish @functionInput -Verbose

            # Publish the modified child resources
            foreach ($ModuleToPublish in $ModulesToPublish) {
              $RelPath = (($ModuleToPublish.TemplateFilePath).Split('/arm/')[-1]).Split('/deploy.')[0]
              Write-Host "##[group]$(' - [{0}] [{1}]' -f $RelPath, $ModuleToPublish.Version)"

              $functionInput = @{
                TemplateFilePath = $ModuleToPublish.TemplateFilePath
                VstsOrganizationUri = '${{ parameters.vstsOrganizationUri }}'
                VstsFeedProject  = '${{ parameters.vstsFeedProject }}'
                VstsFeedName     = '${{ parameters.vstsFeedName }}'
                ModuleVersion    = $ModuleToPublish.Version
                BearerToken      = $env:TOKEN
              }

              Write-Verbose "Invoke Publish-ModuleToUniversalArtifactFeed with" -Verbose
              Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

              Publish-ModuleToUniversalArtifactFeed @functionInput -Verbose
              Write-Host "##[endgroup]"
            }
        env:
          TOKEN: $(vstsFeedToken)

      # [template-spec publish] task(s)
      #--------------------------------
      - task: AzurePowerShell@5
        displayName: 'Publish module to template specs'
        condition: and(
          eq(variables['templateSpecsDoPublish'], true),
          succeeded()
          )
        enabled: true
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Get-ModulesToPublish.ps1')
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Publish-ModuleToTemplateSpec.ps1')

            #Prioritizing the bicep file
            $TemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.bicep'
            if (-not (Test-Path $TemplateFilePath)) {
              $TemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.json'
            }

            $functionInput = @{
              TemplateFilePath = $TemplateFilePath
            }

            Write-Verbose "Invoke Get-ModulesToPublish with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            # Get the modified child resources
            $ModulesToPublish = Get-ModulesToPublish @functionInput -Verbose

            # Publish the modified child resources
            foreach ($ModuleToPublish in $ModulesToPublish) {
              $RelPath = (($ModuleToPublish.TemplateFilePath).Split('/arm/')[-1]).Split('/deploy.')[0]
              Write-Host "##[group]$(' - [{0}] [{1}]' -f $RelPath, $ModuleToPublish.Version)"

              $functionInput = @{
                TemplateFilePath         = $ModuleToPublish.TemplateFilePath
                TemplateSpecsRgName      = '${{ parameters.templateSpecsRgName }}'
                TemplateSpecsRgLocation  = '${{ parameters.templateSpecsRgLocation }}'
                TemplateSpecsDescription = '${{ parameters.templateSpecsDescription }}'
                ModuleVersion            = $ModuleToPublish.Version
              }

              Write-Verbose "Invoke Publish-ModuleToTemplateSpec with" -Verbose
              Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

              Publish-ModuleToTemplateSpec @functionInput -Verbose
              Write-Host "##[endgroup]"
            }

      # [private bicep registry publish] task(s)
      #-------------------------------------------
      - task: AzurePowerShell@5
        displayName: 'Publish module to private bicep registry'
        condition: and(
          eq(variables['bicepRegistryDoPublish'], true),
          succeeded()
          )
        enabled: true
        inputs:
          azureSubscription: '${{ parameters.serviceConnection }}'
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          pwsh: true
          ScriptType: InlineScript
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Get-ModulesToPublish.ps1')
            . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourcePublish' 'Publish-ModuleToPrivateBicepRegistry.ps1')

            #Prioritizing the bicep file
            $TemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.bicep'
            if (-not (Test-Path $TemplateFilePath)) {
              $TemplateFilePath = Join-Path -Path '$(ENVMODULEPATH)' -ChildPath 'deploy.json'
            }

            $functionInput = @{
              TemplateFilePath = $TemplateFilePath
            }

            Write-Verbose "Invoke Get-ModulesToPublish with" -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            # Get the modified child resources
            $ModulesToPublish = Get-ModulesToPublish @functionInput -Verbose

            # Publish the modified child resources
            foreach ($ModuleToPublish in $ModulesToPublish) {
              $RelPath = (($ModuleToPublish.TemplateFilePath).Split('/arm/')[-1]).Split('/deploy.')[0]
              Write-Host "##[group]$(' - [{0}] [{1}]' -f $RelPath, $ModuleToPublish.Version)"

              $functionInput = @{
                TemplateFilePath         = $ModuleToPublish.TemplateFilePath
                BicepRegistryName       = '${{ parameters.bicepRegistryName }}'
                BicepRegistryRgName     = '${{ parameters.bicepRegistryRgName }}'
                BicepRegistryRgLocation = '${{ parameters.bicepRegistryRgLocation }}'
                ModuleVersion            = $ModuleToPublish.Version
              }

              Write-Verbose "Invoke Publish-ModuleToPrivateBicepRegistry with" -Verbose
              Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

              Publish-ModuleToPrivateBicepRegistry @functionInput -Verbose
              Write-Host "##[endgroup]"
            }
